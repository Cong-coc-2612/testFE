{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, EDIT_USER_INFO } from 'redux-saga/actions';\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\nimport store from 'redux-saga/store';\n\nconst editUserInfo = (data, path, param) => {\n  const uri = 'user';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doEditUserInfo(request) {\n  try {\n    const response = yield call(editUserInfo, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n      yield put({\n        type: QUERY_USER_INFO_SUCCESS,\n        payload: { ...store.getState().userInfo,\n          User: data.User\n        }\n      });\n\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo.id === data.User.id) {\n        yield put({\n          type: LOGIN_SUCCESS,\n          payload: data.User\n        });\n      }\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'EditUserInfo',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchEditUserInfo() {\n  yield takeLatest(EDIT_USER_INFO, doEditUserInfo);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/EditUserInfo/editUserInfo.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","EDIT_USER_INFO","QUERY_USER_INFO_SUCCESS","LOGIN_SUCCESS","store","editUserInfo","data","path","param","uri","datas","paths","params","PUT","doEditUserInfo","request","response","result","error","MessageCode","type","success","payload","getState","userInfo","User","currentUserInfo","id","Error","Message","failed","title","content","time","Date","watchEditUserInfo"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,cAAnC,QAAyD,oBAAzD;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAGA,MAAMC,YAAY,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAC7E,QAAMC,GAAG,GAAG,MAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOV,KAAK,CAACW,GAAD,EAAMV,MAAM,CAACc,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,cAAV,CAAyBC,OAAzB,EAAyD;AACvD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACU,YAAD,EAAeU,OAAO,CAACT,IAAR,CAAaA,IAA5B,EAAkCS,OAAO,CAACT,IAAR,CAAaC,IAA/C,EAAqDQ,OAAO,CAACT,IAAR,CAAaE,KAAlE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMtB,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAIA,YAAMT,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAElB,uBADE;AAERoB,QAAAA,OAAO,EAAE,EAAE,GAAGlB,KAAK,CAACmB,QAAN,GAAiBC,QAAtB;AAAgCC,UAAAA,IAAI,EAAEnB,IAAI,CAACmB;AAA3C;AAFD,OAAD,CAAT;;AAIA,UAAIrB,KAAK,CAACmB,QAAN,GAAiBG,eAAjB,IAAoC,IAApC,IAA4CtB,KAAK,CAACmB,QAAN,GAAiBG,eAAjB,CAAkCC,EAAlC,KAAyCrB,IAAI,CAACmB,IAAL,CAAUE,EAAnG,EAAuG;AACrG,cAAM9B,GAAG,CAAC;AACRuB,UAAAA,IAAI,EAAEjB,aADE;AAERmB,UAAAA,OAAO,EAAEhB,IAAI,CAACmB;AAFN,SAAD,CAAT;AAID;AACF,KAfD,MAeO;AACL,YAAM,IAAIG,KAAJ,CAAUZ,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBW,OAA9B,CAAN;AACD;AACF,GArBD,CAqBE,OAAOX,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBc;AADf,KAAD,CAAT;AAGA,UAAMjC,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEpB,wBADE;AAERM,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJW,QAAAA,KAAK,EAAE,cAFH;AAGJC,QAAAA,OAAO,EAAEd,KAHL;AAIJe,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,iBAAV,GAA8B;AAC3C,QAAMvC,UAAU,CAACK,cAAD,EAAiBa,cAAjB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_USER_INFO } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst editUserInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditUserInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editUserInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditUserInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditUserInfo() {\r\n  yield takeLatest(EDIT_USER_INFO, doEditUserInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}