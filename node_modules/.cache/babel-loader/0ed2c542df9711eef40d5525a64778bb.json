{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, DELETE_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\n\nconst deleteTeam = (data, path, param) => {\n  const uri = 'team';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.DELETE, datas, params, paths);\n};\n\nfunction* doDeleteTeam(request) {\n  try {\n    const response = yield call(deleteTeam, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n      yield put({\n        type: QUERY_LIST_TEAM,\n        response: {\n          success: QUERY_LIST_TEAM_SUCCESS,\n          failed: QUERY_LIST_TEAM_FAILED\n        },\n        data: {\n          path: '',\n          param: {\n            competitionId: request.data.data.competitionId,\n            limit: 999\n          },\n          data: {}\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'DeleteTeam',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchDeleteTeam() {\n  yield takeLatest(DELETE_TEAM, doDeleteTeam);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/DeleteTeam/deleteTeam.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","DELETE_TEAM","QUERY_LIST_TEAM","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","deleteTeam","data","path","param","uri","datas","paths","params","DELETE","doDeleteTeam","request","response","result","error","MessageCode","type","success","payload","failed","competitionId","limit","Error","Message","title","content","time","Date","watchDeleteTeam"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,WAAnC,EAAgDC,eAAhD,QAAuE,oBAAvE;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,2BAAhE;;AAGA,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAC3E,QAAMC,GAAG,GAAG,MAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOV,KAAK,CAACW,GAAD,EAAMV,MAAM,CAACc,MAAb,EAAqBH,KAArB,EAA4BE,MAA5B,EAAoCD,KAApC,CAAZ;AACD,CAND;;AAQA,UAAUG,YAAV,CAAuBC,OAAvB,EAAuD;AACrD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACU,UAAD,EAAaU,OAAO,CAACT,IAAR,CAAaA,IAA1B,EAAgCS,OAAO,CAACT,IAAR,CAAaC,IAA7C,EAAmDQ,OAAO,CAACT,IAAR,CAAaE,KAAhE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMtB,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAIA,YAAMT,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAElB,eADE;AAERc,QAAAA,QAAQ,EAAE;AACRK,UAAAA,OAAO,EAAElB,uBADD;AAERoB,UAAAA,MAAM,EAAEnB;AAFA,SAFF;AAMRE,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLgB,YAAAA,aAAa,EAAET,OAAO,CAACT,IAAR,CAAaA,IAAb,CAAkBkB,aAD5B;AAELC,YAAAA,KAAK,EAAE;AAFF,WAFH;AAMJnB,UAAAA,IAAI,EAAE;AANF;AANE,OAAD,CAAT;AAeD,KApBD,MAoBO;AACL,YAAM,IAAIoB,KAAJ,CAAUV,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBS,OAA9B,CAAN;AACD;AACF,GA1BD,CA0BE,OAAOT,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBO;AADf,KAAD,CAAT;AAGA,UAAM1B,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEpB,wBADE;AAERM,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJQ,QAAAA,KAAK,EAAE,YAFH;AAGJC,QAAAA,OAAO,EAAEX,KAHL;AAIJY,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,eAAV,GAA4B;AACzC,QAAMpC,UAAU,CAACK,WAAD,EAAca,YAAd,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, DELETE_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\n\r\n\r\nconst deleteTeam = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.DELETE, datas, params, paths);\r\n};\r\n\r\nfunction* doDeleteTeam(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(deleteTeam, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'DeleteTeam',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchDeleteTeam() {\r\n  yield takeLatest(DELETE_TEAM, doDeleteTeam);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}