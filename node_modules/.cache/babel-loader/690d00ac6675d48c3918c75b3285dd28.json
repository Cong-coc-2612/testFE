{"ast":null,"code":"import { REPORT_VIOLATION, QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND } from \"redux-saga/actions\";\nimport { QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED, REPORT_VIOLATION_SUCCESS, REPORT_VIOLATION_FAILED } from \"./reducers\";\nexport const queryTournamentInfo = data => ({\n  type: QUERY_TOURNAMENT_INFO,\n  response: {\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\n    failed: QUERY_TOURNAMENT_INFO_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const querySportsByTournament = data => ({\n  type: QUERY_SPORTS_BY_TOURNAMENT,\n  response: {\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const queryCompetitionsBySportAndTournament = data => ({\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\n  response: {\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const startTournament = data => ({\n  type: START_TOURNAMENT,\n  response: {\n    success: START_TOURNAMENT_SUCCESS,\n    failed: START_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const finishTournament = data => ({\n  type: FINISH_TOURNAMENT,\n  response: {\n    success: FINISH_TOURNAMENT_SUCCESS,\n    failed: FINISH_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const updateAvatarTournament = data => ({\n  type: TOURNAMENT_UPDATE_AVATAR,\n  response: {\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const updateBackgroundTournament = data => ({\n  type: TOURNAMENT_UPDATE_BACKGROUND,\n  response: {\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const reportViolation = data => ({\n  type: REPORT_VIOLATION,\n  response: {\n    success: REPORT_VIOLATION_SUCCESS,\n    failed: REPORT_VIOLATION_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/screens/TournamentInfo/actions.ts"],"names":["REPORT_VIOLATION","QUERY_TOURNAMENT_INFO","QUERY_SPORTS_BY_TOURNAMENT","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT","START_TOURNAMENT","FINISH_TOURNAMENT","TOURNAMENT_UPDATE_AVATAR","TOURNAMENT_UPDATE_BACKGROUND","QUERY_TOURNAMENT_INFO_SUCCESS","QUERY_TOURNAMENT_INFO_FAILED","QUERY_SPORTS_BY_TOURNAMENT_SUCCESS","QUERY_SPORTS_BY_TOURNAMENT_FAILED","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED","FINISH_TOURNAMENT_SUCCESS","FINISH_TOURNAMENT_FAILED","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAILED","TOURNAMENT_UPDATE_AVATAR_SUCCESS","TOURNAMENT_UPDATE_AVATAR_FAILED","TOURNAMENT_UPDATE_BACKGROUND_SUCCESS","TOURNAMENT_UPDATE_BACKGROUND_FAILED","REPORT_VIOLATION_SUCCESS","REPORT_VIOLATION_FAILED","queryTournamentInfo","data","type","response","success","failed","path","param","querySportsByTournament","queryCompetitionsBySportAndTournament","startTournament","finishTournament","updateAvatarTournament","updateBackgroundTournament","reportViolation"],"mappings":"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","sourcesContent":["import { IBigRequest } from \"interfaces/common\";\r\nimport { REPORT_VIOLATION, QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND } from \"redux-saga/actions\";\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED, REPORT_VIOLATION_SUCCESS, REPORT_VIOLATION_FAILED } from \"./reducers\";\r\n\r\nexport const queryTournamentInfo = (data: IBigRequest) => ({\r\n  type: QUERY_TOURNAMENT_INFO,\r\n  response: {\r\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n    failed: QUERY_TOURNAMENT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportsByTournament = (data: IBigRequest) => ({\r\n  type: QUERY_SPORTS_BY_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryCompetitionsBySportAndTournament = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const startTournament = (data: IBigRequest) => ({\r\n  type: START_TOURNAMENT,\r\n  response: {\r\n    success: START_TOURNAMENT_SUCCESS,\r\n    failed: START_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const finishTournament = (data: IBigRequest) => ({\r\n  type: FINISH_TOURNAMENT,\r\n  response: {\r\n    success: FINISH_TOURNAMENT_SUCCESS,\r\n    failed: FINISH_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateAvatarTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_AVATAR,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateBackgroundTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_BACKGROUND,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const reportViolation = (data: IBigRequest) => ({\r\n  type: REPORT_VIOLATION,\r\n  response: {\r\n    success: REPORT_VIOLATION_SUCCESS,\r\n    failed: REPORT_VIOLATION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}