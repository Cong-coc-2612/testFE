{"ast":null,"code":"import { REPORT_VIOLATION, QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND, REGIST_TEAM } from \"redux-saga/actions\";\nimport { REGIST_TEAM_FAILED, QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED, REPORT_VIOLATION_SUCCESS, REPORT_VIOLATION_FAILED, REGIST_TEAM_SUCCESS } from \"./reducers\";\nexport const queryTournamentInfo = data => ({\n  type: QUERY_TOURNAMENT_INFO,\n  response: {\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\n    failed: QUERY_TOURNAMENT_INFO_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const querySportsByTournament = data => ({\n  type: QUERY_SPORTS_BY_TOURNAMENT,\n  response: {\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const queryCompetitionsBySportAndTournament = data => ({\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\n  response: {\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const startTournament = data => ({\n  type: START_TOURNAMENT,\n  response: {\n    success: START_TOURNAMENT_SUCCESS,\n    failed: START_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const finishTournament = data => ({\n  type: FINISH_TOURNAMENT,\n  response: {\n    success: FINISH_TOURNAMENT_SUCCESS,\n    failed: FINISH_TOURNAMENT_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const updateAvatarTournament = data => ({\n  type: TOURNAMENT_UPDATE_AVATAR,\n  response: {\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const updateBackgroundTournament = data => ({\n  type: TOURNAMENT_UPDATE_BACKGROUND,\n  response: {\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const reportViolation = data => ({\n  type: REPORT_VIOLATION,\n  response: {\n    success: REPORT_VIOLATION_SUCCESS,\n    failed: REPORT_VIOLATION_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const registTeam = data => ({\n  type: REGIST_TEAM,\n  response: {\n    success: REGIST_TEAM_SUCCESS,\n    failed: REGIST_TEAM_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/screens/TournamentInfo/actions.ts"],"names":["REPORT_VIOLATION","QUERY_TOURNAMENT_INFO","QUERY_SPORTS_BY_TOURNAMENT","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT","START_TOURNAMENT","FINISH_TOURNAMENT","TOURNAMENT_UPDATE_AVATAR","TOURNAMENT_UPDATE_BACKGROUND","REGIST_TEAM","REGIST_TEAM_FAILED","QUERY_TOURNAMENT_INFO_SUCCESS","QUERY_TOURNAMENT_INFO_FAILED","QUERY_SPORTS_BY_TOURNAMENT_SUCCESS","QUERY_SPORTS_BY_TOURNAMENT_FAILED","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS","QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED","FINISH_TOURNAMENT_SUCCESS","FINISH_TOURNAMENT_FAILED","START_TOURNAMENT_SUCCESS","START_TOURNAMENT_FAILED","TOURNAMENT_UPDATE_AVATAR_SUCCESS","TOURNAMENT_UPDATE_AVATAR_FAILED","TOURNAMENT_UPDATE_BACKGROUND_SUCCESS","TOURNAMENT_UPDATE_BACKGROUND_FAILED","REPORT_VIOLATION_SUCCESS","REPORT_VIOLATION_FAILED","REGIST_TEAM_SUCCESS","queryTournamentInfo","data","type","response","success","failed","path","param","querySportsByTournament","queryCompetitionsBySportAndTournament","startTournament","finishTournament","updateAvatarTournament","updateBackgroundTournament","reportViolation","registTeam"],"mappings":"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","sourcesContent":["import { IBigRequest } from \"interfaces/common\";\r\nimport { REPORT_VIOLATION, QUERY_TOURNAMENT_INFO, QUERY_SPORTS_BY_TOURNAMENT, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT, START_TOURNAMENT, FINISH_TOURNAMENT, TOURNAMENT_UPDATE_AVATAR, TOURNAMENT_UPDATE_BACKGROUND, REGIST_TEAM } from \"redux-saga/actions\";\r\nimport { REGIST_TEAM_FAILED, QUERY_TOURNAMENT_INFO_SUCCESS, QUERY_TOURNAMENT_INFO_FAILED, QUERY_SPORTS_BY_TOURNAMENT_SUCCESS, QUERY_SPORTS_BY_TOURNAMENT_FAILED, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS, QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED, FINISH_TOURNAMENT_SUCCESS, FINISH_TOURNAMENT_FAILED, START_TOURNAMENT_SUCCESS, START_TOURNAMENT_FAILED, TOURNAMENT_UPDATE_AVATAR_SUCCESS, TOURNAMENT_UPDATE_AVATAR_FAILED, TOURNAMENT_UPDATE_BACKGROUND_SUCCESS, TOURNAMENT_UPDATE_BACKGROUND_FAILED, REPORT_VIOLATION_SUCCESS, REPORT_VIOLATION_FAILED, REGIST_TEAM_SUCCESS } from \"./reducers\";\r\n\r\nexport const queryTournamentInfo = (data: IBigRequest) => ({\r\n  type: QUERY_TOURNAMENT_INFO,\r\n  response: {\r\n    success: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n    failed: QUERY_TOURNAMENT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportsByTournament = (data: IBigRequest) => ({\r\n  type: QUERY_SPORTS_BY_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_SPORTS_BY_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_SPORTS_BY_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryCompetitionsBySportAndTournament = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT,\r\n  response: {\r\n    success: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_SUCCESS,\r\n    failed: QUERY_COMPETITIONS_BY_SPORT_AND_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const startTournament = (data: IBigRequest) => ({\r\n  type: START_TOURNAMENT,\r\n  response: {\r\n    success: START_TOURNAMENT_SUCCESS,\r\n    failed: START_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const finishTournament = (data: IBigRequest) => ({\r\n  type: FINISH_TOURNAMENT,\r\n  response: {\r\n    success: FINISH_TOURNAMENT_SUCCESS,\r\n    failed: FINISH_TOURNAMENT_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateAvatarTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_AVATAR,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_AVATAR_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_AVATAR_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateBackgroundTournament = (data: IBigRequest) => ({\r\n  type: TOURNAMENT_UPDATE_BACKGROUND,\r\n  response: {\r\n    success: TOURNAMENT_UPDATE_BACKGROUND_SUCCESS,\r\n    failed: TOURNAMENT_UPDATE_BACKGROUND_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const reportViolation = (data: IBigRequest) => ({\r\n  type: REPORT_VIOLATION,\r\n  response: {\r\n    success: REPORT_VIOLATION_SUCCESS,\r\n    failed: REPORT_VIOLATION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const registTeam = (data: IBigRequest) => ({\r\n  type: REGIST_TEAM,\r\n  response: {\r\n    success: REGIST_TEAM_SUCCESS,\r\n    failed: REGIST_TEAM_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}