{"ast":null,"code":"var _jsxFileName = \"E:\\\\testFrontEnd\\\\frontEnd\\\\SportTournamentSupportSystem\\\\src\\\\screens\\\\SignUp\\\\index.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ReduxBlockUi from 'react-block-ui/redux';\nimport TextInput from 'components/TextInput';\nimport config from 'config';\nimport { checkUsernameExisted, setUsernameExistedDefault } from 'redux-saga/global-actions/CheckUsernameExisted-action';\nimport { checkEmailExisted, setEmailExistedDefault } from 'redux-saga/global-actions/CheckEmailExisted-action';\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED } from 'redux-saga/global-reducers/IsUsernameExisted-reducer';\nimport { CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS } from 'redux-saga/global-reducers/IsEmailExisted-reducer';\nimport { CHECK_USERNAME_EXISTED, CHECK_EMAIL_EXISTED, SIGNUP } from 'redux-saga/actions';\nimport { signUp } from './actions';\nimport { SIGNUP_FAILED, SIGNUP_SUCCESS } from './reducers';\nimport './styles.css';\n\nclass SignUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUserName = value => {\n      this.setState({\n        username: value\n      });\n    };\n\n    this.onChangeFirstName = value => {\n      this.setState({\n        firstName: value\n      });\n    };\n\n    this.onChangeLastName = value => {\n      this.setState({\n        lastName: value\n      });\n    };\n\n    this.validateUsername = () => {\n      let usernameError = false;\n      let usernameErrorContent = '';\n\n      if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\n        usernameError = true;\n        usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\n      } else {\n        const params = {\n          path: '',\n          param: {\n            username: this.state.username\n          },\n          data: {}\n        };\n        this.props.checkUsernameExisted(params);\n      }\n\n      return {\n        usernameError,\n        usernameErrorContent\n      };\n    };\n\n    this.onBlurUserName = () => {\n      const {\n        usernameError,\n        usernameErrorContent\n      } = this.validateUsername();\n      this.setState({\n        usernameError,\n        usernameErrorContent\n      });\n      this.props.setUsernameExistedDefault();\n    };\n\n    this.validateEmail = () => {\n      let emailError = false;\n      let emailErrorContent = '';\n\n      if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\n        emailError = true;\n        emailErrorContent = 'Email không hợp lệ';\n      } else {\n        const params = {\n          path: '',\n          param: {\n            email: this.state.email\n          },\n          data: {}\n        };\n        this.props.checkEmailExisted(params);\n      }\n\n      return {\n        emailError,\n        emailErrorContent\n      };\n    };\n\n    this.onBlurEmail = () => {\n      const {\n        emailError,\n        emailErrorContent\n      } = this.validateEmail();\n      this.setState({\n        emailError,\n        emailErrorContent\n      });\n      this.props.setEmailExistedDefault();\n    };\n\n    this.onChangePassword = value => {\n      this.setState({\n        password: value\n      });\n    };\n\n    this.onChangeEmail = value => {\n      this.setState({\n        email: value\n      });\n    };\n\n    this.onChangeReconfirmPassword = value => {\n      this.setState({\n        reConfirmPassword: value\n      });\n    };\n\n    this.validate = () => {\n      let passwordError = false;\n      let passwordErrorContent = '';\n      let firstNameError = false;\n      let firstNameErrorContent = '';\n      let lastNameError = false;\n      let lastNameErrorContent = '';\n      let usernameErrorContent = '';\n      let usernameError = false;\n      let emailErrorContent = '';\n      let emailError = false;\n      let reconfirmPasswordErrorContent = '';\n      let reconfirmPasswordError = false;\n\n      if (this.state.password.includes(' ') || !config.regex.password.test(this.state.password) || this.state.password.trim() === '') {\n        passwordError = true;\n        passwordErrorContent = 'Mật khẩu không được trống, không chứa dấu cách, và phải chứa từ 8 đến 32 kí tự';\n      }\n\n      if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\n        usernameError = true;\n        usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\n      }\n\n      if (this.state.firstName.trim() === '') {\n        firstNameError = true;\n        firstNameErrorContent = 'Tên không được trống';\n      }\n\n      if (this.state.lastName.trim() === '') {\n        lastNameError = true;\n        lastNameErrorContent = 'Họ không được trống';\n      }\n\n      if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\n        emailError = true;\n        emailErrorContent = 'Email không hợp lệ';\n      }\n\n      if (this.state.reConfirmPassword !== this.state.password) {\n        reconfirmPasswordError = true;\n        reconfirmPasswordErrorContent = 'Nhập lại mật khẩu phải giống mật khẩu';\n      }\n\n      return {\n        passwordError,\n        passwordErrorContent,\n        usernameErrorContent,\n        usernameError,\n        emailErrorContent,\n        emailError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError,\n        firstNameError,\n        firstNameErrorContent,\n        lastNameError,\n        lastNameErrorContent\n      };\n    };\n\n    this.handleSignUp = () => {\n      const {\n        passwordError,\n        passwordErrorContent,\n        usernameErrorContent,\n        usernameError,\n        emailErrorContent,\n        emailError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError,\n        firstNameError,\n        firstNameErrorContent,\n        lastNameError,\n        lastNameErrorContent\n      } = this.validate();\n      this.setState({\n        passwordError,\n        passwordErrorContent,\n        usernameErrorContent,\n        usernameError,\n        emailErrorContent,\n        emailError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError,\n        firstNameError,\n        firstNameErrorContent,\n        lastNameError,\n        lastNameErrorContent\n      });\n\n      if (passwordError === true || usernameError === true || reconfirmPasswordError === true || emailError === true || firstNameError === true || lastNameError === true) {\n        return;\n      }\n\n      const params = {\n        path: '',\n        param: {},\n        data: {\n          username: this.state.username,\n          password: this.state.password,\n          email: this.state.email,\n          firstName: this.state.firstName,\n          lastName: this.state.lastName\n        }\n      };\n      this.props.signUp(params);\n    };\n\n    this.state = {\n      username: '',\n      firstName: '',\n      lastName: '',\n      password: '',\n      email: '',\n      reConfirmPassword: '',\n      usernameError: false,\n      passwordError: false,\n      firstNameError: false,\n      lastNameError: false,\n      usernameErrorContent: '',\n      lastNameErrorContent: '',\n      firstNameErrorContent: '',\n      passwordErrorContent: '',\n      emailError: false,\n      reconfirmPasswordError: false,\n      emailErrorContent: '',\n      reconfirmPasswordErrorContent: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === true) {\n      this.setState({\n        usernameError: true,\n        usernameErrorContent: 'Tài khoản này đã tồn tại'\n      });\n    }\n\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === false) {\n      this.setState({\n        usernameError: false,\n        usernameErrorContent: 'Tên đăng nhập có thể sử dụng được'\n      });\n    }\n\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === null) {\n      this.setState({\n        usernameError: true,\n        usernameErrorContent: 'Mất kết nối'\n      });\n    }\n\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === true) {\n      this.setState({\n        emailError: true,\n        emailErrorContent: 'Email này đã được sử dụng'\n      });\n    }\n\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === false) {\n      this.setState({\n        emailError: false,\n        emailErrorContent: 'Email có thể sử dụng được'\n      });\n    }\n\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === null) {\n      this.setState({\n        emailError: true,\n        emailErrorContent: 'Mất kết nối'\n      });\n    } // if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === {}) {\n    //   this.setState({\n    //     usernameError: false,\n    //     usernameErrorContent: '',\n    //   });\n    // }\n\n\n    return true;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ReduxBlockUi, {\n      tag: \"div\",\n      block: CHECK_USERNAME_EXISTED,\n      unblock: [CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReduxBlockUi, {\n      tag: \"div\",\n      block: CHECK_EMAIL_EXISTED,\n      unblock: [CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReduxBlockUi, {\n      tag: \"div\",\n      block: SIGNUP,\n      unblock: [SIGNUP_FAILED, SIGNUP_SUCCESS],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Container-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Container-login-middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }\n    }, \"\\u0110\\u0103ng k\\xFD\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"Long-introduction\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 15\n      }\n    }, \"B\\u1EAFt \\u0111\\u1EA7u d\\u1EC5 d\\xE0ng b\\u1EB1ng c\\xE1ch \\u0111\\u0103ng k\\xFD \\u0111\\u1EC3 qu\\u1EA3n l\\xFD c\\xE1c gi\\u1EA3i \\u0111\\u1EA5u\"), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Tên đăng nhập',\n      onChangeText: this.onChangeUserName,\n      error: this.state.usernameError,\n      errorContent: this.state.usernameErrorContent,\n      onBlur: this.onBlurUserName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Họ',\n      onChangeText: this.onChangeFirstName,\n      error: this.state.firstNameError,\n      errorContent: this.state.firstNameErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Tên',\n      onChangeText: this.onChangeLastName,\n      error: this.state.lastNameError,\n      errorContent: this.state.lastNameErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Email',\n      onChangeText: this.onChangeEmail,\n      error: this.state.emailError,\n      errorContent: this.state.emailErrorContent,\n      onBlur: this.onBlurEmail,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Mật khẩu',\n      type: 'password',\n      onChangeText: this.onChangePassword,\n      error: this.state.passwordError,\n      errorContent: this.state.passwordErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      onHandleSubmit: this.handleSignUp,\n      label: 'Xác nhận mật khẩu',\n      type: 'password',\n      onChangeText: this.onChangeReconfirmPassword,\n      error: this.state.reconfirmPasswordError,\n      errorContent: this.state.reconfirmPasswordErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Button-login-container\",\n      onClick: this.handleSignUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Button-login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"Button-login-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 19\n      }\n    }, \"\\u0110\\u0103ng k\\xFD\"))))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isUsernameExisted: state.isUsernameExisted,\n    isEmailExisted: state.isEmailExisted\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signUp,\n  checkUsernameExisted,\n  setUsernameExistedDefault,\n  checkEmailExisted,\n  setEmailExistedDefault\n})(SignUp);","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/screens/SignUp/index.tsx"],"names":["React","connect","ReduxBlockUi","TextInput","config","checkUsernameExisted","setUsernameExistedDefault","checkEmailExisted","setEmailExistedDefault","CHECK_USERNAME_EXISTED_SUCCESS","CHECK_USERNAME_EXISTED_FAILED","CHECK_EMAIL_EXISTED_FAILED","CHECK_EMAIL_EXISTED_SUCCESS","CHECK_USERNAME_EXISTED","CHECK_EMAIL_EXISTED","SIGNUP","signUp","SIGNUP_FAILED","SIGNUP_SUCCESS","SignUp","Component","constructor","props","onChangeUserName","value","setState","username","onChangeFirstName","firstName","onChangeLastName","lastName","validateUsername","usernameError","usernameErrorContent","state","trim","regex","test","params","path","param","data","onBlurUserName","validateEmail","emailError","emailErrorContent","email","onBlurEmail","onChangePassword","password","onChangeEmail","onChangeReconfirmPassword","reConfirmPassword","validate","passwordError","passwordErrorContent","firstNameError","firstNameErrorContent","lastNameError","lastNameErrorContent","reconfirmPasswordErrorContent","reconfirmPasswordError","includes","handleSignUp","shouldComponentUpdate","nextProps","nextState","isUsernameExisted","isEmailExisted","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport config from 'config';\r\nimport { checkUsernameExisted, setUsernameExistedDefault } from 'redux-saga/global-actions/CheckUsernameExisted-action';\r\nimport { checkEmailExisted, setEmailExistedDefault } from 'redux-saga/global-actions/CheckEmailExisted-action';\r\nimport { CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED } from 'redux-saga/global-reducers/IsUsernameExisted-reducer';\r\nimport { CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS } from 'redux-saga/global-reducers/IsEmailExisted-reducer';\r\nimport { CHECK_USERNAME_EXISTED, CHECK_EMAIL_EXISTED, SIGNUP } from 'redux-saga/actions';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { signUp } from './actions';\r\nimport { SIGNUP_FAILED, SIGNUP_SUCCESS } from './reducers';\r\nimport './styles.css';\r\n\r\ninterface ISignUpProps extends React.ClassAttributes<SignUp> {\r\n  isUsernameExisted: boolean | null | {};\r\n  isEmailExisted: boolean | null | {};\r\n\r\n  signUp(param: IBigRequest): void;\r\n  checkUsernameExisted(param: IBigRequest): void;\r\n  checkEmailExisted(param: IBigRequest): void;\r\n  setUsernameExistedDefault(): void;\r\n  setEmailExistedDefault(): void;\r\n}\r\n\r\ninterface ISignUpState {\r\n  username: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  password: string;\r\n  email: string;\r\n  reConfirmPassword: string;\r\n  usernameError: boolean;\r\n  firstNameError: boolean;\r\n  passwordError: boolean;\r\n  lastNameError: boolean;\r\n  usernameErrorContent: string;\r\n  firstNameErrorContent: string;\r\n  passwordErrorContent: string;\r\n  lastNameErrorContent: string;\r\n  emailError: boolean;\r\n  reconfirmPasswordError: boolean;\r\n  emailErrorContent: string;\r\n  reconfirmPasswordErrorContent: string;\r\n}\r\n\r\nclass SignUp extends React.Component<ISignUpProps, ISignUpState> {\r\n  constructor(props: ISignUpProps) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      password: '',\r\n      email: '',\r\n      reConfirmPassword: '',\r\n      usernameError: false,\r\n      passwordError: false,\r\n      firstNameError: false,\r\n      lastNameError: false,\r\n      usernameErrorContent: '',\r\n      lastNameErrorContent: '',\r\n      firstNameErrorContent: '',\r\n      passwordErrorContent: '',\r\n      emailError: false,\r\n      reconfirmPasswordError: false,\r\n      emailErrorContent: '',\r\n      reconfirmPasswordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ISignUpProps, nextState: ISignUpState) {\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === true) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Tài khoản này đã tồn tại',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === false) {\r\n      this.setState({\r\n        usernameError: false,\r\n        usernameErrorContent: 'Tên đăng nhập có thể sử dụng được',\r\n      });\r\n    }\r\n    if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === null) {\r\n      this.setState({\r\n        usernameError: true,\r\n        usernameErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === true) {\r\n      this.setState({\r\n        emailError: true,\r\n        emailErrorContent: 'Email này đã được sử dụng',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === false) {\r\n      this.setState({\r\n        emailError: false,\r\n        emailErrorContent: 'Email có thể sử dụng được',\r\n      });\r\n    }\r\n    if (this.props.isEmailExisted !== nextProps.isEmailExisted && nextProps.isEmailExisted === null) {\r\n      this.setState({\r\n        emailError: true,\r\n        emailErrorContent: 'Mất kết nối',\r\n      });\r\n    }\r\n    // if (this.props.isUsernameExisted !== nextProps.isUsernameExisted && nextProps.isUsernameExisted === {}) {\r\n    //   this.setState({\r\n    //     usernameError: false,\r\n    //     usernameErrorContent: '',\r\n    //   });\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  private onChangeUserName = (value: string) => {\r\n    this.setState({ username: value, });\r\n  }\r\n\r\n  private onChangeFirstName = (value: string) => {\r\n    this.setState({ firstName: value, });\r\n  }\r\n\r\n  private onChangeLastName = (value: string) => {\r\n    this.setState({ lastName: value, });\r\n  }\r\n\r\n  private validateUsername = () => {\r\n    let usernameError = false;\r\n    let usernameErrorContent = '';\r\n    if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          username: this.state.username,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkUsernameExisted(params);\r\n    }\r\n\r\n    return { usernameError, usernameErrorContent };\r\n  }\r\n\r\n  private onBlurUserName = () => {\r\n    const { usernameError, usernameErrorContent } = this.validateUsername();\r\n    this.setState({\r\n      usernameError,\r\n      usernameErrorContent,\r\n    });\r\n    this.props.setUsernameExistedDefault();\r\n  }\r\n\r\n  private validateEmail = () => {\r\n    let emailError = false;\r\n    let emailErrorContent = '';\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    } else {\r\n      const params = {\r\n        path: '',\r\n        param: {\r\n          email: this.state.email,\r\n        },\r\n        data: {},\r\n      };\r\n      this.props.checkEmailExisted(params);\r\n    }\r\n\r\n    return { emailError, emailErrorContent };\r\n  }\r\n\r\n  private onBlurEmail = () => {\r\n    const { emailError, emailErrorContent } = this.validateEmail();\r\n    this.setState({\r\n      emailError,\r\n      emailErrorContent,\r\n    });\r\n    this.props.setEmailExistedDefault();\r\n  }\r\n\r\n  private onChangePassword = (value: string) => {\r\n    this.setState({ password: value, });\r\n  }\r\n\r\n  private onChangeEmail = (value: string) => {\r\n    this.setState({ email: value, });\r\n  }\r\n\r\n  private onChangeReconfirmPassword = (value: string) => {\r\n    this.setState({ reConfirmPassword: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let passwordError = false;\r\n    let passwordErrorContent = '';\r\n    let firstNameError = false;\r\n    let firstNameErrorContent = '';\r\n    let lastNameError = false;\r\n    let lastNameErrorContent = '';\r\n    let usernameErrorContent = '';\r\n    let usernameError = false;\r\n    let emailErrorContent = '';\r\n    let emailError = false;\r\n    let reconfirmPasswordErrorContent = '';\r\n    let reconfirmPasswordError = false;\r\n    if (this.state.password.includes(' ') || !config.regex.password.test(this.state.password) || this.state.password.trim() === '') {\r\n      passwordError = true;\r\n      passwordErrorContent = 'Mật khẩu không được trống, không chứa dấu cách, và phải chứa từ 8 đến 32 kí tự';\r\n    }\r\n    if (this.state.username.trim() === '' || !config.regex.username.test(this.state.username)) {\r\n      usernameError = true;\r\n      usernameErrorContent = 'Tên đăng nhập không được trống, và phải chứa từ 8 đến 32 kí tự';\r\n    }\r\n    if (this.state.firstName.trim() === '') {\r\n      firstNameError = true;\r\n      firstNameErrorContent = 'Tên không được trống';\r\n    }\r\n    if (this.state.lastName.trim() === '') {\r\n      lastNameError = true;\r\n      lastNameErrorContent = 'Họ không được trống';\r\n    }\r\n    if (this.state.email.trim() === '' || !config.regex.email.test(this.state.email)) {\r\n      emailError = true;\r\n      emailErrorContent = 'Email không hợp lệ';\r\n    }\r\n    if (this.state.reConfirmPassword !== this.state.password) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Nhập lại mật khẩu phải giống mật khẩu';\r\n    }\r\n\r\n    return { passwordError, passwordErrorContent, usernameErrorContent, usernameError, emailErrorContent, emailError, reconfirmPasswordErrorContent, reconfirmPasswordError, firstNameError, firstNameErrorContent, lastNameError, lastNameErrorContent };\r\n  }\r\n\r\n  private handleSignUp = () => {\r\n    const { passwordError, passwordErrorContent, usernameErrorContent, usernameError, emailErrorContent, emailError, reconfirmPasswordErrorContent, reconfirmPasswordError, firstNameError, firstNameErrorContent, lastNameError, lastNameErrorContent } = this.validate();\r\n    this.setState({\r\n      passwordError,\r\n      passwordErrorContent,\r\n      usernameErrorContent,\r\n      usernameError,\r\n      emailErrorContent,\r\n      emailError,\r\n      reconfirmPasswordErrorContent,\r\n      reconfirmPasswordError,\r\n      firstNameError,\r\n      firstNameErrorContent,\r\n      lastNameError,\r\n      lastNameErrorContent\r\n    });\r\n    if (passwordError === true || usernameError === true || reconfirmPasswordError === true || emailError === true || firstNameError === true || lastNameError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        username: this.state.username,\r\n        password: this.state.password,\r\n        email: this.state.email,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n      },\r\n    };\r\n\r\n    this.props.signUp(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHECK_USERNAME_EXISTED}\r\n        unblock={[CHECK_USERNAME_EXISTED_SUCCESS, CHECK_USERNAME_EXISTED_FAILED]}\r\n      >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={CHECK_EMAIL_EXISTED}\r\n          unblock={[CHECK_EMAIL_EXISTED_FAILED, CHECK_EMAIL_EXISTED_SUCCESS]}\r\n        >\r\n        <ReduxBlockUi\r\n          tag=\"div\"\r\n          block={SIGNUP}\r\n          unblock={[SIGNUP_FAILED, SIGNUP_SUCCESS]}\r\n        >\r\n          <div className=\"Container-login\">\r\n            <div className=\"Container-login-middle\">\r\n              <h2>Đăng ký</h2>\r\n              <p className=\"Long-introduction\">Bắt đầu dễ dàng bằng cách đăng ký để quản lý các giải đấu</p>\r\n\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Tên đăng nhập'} onChangeText={this.onChangeUserName} error={this.state.usernameError} errorContent={this.state.usernameErrorContent} onBlur={this.onBlurUserName} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Họ'} onChangeText={this.onChangeFirstName} error={this.state.firstNameError} errorContent={this.state.firstNameErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Tên'} onChangeText={this.onChangeLastName} error={this.state.lastNameError} errorContent={this.state.lastNameErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Email'} onChangeText={this.onChangeEmail} error={this.state.emailError} errorContent={this.state.emailErrorContent} onBlur={this.onBlurEmail} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Mật khẩu'} type={'password'} onChangeText={this.onChangePassword} error={this.state.passwordError} errorContent={this.state.passwordErrorContent} />\r\n              <TextInput onHandleSubmit={this.handleSignUp} label={'Xác nhận mật khẩu'} type={'password'} onChangeText={this.onChangeReconfirmPassword} error={this.state.reconfirmPasswordError} errorContent={this.state.reconfirmPasswordErrorContent} />\r\n\r\n              <div className=\"Button-login-container\" onClick={this.handleSignUp}>\r\n                <div className=\"Button-login\">\r\n                  <h4 className=\"Button-login-text\">Đăng ký</h4>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </ReduxBlockUi>\r\n        </ReduxBlockUi>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    isUsernameExisted: state.isUsernameExisted,\r\n    isEmailExisted: state.isEmailExisted,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { signUp, checkUsernameExisted, setUsernameExistedDefault, checkEmailExisted, setEmailExistedDefault }\r\n)(SignUp);"]},"metadata":{},"sourceType":"module"}