{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_LIST_TOURNAMENT_SUCCESS } from 'components/AllTournaments/reducers';\nimport { COMMON_SHOW_NOTIFICATION, STOP_TOURNAMENT } from 'redux-saga/actions';\nimport store from 'redux-saga/store';\n\nconst stopTournament = (data, path, param) => {\n  const uri = 'admin/stopTournament';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doStopTournament(request) {\n  try {\n    const response = yield call(stopTournament, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n\n      if (store.getState().listTournament != null && store.getState().listTournament.Tournaments.findIndex(element => element.Tournament.id === data.Tournament.id) !== -1) {\n        let tempList = store.getState().listTournament.Tournaments.slice(0);\n        tempList[store.getState().listTournament.Tournaments.findIndex(element => element.Tournament.id === data.Tournament.id)].Tournament = data.Tournament;\n        yield put({\n          type: QUERY_LIST_TOURNAMENT_SUCCESS,\n          payload: { ...store.getState().listTournament,\n            Tournaments: tempList\n          }\n        });\n      }\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'StopTournament',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchStopTournament() {\n  yield takeLatest(STOP_TOURNAMENT, doStopTournament);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/StopTournament/stopTournament.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_LIST_TOURNAMENT_SUCCESS","COMMON_SHOW_NOTIFICATION","STOP_TOURNAMENT","store","stopTournament","data","path","param","uri","datas","paths","params","PUT","doStopTournament","request","response","result","error","MessageCode","type","success","payload","getState","listTournament","Tournaments","findIndex","element","Tournament","id","tempList","slice","Error","Message","failed","title","content","time","Date","watchStopTournament"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TOURNAMENT_SUCCESS } from 'components/AllTournaments/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, STOP_TOURNAMENT } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst stopTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'admin/stopTournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doStopTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(stopTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      if (store.getState().listTournament != null && (store.getState().listTournament!.Tournaments as IParams[]).findIndex(element => (element.Tournament as IParams).id === data.Tournament.id) !== -1) {\r\n        let tempList = (store.getState().listTournament!.Tournaments as IParams[]).slice(0);\r\n        tempList[(store.getState().listTournament!.Tournaments as IParams[]).findIndex(element => (element.Tournament as IParams).id === data.Tournament.id)].Tournament = data.Tournament;\r\n        yield put({\r\n          type: QUERY_LIST_TOURNAMENT_SUCCESS,\r\n          payload: { ...store.getState().listTournament, Tournaments: tempList, },\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'StopTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchStopTournament() {\r\n  yield takeLatest(STOP_TOURNAMENT, doStopTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}