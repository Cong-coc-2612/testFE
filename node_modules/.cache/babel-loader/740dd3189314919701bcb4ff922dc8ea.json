{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_LIST_USER_SUCCESS } from 'components/AllUsers/reducers';\nimport { COMMON_SHOW_NOTIFICATION, DEACTIVE_USER } from 'redux-saga/actions';\nimport store from 'redux-saga/store';\n\nconst deActiveUser = (data, path, param) => {\n  const uri = 'admin/deactivateAccount';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doDeActiveUser(request) {\n  try {\n    const response = yield call(deActiveUser, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n\n      if (store.getState().listUsers != null && store.getState().listUsers.Users.findIndex(element => element.id === data.User.id) !== -1) {\n        let tempList = store.getState().listUsers.Users.slice(0);\n        tempList[store.getState().listUsers.Users.findIndex(element => element.id === data.User.id)] = data.User;\n        yield put({\n          type: QUERY_LIST_USER_SUCCESS,\n          payload: { ...store.getState().listUsers,\n            Users: tempList\n          }\n        });\n      }\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'DeActiveUser',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchDeActiveUser() {\n  yield takeLatest(DEACTIVE_USER, doDeActiveUser);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/DeActiveUser/deActiveUser.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_LIST_USER_SUCCESS","COMMON_SHOW_NOTIFICATION","DEACTIVE_USER","store","deActiveUser","data","path","param","uri","datas","paths","params","PUT","doDeActiveUser","request","response","result","error","MessageCode","type","success","payload","getState","listUsers","Users","findIndex","element","id","User","tempList","slice","Error","Message","failed","title","content","time","Date","watchDeActiveUser"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_USER_SUCCESS } from 'components/AllUsers/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, DEACTIVE_USER } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst deActiveUser = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'admin/deactivateAccount';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doDeActiveUser(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(deActiveUser, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      if (store.getState().listUsers != null && (store.getState().listUsers!.Users as IParams[]).findIndex(element => element.id === data.User.id) !== -1) {\r\n        let tempList = (store.getState().listUsers!.Users as IParams[]).slice(0);\r\n        tempList[(store.getState().listUsers!.Users as IParams[]).findIndex(element => element.id === data.User.id)] = data.User;\r\n        yield put({\r\n          type: QUERY_LIST_USER_SUCCESS,\r\n          payload: { ...store.getState().listUsers, Users: tempList, },\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'DeActiveUser',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchDeActiveUser() {\r\n  yield takeLatest(DEACTIVE_USER, doDeActiveUser);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}