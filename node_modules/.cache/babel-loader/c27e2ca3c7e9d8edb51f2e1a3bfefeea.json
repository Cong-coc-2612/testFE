{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_REPORTS } from 'redux-saga/actions';\n\nconst queryAllReports = (data, path, param) => {\n  const uri = data.type === 2 ? 'admin/viewSystemReport' : 'admin/viewViolationReport';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.GET, datas, params, paths);\n};\n\nfunction* doQueryAllReports(request) {\n  try {\n    const response = yield call(queryAllReports, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'QueryAllReports',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchQueryAllReports() {\n  yield takeLatest(QUERY_ALL_REPORTS, doQueryAllReports);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/QueryAllReports/queryAllReports.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","QUERY_ALL_REPORTS","queryAllReports","data","path","param","uri","type","datas","paths","params","GET","doQueryAllReports","request","response","result","error","MessageCode","success","payload","Error","Message","failed","title","content","time","Date","watchQueryAllReports"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,iBAAnC,QAA4D,oBAA5D;;AAGA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAChF,QAAMC,GAAG,GAAGH,IAAI,CAACI,IAAL,KAAc,CAAd,GAAkB,wBAAlB,GAA6C,2BAAzD;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGL;AAAL,GAAd;AACA,QAAMM,KAAK,GAAGL,IAAd;AACA,QAAMM,MAAM,GAAG,EAAE,GAAGL;AAAL,GAAf;AACA,SAAOP,KAAK,CAACQ,GAAD,EAAMP,MAAM,CAACY,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,iBAAV,CAA4BC,OAA5B,EAA4D;AAC1D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACO,eAAD,EAAkBW,OAAO,CAACV,IAAR,CAAaA,IAA/B,EAAqCU,OAAO,CAACV,IAAR,CAAaC,IAAlD,EAAwDS,OAAO,CAACV,IAAR,CAAaE,KAArE,CAA3B;AACA,UAAMF,IAAI,GAAGW,QAAQ,CAACX,IAAT,CAAcY,MAA3B;;AACA,QAAID,QAAQ,CAACX,IAAT,CAAca,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMpB,GAAG,CAAC;AACRU,QAAAA,IAAI,EAAEM,OAAO,CAACC,QAAR,CAAiBI,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAM,IAAIiB,KAAJ,CAAUN,QAAQ,CAACX,IAAT,CAAca,KAAd,CAAoBK,OAA9B,CAAN;AACD;AACF,GAXD,CAWE,OAAOL,KAAP,EAAc;AACd,UAAMnB,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEM,OAAO,CAACC,QAAR,CAAiBQ;AADf,KAAD,CAAT;AAGA,UAAMzB,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEP,wBADE;AAERG,MAAAA,IAAI,EAAE;AACJI,QAAAA,IAAI,EAAE,OADF;AAEJgB,QAAAA,KAAK,EAAE,iBAFH;AAGJC,QAAAA,OAAO,EAAER,KAHL;AAIJS,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,oBAAV,GAAiC;AAC9C,QAAM/B,UAAU,CAACK,iBAAD,EAAoBW,iBAApB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_REPORTS } from 'redux-saga/actions';\r\n\r\n\r\nconst queryAllReports = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = data.type === 2 ? 'admin/viewSystemReport' : 'admin/viewViolationReport';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryAllReports(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryAllReports, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryAllReports',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryAllReports() {\r\n  yield takeLatest(QUERY_ALL_REPORTS, doQueryAllReports);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}