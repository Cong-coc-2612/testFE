{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { GET_BRACKET_BOARD_INFO, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\n\nconst queryBracketBoardInfo = (data, path, param) => {\n  const uri = 'schedule';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.GET, datas, params, paths);\n};\n\nlet listMatchesFull = [];\nlet listWinMatchesFull = [];\nlet listLoseMatchesFull = [];\nlet listRound = [];\nlet listRRRound = [];\nlet listTableRR = [];\nlet listTableSE = [];\nlet listTableDE = [];\nlet listWinRound = [];\nlet listLoseRound = [];\n\nconst DFS = (node, number, maxRound, fakeId) => {\n  if (node.left != null) {\n    if (number === 3) {\n      if (node.degree % 2 === 0) {\n        DFS(node.left, number, maxRound, fakeId);\n      } else {\n        DFS(node.left, number, maxRound, fakeId * 2);\n      }\n    } else {\n      DFS(node.left, number, maxRound);\n    }\n  } else if (node.left == null && node.data.roundNo >= 2 && node.data.roundNo <= maxRound && number !== 3) {\n    node.left = {\n      id: -1,\n      data: {\n        loser: null,\n        matchNo: -1,\n        name: '',\n        roundNo: node.data.roundNo - 1,\n        status: null,\n        team1: null,\n        team1Description: null,\n        team2: null,\n        team2Description: null,\n        winner: null\n      },\n      degree: null,\n      left: null,\n      right: null\n    };\n    DFS(node.left, number, maxRound);\n  }\n\n  if (node.right != null) {\n    if (number === 3) {\n      if (node.degree % 2 === 0) {\n        DFS(node.right, number, maxRound, fakeId);\n      } else {\n        DFS(node.right, number, maxRound, fakeId * 2 + 1);\n      }\n    } else {\n      DFS(node.right, number, maxRound);\n    }\n  } else if (node.right == null && node.data.roundNo >= 2 && node.data.roundNo <= maxRound && number !== 3) {\n    node.right = {\n      id: -1,\n      data: {\n        loser: null,\n        matchNo: -1,\n        name: '',\n        roundNo: node.data.roundNo - 1,\n        status: null,\n        team1: null,\n        team1Description: null,\n        team2: null,\n        team2Description: null,\n        winner: null\n      },\n      degree: null,\n      left: null,\n      right: null\n    };\n    DFS(node.right, number, maxRound);\n  }\n\n  if (number === 1) {\n    listMatchesFull.push(node);\n  } else if (number === 2) {\n    listWinMatchesFull.push(node);\n  } else if (number === 3) {\n    if (node.data.name.includes('L')) {\n      listLoseMatchesFull.push({ ...node,\n        fakeId\n      });\n    }\n  }\n};\n\nfunction* doQueryBracketBoardInfo(request) {\n  try {\n    const response = yield call(queryBracketBoardInfo, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n    let tempVar = {};\n    let tempVar2 = {};\n\n    if (response.data.error.MessageCode === 0) {\n      if (data.Schedule != null && data.Schedule.finalStageSchedule != null) {\n        if (data.Schedule.finalStageSchedule.formatName === 'Round Robin') {\n          let listMatches = [];\n\n          for (let i = 1; i <= data.Schedule.finalStageSchedule.totalRound; i++) {\n            for (let j = 0; j < data.Schedule.finalStageSchedule.matches.length; j++) {\n              if (data.Schedule.finalStageSchedule.matches[j].roundNo === i) {\n                listMatches.push(data.Schedule.finalStageSchedule.matches[j]);\n              }\n            }\n\n            listRRRound.push({\n              listMatches,\n              roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1]\n            });\n            listMatches = [];\n          }\n\n          tempVar = {\n            finalStage: {\n              listRRRound\n            }\n          };\n          listRRRound = [];\n        } else {\n          if (data.Schedule.finalStageSchedule.winBranch == null) {\n            yield call(DFS, data.Schedule.finalStageSchedule.bracket.root, 1, data.Schedule.finalStageSchedule.bracket.root.data.roundNo);\n            let listMatches = [];\n\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.bracket.root.data.roundNo; i++) {\n              for (let j = 0; j < listMatchesFull.length; j++) {\n                if (listMatchesFull[j].data.roundNo === i) {\n                  listMatches.push(listMatchesFull[j]);\n                }\n              }\n\n              listRound.push({\n                listMatches,\n                roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1]\n              });\n              listMatches = [];\n            }\n\n            tempVar = {\n              finalStage: {\n                listRound\n              }\n            };\n            listRound = [];\n            listMatchesFull = [];\n          } else {\n            yield call(DFS, data.Schedule.finalStageSchedule.winBranch.root, 2, data.Schedule.finalStageSchedule.winBranch.root.data.roundNo);\n            let listWinMatches = [];\n\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.winBranch.root.data.roundNo; i++) {\n              for (let j = 0; j < listWinMatchesFull.length; j++) {\n                if (listWinMatchesFull[j].data.roundNo === i) {\n                  listWinMatches.push(listWinMatchesFull[j]);\n                }\n              }\n\n              listWinRound.push({\n                listWinMatches,\n                roundName: data.Schedule.finalStageSchedule.winRoundsNaming[i - 1]\n              });\n              listWinMatches = [];\n            }\n\n            if (data.Schedule.finalStageSchedule.loseBranch.root != null) {\n              yield call(DFS, data.Schedule.finalStageSchedule.loseBranch.root, 3, data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo, 1);\n              let listLoseMatches = [];\n\n              for (let i = 1; i <= data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo; i++) {\n                for (let j = 0; j < listLoseMatchesFull.length; j++) {\n                  if (listLoseMatchesFull[j].data.roundNo === i) {\n                    listLoseMatches.push(listLoseMatchesFull[j]);\n                  }\n                }\n\n                listLoseRound.push({\n                  listLoseMatches,\n                  roundName: data.Schedule.finalStageSchedule.loseRoundsNaming[i - 1]\n                });\n                listLoseMatches = [];\n              }\n            }\n\n            tempVar = {\n              finalStage: {\n                listWinRound,\n                listLoseRound\n              }\n            };\n            listWinRound = [];\n            listWinMatchesFull = [];\n            listLoseRound = [];\n            listLoseMatchesFull = [];\n          }\n        }\n      }\n\n      if (data.Schedule != null && data.Schedule.hasGroupStage === true) {\n        if (data.Schedule.groupStageSchedule != null && Object.keys(data.Schedule.groupStageSchedule).length > 0) {\n          if (data.Schedule.groupStageSchedule.formatName === 'Round Robin') {\n            for (let i = 0; i < data.Schedule.groupStageSchedule.tables.length; i++) {\n              let listMatches = [];\n\n              if (data.Schedule.groupStageSchedule.tables[i].totalRound != null) {\n                for (let j = 1; j <= data.Schedule.groupStageSchedule.tables[i].totalRound; j++) {\n                  if (data.Schedule.groupStageSchedule.tables[i].matches != null) {\n                    for (let k = 0; k < data.Schedule.groupStageSchedule.tables[i].matches.length; k++) {\n                      if (data.Schedule.groupStageSchedule.tables[i].matches[k].roundNo === j) {\n                        listMatches.push(data.Schedule.groupStageSchedule.tables[i].matches[k]);\n                      }\n                    }\n\n                    listRRRound.push({\n                      listMatches,\n                      roundName: data.Schedule.groupStageSchedule.tables[i].roundsNaming[j - 1]\n                    });\n                    listMatches = [];\n                  }\n                }\n              }\n\n              listTableRR.push({\n                listRRRound,\n                tableName: data.Schedule.groupStageSchedule.tables[i].tableName\n              });\n              listRRRound = [];\n            }\n\n            tempVar2 = {\n              groupStage: {\n                listTableRR\n              }\n            };\n            listTableRR = [];\n          } else {\n            if (data.Schedule.groupStageSchedule.formatName !== 'Double Elimination') {\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\n                if (data.Schedule.groupStageSchedule.tables[k].bracket != null) {\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].bracket.root, 1, data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo);\n                  let listMatches = [];\n\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo; i++) {\n                    for (let j = 0; j < listMatchesFull.length; j++) {\n                      if (listMatchesFull[j].data.roundNo === i) {\n                        listMatches.push(listMatchesFull[j]);\n                      }\n                    }\n\n                    listRound.push({\n                      listMatches,\n                      roundName: data.Schedule.groupStageSchedule.tables[k].roundsNaming[i - 1]\n                    });\n                    listMatches = [];\n                  }\n                }\n\n                listTableSE.push({\n                  listRound,\n                  tableName: data.Schedule.groupStageSchedule.tables[k].tableName\n                });\n                listRound = [];\n                listMatchesFull = [];\n              }\n\n              tempVar2 = {\n                groupStage: {\n                  listTableSE\n                }\n              };\n              listTableSE = [];\n            } else {\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\n                yield call(DFS, data.Schedule.groupStageSchedule.tables[k].winBranch.root, 2, data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo);\n                let listWinMatches = [];\n\n                for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo; i++) {\n                  for (let j = 0; j < listWinMatchesFull.length; j++) {\n                    if (listWinMatchesFull[j].data.roundNo === i) {\n                      listWinMatches.push(listWinMatchesFull[j]);\n                    }\n                  }\n\n                  listWinRound.push({\n                    listWinMatches,\n                    roundName: data.Schedule.groupStageSchedule.tables[k].winRoundsNaming[i - 1]\n                  });\n                  listWinMatches = [];\n                }\n\n                if (data.Schedule.groupStageSchedule.tables[k].loseBranch != null && data.Schedule.groupStageSchedule.tables[k].loseBranch.root != null) {\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].loseBranch.root, 3, data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo, 1);\n                  let listLoseMatches = [];\n\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo; i++) {\n                    for (let j = 0; j < listLoseMatchesFull.length; j++) {\n                      if (listLoseMatchesFull[j].data.roundNo === i) {\n                        listLoseMatches.push(listLoseMatchesFull[j]);\n                      }\n                    }\n\n                    listLoseRound.push({\n                      listLoseMatches,\n                      roundName: data.Schedule.groupStageSchedule.tables[k].loseRoundsNaming[i - 1]\n                    });\n                    listLoseMatches = [];\n                  }\n                }\n\n                listTableDE.push({\n                  listWinRound,\n                  listLoseRound,\n                  tableName: data.Schedule.groupStageSchedule.tables[k].tableName\n                });\n                listWinRound = [];\n                listWinMatchesFull = [];\n                listLoseRound = [];\n                listLoseMatchesFull = [];\n              }\n\n              tempVar2 = {\n                groupStage: {\n                  listTableDE\n                }\n              };\n              listTableDE = [];\n            }\n          }\n        }\n      }\n\n      yield put({\n        type: request.response.success,\n        payload: { ...tempVar,\n          ...tempVar2\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'QueryBracketBoardInfo',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchQueryBracketBoardInfo() {\n  yield takeLatest(GET_BRACKET_BOARD_INFO, doQueryBracketBoardInfo);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/BracketBoard/queryBracketBoardInfo.ts"],"names":["call","takeLatest","put","query","METHOD","GET_BRACKET_BOARD_INFO","COMMON_SHOW_NOTIFICATION","queryBracketBoardInfo","data","path","param","uri","datas","paths","params","GET","listMatchesFull","listWinMatchesFull","listLoseMatchesFull","listRound","listRRRound","listTableRR","listTableSE","listTableDE","listWinRound","listLoseRound","DFS","node","number","maxRound","fakeId","left","degree","roundNo","id","loser","matchNo","name","status","team1","team1Description","team2","team2Description","winner","right","push","includes","doQueryBracketBoardInfo","request","response","result","tempVar","tempVar2","error","MessageCode","Schedule","finalStageSchedule","formatName","listMatches","i","totalRound","j","matches","length","roundName","roundsNaming","finalStage","winBranch","bracket","root","listWinMatches","winRoundsNaming","loseBranch","listLoseMatches","loseRoundsNaming","hasGroupStage","groupStageSchedule","Object","keys","tables","k","tableName","groupStage","type","success","payload","Error","Message","failed","title","content","time","Date","watchQueryBracketBoardInfo"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest, TypeAny } from 'interfaces/common';\r\nimport { GET_BRACKET_BOARD_INFO, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nconst queryBracketBoardInfo = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'schedule';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nlet listMatchesFull: IParams[] = [];\r\nlet listWinMatchesFull: IParams[] = [];\r\nlet listLoseMatchesFull: IParams[] = [];\r\nlet listRound: IParams[] = [];\r\nlet listRRRound: IParams[] = [];\r\nlet listTableRR: IParams[] = [];\r\nlet listTableSE: IParams[] = [];\r\nlet listTableDE: IParams[] = [];\r\nlet listWinRound: IParams[] = [];\r\nlet listLoseRound: IParams[] = [];\r\n\r\nconst DFS = (node: IParams, number: number, maxRound: number, fakeId?: number) => {\r\n  if (node.left != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.left as unknown as IParams, number, maxRound, fakeId! * 2);\r\n      }\r\n    } else {\r\n      DFS(node.left as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.left == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.left = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.left as unknown as IParams, number, maxRound);\r\n  }\r\n  if (node.right != null) {\r\n    if (number === 3) {\r\n      if ((node.degree as number) % 2 === 0) {\r\n        DFS(node.right as unknown as IParams, number, maxRound, fakeId);\r\n      } else {\r\n        DFS(node.right as unknown as IParams, number, maxRound, (fakeId! * 2) + 1);\r\n      }\r\n    } else {\r\n      DFS(node.right as unknown as IParams, number, maxRound);\r\n    }\r\n  } else if (node.right == null && (((node.data as unknown as IParams).roundNo as number) >= 2 && ((node.data as unknown as IParams).roundNo as number) <= maxRound) && number !== 3) {\r\n    node.right = {\r\n      id: -1,\r\n      data: {\r\n        loser: null,\r\n        matchNo: -1,\r\n        name: '',\r\n        roundNo: ((node.data as unknown as IParams).roundNo as number) - 1,\r\n        status: null,\r\n        team1: null,\r\n        team1Description: null,\r\n        team2: null,\r\n        team2Description: null,\r\n        winner: null,\r\n      },\r\n      degree: null,\r\n      left: null,\r\n      right: null,\r\n    } as unknown as TypeAny;\r\n    DFS(node.right as unknown as IParams, number, maxRound);\r\n  }\r\n  if (number === 1) {\r\n    listMatchesFull.push(node);\r\n  } else if (number === 2) {\r\n    listWinMatchesFull.push(node);\r\n  } else if (number === 3) {\r\n    if (((node.data as unknown as IParams).name as string).includes('L')) {\r\n      listLoseMatchesFull.push({ ...node, fakeId });\r\n    }\r\n  }\r\n}\r\n\r\nfunction* doQueryBracketBoardInfo(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryBracketBoardInfo, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    let tempVar: IParams = {};\r\n    let tempVar2: IParams = {};\r\n    if (response.data.error.MessageCode === 0) {\r\n      if (data.Schedule != null && data.Schedule.finalStageSchedule != null) {\r\n        if (data.Schedule.finalStageSchedule.formatName === 'Round Robin') {\r\n          let listMatches: IParams[] = [];\r\n          for (let i = 1; i <= data.Schedule.finalStageSchedule.totalRound; i++) {\r\n            for (let j = 0; j < data.Schedule.finalStageSchedule.matches.length; j++) {\r\n              if (data.Schedule.finalStageSchedule.matches[j].roundNo === i) {\r\n                listMatches.push(data.Schedule.finalStageSchedule.matches[j] as IParams);\r\n              }\r\n            }\r\n            listRRRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n            listMatches = [];\r\n          }\r\n          tempVar = { finalStage: { listRRRound } };\r\n          listRRRound = [];\r\n        } else {\r\n          if (data.Schedule.finalStageSchedule.winBranch == null) {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.bracket.root, 1, data.Schedule.finalStageSchedule.bracket.root.data.roundNo);\r\n            let listMatches: IParams[] = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.bracket.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listMatchesFull.length; j++) {\r\n                if ((listMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listMatches.push(listMatchesFull[j] as IParams);\r\n                }\r\n              }\r\n              listRound.push({ listMatches, roundName: data.Schedule.finalStageSchedule.roundsNaming[i - 1] } as unknown as IParams);\r\n              listMatches = [];\r\n            }\r\n            tempVar = { finalStage: { listRound } };\r\n            listRound = [];\r\n            listMatchesFull = [];\r\n          } else {\r\n            yield call(DFS, data.Schedule.finalStageSchedule.winBranch.root, 2, data.Schedule.finalStageSchedule.winBranch.root.data.roundNo);\r\n            let listWinMatches = [];\r\n            for (let i = 1; i <= data.Schedule.finalStageSchedule.winBranch.root.data.roundNo; i++) {\r\n              for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                  listWinMatches.push(listWinMatchesFull[j]);\r\n                }\r\n              }\r\n              listWinRound.push({ listWinMatches, roundName: data.Schedule.finalStageSchedule.winRoundsNaming[i - 1] } as unknown as IParams);\r\n              listWinMatches = [];\r\n            }\r\n            if (data.Schedule.finalStageSchedule.loseBranch.root != null) {\r\n              yield call(DFS, data.Schedule.finalStageSchedule.loseBranch.root, 3, data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo, 1);\r\n              let listLoseMatches = [];\r\n              for (let i = 1; i <= data.Schedule.finalStageSchedule.loseBranch.root.data.roundNo; i++) {\r\n                for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                  if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                    listLoseMatches.push(listLoseMatchesFull[j]);\r\n                  }\r\n                }\r\n                listLoseRound.push({ listLoseMatches, roundName: data.Schedule.finalStageSchedule.loseRoundsNaming[i - 1] } as unknown as IParams);\r\n                listLoseMatches = [];\r\n              }\r\n            }\r\n            tempVar = { finalStage: { listWinRound, listLoseRound } };\r\n            listWinRound = [];\r\n            listWinMatchesFull = [];\r\n            listLoseRound = [];\r\n            listLoseMatchesFull = [];\r\n          }\r\n        }\r\n\r\n      }\r\n      if (data.Schedule != null && data.Schedule.hasGroupStage === true) {\r\n        if (data.Schedule.groupStageSchedule != null && Object.keys(data.Schedule.groupStageSchedule).length > 0) {\r\n          if (data.Schedule.groupStageSchedule.formatName === 'Round Robin') {\r\n            for (let i = 0; i < data.Schedule.groupStageSchedule.tables.length; i++) {\r\n              let listMatches: IParams[] = [];\r\n              if (data.Schedule.groupStageSchedule.tables[i].totalRound != null) {\r\n                for (let j = 1; j <= data.Schedule.groupStageSchedule.tables[i].totalRound; j++) {\r\n                  if (data.Schedule.groupStageSchedule.tables[i].matches != null) {\r\n                    for (let k = 0; k < data.Schedule.groupStageSchedule.tables[i].matches.length; k++) {\r\n                      if (data.Schedule.groupStageSchedule.tables[i].matches[k].roundNo === j) {\r\n                        listMatches.push(data.Schedule.groupStageSchedule.tables[i].matches[k] as IParams);\r\n                      }\r\n                    }\r\n                    listRRRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[i].roundsNaming[j - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n              }\r\n              listTableRR.push({ listRRRound, tableName: data.Schedule.groupStageSchedule.tables[i].tableName } as IParams);\r\n              listRRRound = [];\r\n            }\r\n            tempVar2 = { groupStage: { listTableRR } };\r\n            listTableRR = [];\r\n          } else {\r\n            if (data.Schedule.groupStageSchedule.formatName !== 'Double Elimination') {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                if (data.Schedule.groupStageSchedule.tables[k].bracket != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].bracket.root, 1, data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo);\r\n                  let listMatches: IParams[] = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].bracket.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listMatchesFull.length; j++) {\r\n                      if ((listMatchesFull[j].data as IParams).roundNo === i) {\r\n                        listMatches.push(listMatchesFull[j] as IParams);\r\n                      }\r\n                    }\r\n                    listRound.push({ listMatches, roundName: data.Schedule.groupStageSchedule.tables[k].roundsNaming[i - 1] } as IParams);\r\n                    listMatches = [];\r\n                  }\r\n                }\r\n                listTableSE.push({ listRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName } as IParams);\r\n                listRound = [];\r\n                listMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableSE } };\r\n              listTableSE = [];\r\n            } else {\r\n              for (let k = 0; k < data.Schedule.groupStageSchedule.tables.length; k++) {\r\n                yield call(DFS, data.Schedule.groupStageSchedule.tables[k].winBranch.root, 2, data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo);\r\n                let listWinMatches = [];\r\n                for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].winBranch.root.data.roundNo; i++) {\r\n                  for (let j = 0; j < listWinMatchesFull.length; j++) {\r\n                    if ((listWinMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                      listWinMatches.push(listWinMatchesFull[j]);\r\n                    }\r\n                  }\r\n                  listWinRound.push({ listWinMatches, roundName: data.Schedule.groupStageSchedule.tables[k].winRoundsNaming[i - 1] } as IParams);\r\n                  listWinMatches = [];\r\n                }\r\n                if (data.Schedule.groupStageSchedule.tables[k].loseBranch != null && data.Schedule.groupStageSchedule.tables[k].loseBranch.root != null) {\r\n                  yield call(DFS, data.Schedule.groupStageSchedule.tables[k].loseBranch.root, 3, data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo, 1);\r\n                  let listLoseMatches = [];\r\n                  for (let i = 1; i <= data.Schedule.groupStageSchedule.tables[k].loseBranch.root.data.roundNo; i++) {\r\n                    for (let j = 0; j < listLoseMatchesFull.length; j++) {\r\n                      if ((listLoseMatchesFull[j].data as unknown as IParams).roundNo === i) {\r\n                        listLoseMatches.push(listLoseMatchesFull[j]);\r\n                      }\r\n                    }\r\n                    listLoseRound.push({ listLoseMatches, roundName: data.Schedule.groupStageSchedule.tables[k].loseRoundsNaming[i - 1] } as IParams);\r\n                    listLoseMatches = [];\r\n                  }\r\n                }\r\n                listTableDE.push({ listWinRound, listLoseRound, tableName: data.Schedule.groupStageSchedule.tables[k].tableName });\r\n                listWinRound = [];\r\n                listWinMatchesFull = [];\r\n                listLoseRound = [];\r\n                listLoseMatchesFull = [];\r\n              }\r\n              tempVar2 = { groupStage: { listTableDE } };\r\n              listTableDE = [];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: {\r\n          ...tempVar,\r\n          ...tempVar2\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryBracketBoardInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeLatest(GET_BRACKET_BOARD_INFO, doQueryBracketBoardInfo);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}