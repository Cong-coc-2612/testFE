{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\nimport { DELETE_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\n\nconst deleteCompetition = (data, path, param) => {\n  const uri = 'competition';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.DELETE, datas, params, paths);\n};\n\nfunction* doDeleteCompetition(request) {\n  try {\n    const response = yield call(deleteCompetition, request.data.data, request.data.path, request.data.param);\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success\n      });\n      yield put({\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\n        response: {\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS\n        },\n        data: {\n          path: '',\n          param: {\n            tournamentId: request.data.data.tournamentId,\n            limit: 99\n          },\n          data: {}\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n  }\n}\n\nexport default function* watchDeleteCompetition() {\n  yield takeLatest(DELETE_COMPETITION, doDeleteCompetition);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/DeleteCompetition/deleteCompetition.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS","DELETE_COMPETITION","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID","deleteCompetition","data","path","param","uri","datas","paths","params","DELETE","doDeleteCompetition","request","response","error","MessageCode","type","success","failed","tournamentId","limit","Error","Message","watchDeleteCompetition"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,8CAAT,QAA+D,yCAA/D;AACA,SAASC,kBAAT,EAA6BC,sCAA7B,QAA2E,oBAA3E;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAClF,QAAMC,GAAG,GAAG,aAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOR,KAAK,CAACS,GAAD,EAAMR,MAAM,CAACY,MAAb,EAAqBH,KAArB,EAA4BE,MAA5B,EAAoCD,KAApC,CAAZ;AACD,CAND;;AAQA,UAAUG,mBAAV,CAA8BC,OAA9B,EAA8D;AAC5D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACQ,iBAAD,EAAoBU,OAAO,CAACT,IAAR,CAAaA,IAAjC,EAAuCS,OAAO,CAACT,IAAR,CAAaC,IAApD,EAA0DQ,OAAO,CAACT,IAAR,CAAaE,KAAvE,CAA3B;;AACA,QAAIQ,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMnB,GAAG,CAAC;AACRoB,QAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBI;AADf,OAAD,CAAT;AAGA,YAAMrB,GAAG,CAAC;AACRoB,QAAAA,IAAI,EAAEf,sCADE;AAERY,QAAAA,QAAQ,EAAE;AACRI,UAAAA,OAAO,EAAElB,8CADD;AAERmB,UAAAA,MAAM,EAAEnB;AAFA,SAFF;AAMRI,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLc,YAAAA,YAAY,EAAEP,OAAO,CAACT,IAAR,CAAaA,IAAb,CAAkBgB,YAD3B;AAELC,YAAAA,KAAK,EAAE;AAFF,WAFH;AAMJjB,UAAAA,IAAI,EAAE;AANF;AANE,OAAD,CAAT;AAeD,KAnBD,MAmBO;AACL,YAAM,IAAIkB,KAAJ,CAAUR,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBQ,OAA9B,CAAN;AACD;AACF,GAxBD,CAwBE,OAAOR,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBK;AADf,KAAD,CAAT;AAGD;AACF;;AAED,eAAe,UAAUK,sBAAV,GAAmC;AAChD,QAAM5B,UAAU,CAACK,kBAAD,EAAqBW,mBAArB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\r\nimport { DELETE_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\n\r\nconst deleteCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.DELETE, datas, params, paths);\r\n};\r\n\r\nfunction* doDeleteCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(deleteCompetition, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n      yield put({\r\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n        response: {\r\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            tournamentId: request.data.data.tournamentId,\r\n            limit: 99,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchDeleteCompetition() {\r\n  yield takeLatest(DELETE_COMPETITION, doDeleteCompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}