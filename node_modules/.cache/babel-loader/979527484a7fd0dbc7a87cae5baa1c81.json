{"ast":null,"code":"var _jsxFileName = \"E:\\\\DoAn_2020\\\\SportTournamentSupportSystem\\\\frontEnd\\\\SportTournamentSupportSystem\\\\src\\\\components\\\\CompetitionsSetting\\\\index.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Select from 'react-select';\nimport 'react-block-ui/style.css';\nimport CompetitionSettingCompetitionsItem from 'components/CompetitionSettingCompetitionsItem';\nimport CompetitionSettingCompetitionsAddItem from 'components/CompetitionSettingCompetitionsAddItem';\nimport CustomModal from 'components/CustomModal';\nimport TextInput from 'components/TextInput';\nimport { queryAllFormats, queryAllSports } from 'screens/CompetitionInfo/actions';\nimport { queryAllCompetitionsByTournamentId, addACompetition, createAFinalStageSetting, createAGroupStageSetting } from './actions';\nimport './styles.css';\nlet competitionFormatOptions = [];\nconst customStyles = {\n  content: {\n    top: '15%',\n    left: '15%',\n    right: '15%',\n    bottom: '15%',\n    backgroundColor: '#2b303d',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  overlay: {\n    zIndex: 100001\n  }\n};\nlet sportOptions = [];\n\nclass CompetitionSetting extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.requestData = () => {\n      const params = {\n        path: '',\n        param: {\n          tournamentId: this.props.tournamentId,\n          limit: 99\n        },\n        data: {}\n      };\n      this.props.queryAllCompetitionsByTournamentId(params);\n      this.props.queryAllSports();\n      this.props.queryAllFormats();\n    };\n\n    this.handleCloseModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.handleOpenModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.validate = () => {\n      let competitionNameError = false;\n      let competitionNameErrorContent = '';\n      let competitionFormatError = false;\n      let competitionFormatErrorContent = '';\n\n      if (this.state.competitionName.trim() === '') {\n        if (this.state.selectedSport == null) {\n          competitionNameError = true;\n          competitionNameErrorContent = 'Tên cuộc thi không được trống, môn thể thao không được trống';\n        } else {\n          competitionNameError = true;\n          competitionNameErrorContent = 'Tên cuộc thi không được trống';\n        }\n      } else {\n        if (this.state.selectedSport == null) {\n          competitionNameError = true;\n          competitionNameErrorContent = 'Môn thể thao không được trống';\n        }\n      }\n\n      if (this.state.selectedCompetitionFormatPhase1 == null || this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null) {\n        competitionFormatError = true;\n        competitionFormatErrorContent = 'Thể thức không được trống';\n      }\n\n      if (this.props.allCompetitionByTournamentId.find(element => element.name === this.state.competitionName)) {\n        competitionNameError = true;\n        competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\n      }\n\n      return {\n        competitionNameError,\n        competitionNameErrorContent,\n        competitionFormatError,\n        competitionFormatErrorContent\n      };\n    };\n\n    this.handleConfirmModal = () => {\n      const {\n        competitionNameError,\n        competitionNameErrorContent,\n        competitionFormatError,\n        competitionFormatErrorContent\n      } = this.validate();\n      const {\n        amountOfTeamsGoOnInAGroupError,\n        amountOfTeamsGoOnInAGroupErrorContent\n      } = this.validateAmountOfTeamsGoOnInAGroup();\n      const {\n        amountOfTeamsInAGroupError,\n        amountOfTeamsInAGroupErrorContent\n      } = this.validateAmountOfTeamsInAGroup();\n      this.setState({\n        competitionNameError,\n        competitionNameErrorContent,\n        competitionFormatError,\n        competitionFormatErrorContent,\n        amountOfTeamsGoOnInAGroupError,\n        amountOfTeamsGoOnInAGroupErrorContent,\n        amountOfTeamsInAGroupError,\n        amountOfTeamsInAGroupErrorContent\n      });\n\n      if (competitionNameError === true || competitionFormatError === true || amountOfTeamsGoOnInAGroupError === true || amountOfTeamsInAGroupError === true) {\n        return;\n      }\n\n      let params = {\n        path: '',\n        param: {},\n        data: {\n          name: this.state.competitionName,\n          tournamentId: this.props.tournamentId,\n          sportId: this.state.selectedSport.value,\n          description: '',\n          hasGroupStage: this.state.twoPhase === true\n        }\n      };\n      this.props.addACompetition(params);\n      this.setState({\n        showModal: false\n      });\n    };\n\n    this.onChangeHomeWayPhase1 = () => {\n      this.setState({\n        homeWayPhase1: !this.state.homeWayPhase1\n      });\n    };\n\n    this.onChangeHomeWayPhase2 = () => {\n      this.setState({\n        homeWayPhase2: !this.state.homeWayPhase2\n      });\n    };\n\n    this.onChangeCompetitionName = value => {\n      this.setState({\n        competitionName: value\n      });\n    };\n\n    this.onChangeSport = value => {\n      this.setState({\n        selectedSport: value\n      });\n    };\n\n    this.OnChoose1 = () => {\n      this.setState({\n        onePhase: true,\n        twoPhase: false\n      });\n    };\n\n    this.OnChoose2 = () => {\n      this.setState({\n        onePhase: false,\n        twoPhase: true\n      });\n    };\n\n    this.onChangeCompetitionFormatPhase1 = value => {\n      this.setState({\n        selectedCompetitionFormatPhase1: value\n      });\n    };\n\n    this.onChangeCompetitionFormatPhase2 = value => {\n      this.setState({\n        selectedCompetitionFormatPhase2: value\n      });\n    };\n\n    this.onChangeAmountOfTeamsInAGroup = value => {\n      let tempValue = 0;\n\n      if (!isNaN(value)) {\n        tempValue = Number(value);\n      } else {\n        tempValue = 0;\n      }\n\n      this.setState({\n        amountOfTeamsInAGroup: tempValue\n      });\n    };\n\n    this.onChangeAmountOfTeamsGoOnInAGroup = value => {\n      let tempValue = 0;\n\n      if (!isNaN(value)) {\n        tempValue = Number(value);\n      } else {\n        tempValue = 0;\n      }\n\n      this.setState({\n        amountOfTeamsGoOnInAGroup: tempValue\n      });\n    };\n\n    this.onBlurAmountOfTeamsInAGroup = () => {\n      const {\n        amountOfTeamsInAGroupError,\n        amountOfTeamsInAGroupErrorContent\n      } = this.validateAmountOfTeamsInAGroup();\n      this.setState({\n        amountOfTeamsInAGroupError,\n        amountOfTeamsInAGroupErrorContent\n      });\n\n      if (amountOfTeamsInAGroupError === true) {\n        return;\n      }\n    };\n\n    this.onBlurAmountOfTeamsGoOnInAGroup = () => {\n      const {\n        amountOfTeamsGoOnInAGroupError,\n        amountOfTeamsGoOnInAGroupErrorContent\n      } = this.validateAmountOfTeamsGoOnInAGroup();\n      this.setState({\n        amountOfTeamsGoOnInAGroupError,\n        amountOfTeamsGoOnInAGroupErrorContent\n      });\n\n      if (amountOfTeamsGoOnInAGroupError === true) {\n        return;\n      }\n    };\n\n    this.validateAmountOfTeamsGoOnInAGroup = () => {\n      let amountOfTeamsGoOnInAGroupError = false;\n      let amountOfTeamsGoOnInAGroupErrorContent = '';\n\n      if (this.state.amountOfTeamsGoOnInAGroup < 1 || this.state.amountOfTeamsGoOnInAGroup >= this.state.amountOfTeamsInAGroup) {\n        amountOfTeamsGoOnInAGroupError = true;\n        amountOfTeamsGoOnInAGroupErrorContent = 'Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';\n      }\n\n      return {\n        amountOfTeamsGoOnInAGroupError,\n        amountOfTeamsGoOnInAGroupErrorContent\n      };\n    };\n\n    this.validateAmountOfTeamsInAGroup = () => {\n      let amountOfTeamsInAGroupError = false;\n      let amountOfTeamsInAGroupErrorContent = '';\n\n      if (this.state.amountOfTeamsInAGroup < 2) {\n        amountOfTeamsInAGroupError = true;\n        amountOfTeamsInAGroupErrorContent = 'Số đội tối đa trong 1 bảng phải lớn hơn 1';\n      }\n\n      return {\n        amountOfTeamsInAGroupError,\n        amountOfTeamsInAGroupErrorContent\n      };\n    };\n\n    this.state = {\n      showModal: false,\n      competitionName: '',\n      competitionNameError: false,\n      competitionNameErrorContent: '',\n      competitionFormatError: false,\n      competitionFormatErrorContent: '',\n      selectedSport: null,\n      onePhase: true,\n      twoPhase: false,\n      selectedCompetitionFormatPhase1: null,\n      selectedCompetitionFormatPhase2: null,\n      // limitAmountOfTeamchecked: false,\n      // maxAmountTeamOfGroup: 0,\n      // maxAmountTeamOfGroupError: false,\n      // maxAmountTeamOfGroupErrorContent: '',\n      // maxAmountOfTeam: 0,\n      // maxAmountOfTeamError: false,\n      // maxAmountOfTeamErrorContent: '',\n      // maxAmountMemberOfTeamError: false,\n      // maxAmountMemberOfTeamErrorContent: '',\n      // maxAmountMemberOfTeam: 0,\n      // minAmountMemberOfTeam: 0,\n      // minAmountMemberOfTeamError: false,\n      // minAmountMemberOfTeamErrorContent: '',\n      homeWayPhase2: false,\n      homeWayPhase1: false,\n      amountOfTeamsInAGroup: 2,\n      amountOfTeamsInAGroupError: false,\n      amountOfTeamsInAGroupErrorContent: '',\n      amountOfTeamsGoOnInAGroup: 1,\n      amountOfTeamsGoOnInAGroupError: false,\n      amountOfTeamsGoOnInAGroupErrorContent: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.allSports !== nextProps.allSports) {\n      sportOptions = [];\n      nextProps.allSports.map((item, index) => sportOptions.push({\n        value: item.id,\n        label: item.fullName\n      }));\n\n      if (nextProps.allSports.length > 0) {\n        this.setState({\n          selectedSport: {\n            value: nextProps.allSports[0].id,\n            label: nextProps.allSports[0].fullName\n          }\n        });\n      }\n    }\n\n    if (this.props.newCompetition !== nextProps.newCompetition && nextProps.newCompetition !== null) {\n      let params = {\n        path: '',\n        param: {},\n        data: {\n          competitionId: nextProps.newCompetition.id,\n          formatId: nextState.twoPhase === true ? nextState.selectedCompetitionFormatPhase2.value : nextState.selectedCompetitionFormatPhase1.value,\n          hasHomeMatch: nextState.twoPhase === true ? nextState.homeWayPhase2 : nextState.homeWayPhase1\n        }\n      };\n      this.props.createAFinalStageSetting(params);\n\n      if (nextState.twoPhase === false) {\n        params = {\n          path: '',\n          param: {},\n          data: {\n            competitionId: nextProps.newCompetition.id\n          }\n        };\n        this.props.createAGroupStageSetting(params);\n      } else {\n        params = {\n          path: '',\n          param: {},\n          data: {\n            competitionId: nextProps.newCompetition.id,\n            formatId: this.state.selectedCompetitionFormatPhase1.value,\n            hasHomeMatch: this.state.homeWayPhase1,\n            advanceTeamPerTable: this.state.amountOfTeamsGoOnInAGroup,\n            maxTeamPerTable: this.state.amountOfTeamsInAGroup\n          }\n        };\n        this.props.createAGroupStageSetting(params);\n      }\n    }\n\n    if (this.props.allFormats !== nextProps.allFormats) {\n      competitionFormatOptions = [];\n      nextProps.allFormats.map((item, index) => competitionFormatOptions.push({\n        value: item.id,\n        label: item.description\n      }));\n\n      if (nextProps.allFormats.length > 0) {\n        this.setState({\n          selectedCompetitionFormatPhase1: {\n            value: nextProps.allFormats[0].id,\n            label: nextProps.allFormats[0].description\n          },\n          selectedCompetitionFormatPhase2: {\n            value: nextProps.allFormats[0].id,\n            label: nextProps.allFormats[0].description\n          }\n        });\n      }\n    }\n\n    return true;\n  }\n\n  componentDidMount() {\n    this.requestData();\n  }\n\n  render() {\n    if (this.props.allCompetitionByTournamentId != null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionSetting-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 9\n        }\n      }, this.props.allCompetitionByTournamentId.map((item, index) => {\n        return /*#__PURE__*/React.createElement(CompetitionSettingCompetitionsItem, {\n          tournamentInfo: this.props.tournamentInfo,\n          info: item,\n          index: index,\n          key: index,\n          listCompetition: this.props.allCompetitionByTournamentId,\n          tournamentId: this.props.tournamentId,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 21\n          }\n        });\n      }), /*#__PURE__*/React.createElement(CompetitionSettingCompetitionsAddItem, {\n        handleAddACompetition: this.handleOpenModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(CustomModal, {\n        customStyles: customStyles,\n        handleCloseModal: this.handleCloseModal,\n        showModal: this.state.showModal,\n        handleConfirmModal: this.handleConfirmModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionSetting-header-name-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 15\n        }\n      }, \"T\\u1EA1o m\\u1ED9t cu\\u1ED9c thi m\\u1EDBi trong gi\\u1EA3i\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionSetting-tournament-name-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        label: 'Nhập tên cuộc thi',\n        value: this.state.competitionName,\n        error: this.state.competitionNameError,\n        errorContent: this.state.competitionNameErrorContent,\n        onChangeText: this.onChangeCompetitionName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TournamentInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"TournamentInfo-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 15\n        }\n      }, \"B\\u1ED9 m\\xF4n\"), /*#__PURE__*/React.createElement(Select, {\n        options: sportOptions,\n        className: \"Select\",\n        defaultValue: this.state.selectedSport,\n        value: this.state.selectedSport,\n        onChange: this.onChangeSport,\n        maxMenuHeight: 140,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TournamentInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"TournamentInfo-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 15\n        }\n      }, \"C\\xE1ch t\\u1ED5 ch\\u1EE9c gi\\u1EA3i:\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"competitionType\",\n        onClick: this.OnChoose1,\n        checked: this.state.onePhase,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        onClick: this.OnChoose1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 15\n        }\n      }, \"1 giai \\u0111o\\u1EA1n\"), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"radio\",\n        name: \"competitionType\",\n        onClick: this.OnChoose2,\n        checked: this.state.twoPhase,\n        readOnly: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        onClick: this.OnChoose2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }\n      }, \"2 giai \\u0111o\\u1EA1n\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TournamentInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"TournamentInfo-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 15\n        }\n      }, `Thể thức${this.state.onePhase === true ? '' : ' vòng bảng'}`), /*#__PURE__*/React.createElement(Select, {\n        options: competitionFormatOptions,\n        className: \"Select\",\n        defaultValue: this.state.selectedCompetitionFormatPhase1,\n        value: this.state.selectedCompetitionFormatPhase1,\n        onChange: this.onChangeCompetitionFormatPhase1,\n        menuPlacement: 'top',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 15\n        }\n      })), this.state.selectedCompetitionFormatPhase1 != null && this.state.selectedCompetitionFormatPhase1.value !== 2 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-content-info-basic-info-container-singleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Checkbox-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: this.state.homeWayPhase1,\n        onChange: this.onChangeHomeWayPhase1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 21\n        }\n      }), `${this.state.selectedCompetitionFormatPhase1.value === 3 ? `${this.state.twoPhase === true ? 'Chơi lượt đi lượt về vòng bảng' : 'Chơi lượt đi lượt về'}` : `${this.state.twoPhase === true ? 'Có trận tranh hạng 3 vòng bảng' : 'Có trận tranh hạng 3'}`}`))), this.state.twoPhase === true && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-content-info-basic-info-container-singleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        style: {\n          width: 250\n        },\n        label: 'Số đội trong 1 bảng (lớn hơn 1)',\n        value: this.state.amountOfTeamsInAGroup,\n        onChangeText: this.onChangeAmountOfTeamsInAGroup,\n        error: this.state.amountOfTeamsInAGroupError,\n        errorContent: this.state.amountOfTeamsInAGroupErrorContent,\n        onBlur: this.onBlurAmountOfTeamsInAGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 19\n        }\n      }))), this.state.twoPhase === true && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-content-info-basic-info-container-singleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(TextInput, {\n        style: {\n          width: 300\n        },\n        label: 'Số đội đi tiếp trong 1 bảng (lớn hơn 0)',\n        value: this.state.amountOfTeamsGoOnInAGroup,\n        onChangeText: this.onChangeAmountOfTeamsGoOnInAGroup,\n        error: this.state.amountOfTeamsGoOnInAGroupError,\n        errorContent: this.state.amountOfTeamsGoOnInAGroupErrorContent,\n        onBlur: this.onBlurAmountOfTeamsGoOnInAGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 19\n        }\n      }))), this.state.twoPhase === true && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"TournamentInfo-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 46\n        }\n      }, \"Th\\u1EC3 th\\u1EE9c v\\xF2ng chung k\\u1EBFt\"), this.state.twoPhase === true && /*#__PURE__*/React.createElement(Select, {\n        options: competitionFormatOptions,\n        className: \"Select\",\n        defaultValue: this.state.selectedCompetitionFormatPhase2,\n        value: this.state.selectedCompetitionFormatPhase2,\n        onChange: this.onChangeCompetitionFormatPhase2,\n        menuPlacement: 'top',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 46\n        }\n      }), this.state.twoPhase === true && this.state.selectedCompetitionFormatPhase2.value !== 2 && (this.state.selectedCompetitionFormatPhase2.value === 3 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-content-info-basic-info-container-singleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Checkbox-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: this.state.homeWayPhase2,\n        onChange: this.onChangeHomeWayPhase2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 21\n        }\n      }), \"Ch\\u01A1i l\\u01B0\\u1EE3t \\u0111i l\\u01B0\\u1EE3t v\\u1EC1 v\\xF2ng chung k\\u1EBFt\"))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-content-info-basic-info-container-singleRow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 24\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: \"Checkbox-label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"checkbox\",\n        checked: this.state.homeWayPhase2,\n        onChange: this.onChangeHomeWayPhase2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556,\n          columnNumber: 21\n        }\n      }), \"C\\xF3 tr\\u1EADn tranh h\\u1EA1ng 3 v\\xF2ng chung k\\u1EBFt\")))), this.state.competitionFormatError === true && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"TournamentInfo-info-item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 60\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: 'TextInput-error-text',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 15\n        }\n      }, this.state.competitionFormatErrorContent))));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"CompetitionSetting-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 9\n        }\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\n    allFormats: state.allFormats,\n    allSports: state.allSports,\n    newCompetition: state.newCompetition\n  };\n};\n\nexport default connect(mapStateToProps, {\n  queryAllCompetitionsByTournamentId,\n  addACompetition,\n  queryAllFormats,\n  queryAllSports,\n  createAFinalStageSetting,\n  createAGroupStageSetting\n})(CompetitionSetting);","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/components/CompetitionsSetting/index.tsx"],"names":["React","connect","Select","CompetitionSettingCompetitionsItem","CompetitionSettingCompetitionsAddItem","CustomModal","TextInput","queryAllFormats","queryAllSports","queryAllCompetitionsByTournamentId","addACompetition","createAFinalStageSetting","createAGroupStageSetting","competitionFormatOptions","customStyles","content","top","left","right","bottom","backgroundColor","display","flexDirection","overlay","zIndex","sportOptions","CompetitionSetting","Component","constructor","props","requestData","params","path","param","tournamentId","limit","data","handleCloseModal","setState","showModal","handleOpenModal","validate","competitionNameError","competitionNameErrorContent","competitionFormatError","competitionFormatErrorContent","state","competitionName","trim","selectedSport","selectedCompetitionFormatPhase1","twoPhase","selectedCompetitionFormatPhase2","allCompetitionByTournamentId","find","element","name","handleConfirmModal","amountOfTeamsGoOnInAGroupError","amountOfTeamsGoOnInAGroupErrorContent","validateAmountOfTeamsGoOnInAGroup","amountOfTeamsInAGroupError","amountOfTeamsInAGroupErrorContent","validateAmountOfTeamsInAGroup","sportId","value","description","hasGroupStage","onChangeHomeWayPhase1","homeWayPhase1","onChangeHomeWayPhase2","homeWayPhase2","onChangeCompetitionName","onChangeSport","OnChoose1","onePhase","OnChoose2","onChangeCompetitionFormatPhase1","onChangeCompetitionFormatPhase2","onChangeAmountOfTeamsInAGroup","tempValue","isNaN","Number","amountOfTeamsInAGroup","onChangeAmountOfTeamsGoOnInAGroup","amountOfTeamsGoOnInAGroup","onBlurAmountOfTeamsInAGroup","onBlurAmountOfTeamsGoOnInAGroup","shouldComponentUpdate","nextProps","nextState","allSports","map","item","index","push","id","label","fullName","length","newCompetition","competitionId","formatId","hasHomeMatch","advanceTeamPerTable","maxTeamPerTable","allFormats","componentDidMount","render","tournamentInfo","width","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Styles } from 'react-modal';\r\nimport Select, { ValueType, OptionTypeBase } from 'react-select';\r\nimport 'react-block-ui/style.css';\r\nimport CompetitionSettingCompetitionsItem from 'components/CompetitionSettingCompetitionsItem';\r\nimport CompetitionSettingCompetitionsAddItem from 'components/CompetitionSettingCompetitionsAddItem';\r\nimport CustomModal from 'components/CustomModal';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest, IParams } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport {\r\n  queryAllFormats,\r\n  queryAllSports\r\n} from 'screens/CompetitionInfo/actions';\r\nimport { queryAllCompetitionsByTournamentId, addACompetition, createAFinalStageSetting, createAGroupStageSetting } from './actions';\r\nimport './styles.css';\r\n\r\ninterface ICompetitionSettingProps extends React.ClassAttributes<CompetitionSetting> {\r\n  tournamentId: number;\r\n  tournamentInfo: IParams | null;\r\n  newCompetition: IParams | null;\r\n  allCompetitionByTournamentId: IParams[] | null;\r\n  allSports: IParams[];\r\n  allFormats: IParams[];\r\n\r\n  onChangeCompetitionSetting(): void;\r\n  queryAllCompetitionsByTournamentId(param: IBigRequest): void;\r\n  addACompetition(param: IBigRequest): void;\r\n  createAFinalStageSetting(param: IBigRequest): void;\r\n  createAGroupStageSetting(param: IBigRequest): void;\r\n  queryAllSports(): void;\r\n  queryAllFormats(): void;\r\n}\r\n\r\ninterface ICompetitionSettingState {\r\n  showModal: boolean;\r\n  competitionName: string;\r\n  competitionNameError: boolean;\r\n  competitionNameErrorContent: string;\r\n  competitionFormatError: boolean;\r\n  competitionFormatErrorContent: string;\r\n  selectedSport: ValueType<OptionTypeBase>;\r\n  onePhase: boolean;\r\n  twoPhase: boolean;\r\n  selectedCompetitionFormatPhase1: ValueType<OptionTypeBase>;\r\n  selectedCompetitionFormatPhase2: ValueType<OptionTypeBase>;\r\n  // maxAmountTeamOfGroup: number;\r\n  // maxAmountTeamOfGroupError: boolean;\r\n  // maxAmountTeamOfGroupErrorContent: string;\r\n  // limitAmountOfTeamchecked: boolean;\r\n  // maxAmountOfTeam: number;\r\n  // maxAmountOfTeamError: boolean;\r\n  // maxAmountOfTeamErrorContent: string;\r\n  // maxAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeam: number;\r\n  // minAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamError: boolean;\r\n  // maxAmountMemberOfTeamErrorContent: string;\r\n  // minAmountMemberOfTeamErrorContent: string;\r\n  homeWayPhase2: boolean;\r\n  homeWayPhase1: boolean;\r\n  amountOfTeamsInAGroup: number;\r\n  amountOfTeamsInAGroupError: boolean;\r\n  amountOfTeamsInAGroupErrorContent: string;\r\n  amountOfTeamsGoOnInAGroup: number;\r\n  amountOfTeamsGoOnInAGroupError: boolean;\r\n  amountOfTeamsGoOnInAGroupErrorContent: string;\r\n}\r\n\r\nlet competitionFormatOptions: IParams[] = [];\r\n\r\nconst customStyles: Styles = {\r\n  content: {\r\n    top: '15%',\r\n    left: '15%',\r\n    right: '15%',\r\n    bottom: '15%',\r\n    backgroundColor: '#2b303d',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n  },\r\n  overlay: {\r\n    zIndex: 100001,\r\n  },\r\n};\r\n\r\nlet sportOptions: IParams[] = [];\r\n\r\nclass CompetitionSetting extends React.Component<ICompetitionSettingProps, ICompetitionSettingState> {\r\n  constructor(props: ICompetitionSettingProps) {\r\n    super(props);\r\n    this.state = {\r\n      showModal: false,\r\n      competitionName: '',\r\n      competitionNameError: false,\r\n      competitionNameErrorContent: '',\r\n      competitionFormatError: false,\r\n      competitionFormatErrorContent: '',\r\n      selectedSport: null,\r\n      onePhase: true,\r\n      twoPhase: false,\r\n      selectedCompetitionFormatPhase1: null,\r\n      selectedCompetitionFormatPhase2: null,\r\n      // limitAmountOfTeamchecked: false,\r\n      // maxAmountTeamOfGroup: 0,\r\n      // maxAmountTeamOfGroupError: false,\r\n      // maxAmountTeamOfGroupErrorContent: '',\r\n      // maxAmountOfTeam: 0,\r\n      // maxAmountOfTeamError: false,\r\n      // maxAmountOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeamError: false,\r\n      // maxAmountMemberOfTeamErrorContent: '',\r\n      // maxAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeam: 0,\r\n      // minAmountMemberOfTeamError: false,\r\n      // minAmountMemberOfTeamErrorContent: '',\r\n      homeWayPhase2: false,\r\n      homeWayPhase1: false,\r\n      amountOfTeamsInAGroup: 2,\r\n      amountOfTeamsInAGroupError: false,\r\n      amountOfTeamsInAGroupErrorContent: '',\r\n      amountOfTeamsGoOnInAGroup: 1,\r\n      amountOfTeamsGoOnInAGroupError: false,\r\n      amountOfTeamsGoOnInAGroupErrorContent: '',\r\n    };\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: ICompetitionSettingProps, nextState: ICompetitionSettingState) {\r\n    if (this.props.allSports !== nextProps.allSports) {\r\n      sportOptions = [];\r\n      nextProps.allSports.map((item, index) => sportOptions.push({ value: item.id, label: item.fullName }));\r\n      if (nextProps.allSports.length > 0) {\r\n        this.setState({\r\n          selectedSport: { value: nextProps.allSports[0].id, label: nextProps.allSports[0].fullName },\r\n        });\r\n      }\r\n    }\r\n    if (this.props.newCompetition !== nextProps.newCompetition && nextProps.newCompetition !== null) {\r\n      let params: IBigRequest = {\r\n        path: '',\r\n        param: {},\r\n        data: {\r\n          competitionId: nextProps.newCompetition.id,\r\n          formatId: nextState.twoPhase === true ? (nextState.selectedCompetitionFormatPhase2 as IParams).value : (nextState.selectedCompetitionFormatPhase1 as IParams).value,\r\n          hasHomeMatch: nextState.twoPhase === true ? nextState.homeWayPhase2 : nextState.homeWayPhase1,\r\n        },\r\n      };\r\n      this.props.createAFinalStageSetting(params);\r\n      if (nextState.twoPhase === false) {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      } else {\r\n        params = {\r\n          path: '',\r\n          param: {},\r\n          data: {\r\n            competitionId: nextProps.newCompetition.id,\r\n            formatId: (this.state.selectedCompetitionFormatPhase1 as IParams).value,\r\n            hasHomeMatch: this.state.homeWayPhase1,\r\n            advanceTeamPerTable: this.state.amountOfTeamsGoOnInAGroup,\r\n            maxTeamPerTable: this.state.amountOfTeamsInAGroup,\r\n          },\r\n        };\r\n        this.props.createAGroupStageSetting(params);\r\n      }\r\n    }\r\n    if (this.props.allFormats !== nextProps.allFormats) {\r\n      competitionFormatOptions = [];\r\n      nextProps.allFormats.map((item, index) => competitionFormatOptions.push({ value: item.id, label: item.description }));\r\n      if (nextProps.allFormats.length > 0) {\r\n        this.setState({\r\n          selectedCompetitionFormatPhase1: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n          selectedCompetitionFormatPhase2: { value: nextProps.allFormats[0].id, label: nextProps.allFormats[0].description },\r\n        });\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.requestData();\r\n  }\r\n\r\n  private requestData = () => {\r\n    const params = {\r\n      path: '',\r\n      param: {\r\n        tournamentId: this.props.tournamentId,\r\n        limit: 99,\r\n      },\r\n      data: {},\r\n    };\r\n    this.props.queryAllCompetitionsByTournamentId(params);\r\n    this.props.queryAllSports();\r\n    this.props.queryAllFormats();\r\n  }\r\n\r\n  private handleCloseModal = () => {\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private handleOpenModal = () => {\r\n    this.setState({\r\n      showModal: true,\r\n    });\r\n  }\r\n\r\n  private validate = () => {\r\n    let competitionNameError = false;\r\n    let competitionNameErrorContent = '';\r\n    let competitionFormatError = false;\r\n    let competitionFormatErrorContent = '';\r\n    if (this.state.competitionName.trim() === '') {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống, môn thể thao không được trống';\r\n      } else {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Tên cuộc thi không được trống';\r\n      }\r\n    } else {\r\n      if (this.state.selectedSport == null) {\r\n        competitionNameError = true;\r\n        competitionNameErrorContent = 'Môn thể thao không được trống';\r\n      }\r\n    }\r\n    if (this.state.selectedCompetitionFormatPhase1 == null || (this.state.twoPhase && this.state.selectedCompetitionFormatPhase2 == null)) {\r\n      competitionFormatError = true;\r\n      competitionFormatErrorContent = 'Thể thức không được trống';\r\n    }\r\n    if (this.props.allCompetitionByTournamentId!.find(element => element.name === this.state.competitionName)) {\r\n      competitionNameError = true;\r\n      competitionNameErrorContent = 'Tên cuộc thi này đã tồn tại';\r\n    }\r\n\r\n    return { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent };\r\n  }\r\n\r\n  // private onChangeMaxAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  // private onChangeMinAmountMemberOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ minAmountMemberOfTeam: tempValue, });\r\n  // }\r\n\r\n  private handleConfirmModal = () => {\r\n    const { competitionNameError, competitionNameErrorContent, competitionFormatError, competitionFormatErrorContent } = this.validate();\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      competitionNameError,\r\n      competitionNameErrorContent,\r\n      competitionFormatError,\r\n      competitionFormatErrorContent,\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent,\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (competitionNameError === true || competitionFormatError === true || amountOfTeamsGoOnInAGroupError === true || amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n\r\n    let params: IBigRequest = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        name: this.state.competitionName,\r\n        tournamentId: this.props.tournamentId,\r\n        sportId: (this.state.selectedSport as IParams).value,\r\n        description: '',\r\n        hasGroupStage: this.state.twoPhase === true,\r\n      },\r\n    };\r\n    this.props.addACompetition(params);\r\n    this.setState({\r\n      showModal: false,\r\n    });\r\n  }\r\n\r\n  private onChangeHomeWayPhase1 = () => {\r\n    this.setState({\r\n      homeWayPhase1: !this.state.homeWayPhase1,\r\n    });\r\n  };\r\n\r\n  private onChangeHomeWayPhase2 = () => {\r\n    this.setState({\r\n      homeWayPhase2: !this.state.homeWayPhase2,\r\n    });\r\n  };\r\n\r\n  private onChangeCompetitionName = (value: string) => {\r\n    this.setState({ competitionName: value, });\r\n  }\r\n\r\n  private onChangeSport = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedSport: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeLimitAmountOfTeam = () => {\r\n  //   this.setState({\r\n  //     limitAmountOfTeamchecked: !this.state.limitAmountOfTeamchecked,\r\n  //   });\r\n  // };\r\n\r\n  // private onChangeMaxAmountOfTeam = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountOfTeam: tempValue, });\r\n  // }\r\n\r\n  private OnChoose1 = () => {\r\n    this.setState({\r\n      onePhase: true,\r\n      twoPhase: false,\r\n    });\r\n  }\r\n\r\n  private OnChoose2 = () => {\r\n    this.setState({\r\n      onePhase: false,\r\n      twoPhase: true,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase1 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase1: value,\r\n    });\r\n  }\r\n\r\n  private onChangeCompetitionFormatPhase2 = (value: ValueType<OptionTypeBase>) => {\r\n    this.setState({\r\n      selectedCompetitionFormatPhase2: value,\r\n    });\r\n  }\r\n\r\n  // private onChangeMaxAmountTeamOfGroup = (value: string) => {\r\n  //   let tempValue = 0;\r\n  //   if (!isNaN(value as unknown as number)) {\r\n  //     tempValue = Number(value);\r\n  //   } else {\r\n  //     tempValue = 0;\r\n  //   }\r\n  //   this.setState({ maxAmountTeamOfGroup: tempValue, });\r\n  // }\r\n\r\n  private onChangeAmountOfTeamsInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsInAGroup: tempValue, });\r\n  }\r\n\r\n  private onChangeAmountOfTeamsGoOnInAGroup = (value: string) => {\r\n    let tempValue = 0;\r\n    if (!isNaN(value as unknown as number)) {\r\n      tempValue = Number(value);\r\n    } else {\r\n      tempValue = 0;\r\n    }\r\n    this.setState({ amountOfTeamsGoOnInAGroup: tempValue, });\r\n  }\r\n\r\n  private onBlurAmountOfTeamsInAGroup = () => {\r\n    const { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent } = this.validateAmountOfTeamsInAGroup();\r\n    this.setState({\r\n      amountOfTeamsInAGroupError,\r\n      amountOfTeamsInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private onBlurAmountOfTeamsGoOnInAGroup = () => {\r\n    const { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent } = this.validateAmountOfTeamsGoOnInAGroup();\r\n    this.setState({\r\n      amountOfTeamsGoOnInAGroupError,\r\n      amountOfTeamsGoOnInAGroupErrorContent\r\n    });\r\n    if (amountOfTeamsGoOnInAGroupError === true) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  private validateAmountOfTeamsGoOnInAGroup = () => {\r\n    let amountOfTeamsGoOnInAGroupError = false;\r\n    let amountOfTeamsGoOnInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsGoOnInAGroup < 1 || this.state.amountOfTeamsGoOnInAGroup >= this.state.amountOfTeamsInAGroup) {\r\n      amountOfTeamsGoOnInAGroupError = true;\r\n      amountOfTeamsGoOnInAGroupErrorContent = 'Số đội đi tiếp trong 1 bảng phải lớn hơn 0 và nhỏ hơn số đội tối đa';\r\n    }\r\n\r\n    return { amountOfTeamsGoOnInAGroupError, amountOfTeamsGoOnInAGroupErrorContent };\r\n  }\r\n\r\n  private validateAmountOfTeamsInAGroup = () => {\r\n    let amountOfTeamsInAGroupError = false;\r\n    let amountOfTeamsInAGroupErrorContent = '';\r\n    if (this.state.amountOfTeamsInAGroup < 2) {\r\n      amountOfTeamsInAGroupError = true;\r\n      amountOfTeamsInAGroupErrorContent = 'Số đội tối đa trong 1 bảng phải lớn hơn 1';\r\n    }\r\n\r\n    return { amountOfTeamsInAGroupError, amountOfTeamsInAGroupErrorContent };\r\n  }\r\n\r\n  render() {\r\n    if (this.props.allCompetitionByTournamentId != null) {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n          {this.props.allCompetitionByTournamentId.map((item, index) => {\r\n            return (<CompetitionSettingCompetitionsItem tournamentInfo={this.props.tournamentInfo} info={item} index={index} key={index} listCompetition={this.props.allCompetitionByTournamentId} tournamentId={this.props.tournamentId} />);\r\n          })}\r\n          <CompetitionSettingCompetitionsAddItem handleAddACompetition={this.handleOpenModal} />\r\n          <CustomModal\r\n            customStyles={customStyles}\r\n            handleCloseModal={this.handleCloseModal}\r\n            showModal={this.state.showModal}\r\n            handleConfirmModal={this.handleConfirmModal}\r\n          >\r\n            <div className=\"CompetitionSetting-header-name-container\">\r\n              <h2>Tạo một cuộc thi mới trong giải</h2>\r\n            </div>\r\n            <div className=\"CompetitionSetting-tournament-name-container\">\r\n              <TextInput label={'Nhập tên cuộc thi'} value={this.state.competitionName} error={this.state.competitionNameError} errorContent={this.state.competitionNameErrorContent} onChangeText={this.onChangeCompetitionName} />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Bộ môn</p>\r\n              <Select\r\n                options={sportOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedSport}\r\n                value={this.state.selectedSport}\r\n                onChange={this.onChangeSport}\r\n                maxMenuHeight={140}\r\n              />\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">Cách tổ chức giải:</p>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose1} checked={this.state.onePhase} readOnly />\r\n              <label onClick={this.OnChoose1}>1 giai đoạn</label>\r\n              <input type=\"radio\" name=\"competitionType\" onClick={this.OnChoose2} checked={this.state.twoPhase} readOnly />\r\n              <label onClick={this.OnChoose2}>2 giai đoạn</label>\r\n            </div>\r\n            <div className=\"TournamentInfo-info-item\">\r\n              <p className=\"TournamentInfo-text\">{`Thể thức${this.state.onePhase === true ? '' : ' vòng bảng'}`}</p>\r\n              <Select\r\n                options={competitionFormatOptions}\r\n                className=\"Select\"\r\n                defaultValue={this.state.selectedCompetitionFormatPhase1}\r\n                value={this.state.selectedCompetitionFormatPhase1}\r\n                onChange={this.onChangeCompetitionFormatPhase1}\r\n                menuPlacement={'top'}\r\n              />\r\n            </div>\r\n            {(this.state.selectedCompetitionFormatPhase1 != null &&\r\n              (this.state.selectedCompetitionFormatPhase1 as IParams).value !== 2 &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase1}\r\n                      onChange={this.onChangeHomeWayPhase1}\r\n                    />\r\n                    {`${(this.state.selectedCompetitionFormatPhase1 as IParams).value === 3 ? `${this.state.twoPhase === true ? 'Chơi lượt đi lượt về vòng bảng' : 'Chơi lượt đi lượt về'}` : `${this.state.twoPhase === true ? 'Có trận tranh hạng 3 vòng bảng' : 'Có trận tranh hạng 3'}`}`}\r\n                  </label>\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 250 }}\r\n                    label={'Số đội trong 1 bảng (lớn hơn 1)'}\r\n                    value={this.state.amountOfTeamsInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsInAGroup}\r\n                    error={this.state.amountOfTeamsInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {(this.state.twoPhase === true &&\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <TextInput\r\n                    style={{ width: 300 }}\r\n                    label={'Số đội đi tiếp trong 1 bảng (lớn hơn 0)'}\r\n                    value={this.state.amountOfTeamsGoOnInAGroup as unknown as string}\r\n                    onChangeText={this.onChangeAmountOfTeamsGoOnInAGroup}\r\n                    error={this.state.amountOfTeamsGoOnInAGroupError}\r\n                    errorContent={this.state.amountOfTeamsGoOnInAGroupErrorContent}\r\n                    onBlur={this.onBlurAmountOfTeamsGoOnInAGroup}\r\n                  />\r\n                </div>\r\n              </div>)}\r\n            {this.state.twoPhase === true && <p className=\"TournamentInfo-text\">Thể thức vòng chung kết</p>}\r\n            {this.state.twoPhase === true && <Select\r\n              options={competitionFormatOptions}\r\n              className=\"Select\"\r\n              defaultValue={this.state.selectedCompetitionFormatPhase2}\r\n              value={this.state.selectedCompetitionFormatPhase2}\r\n              onChange={this.onChangeCompetitionFormatPhase2}\r\n              menuPlacement={'top'}\r\n            />}\r\n            {(this.state.twoPhase === true && (this.state.selectedCompetitionFormatPhase2 as IParams).value !== 2 && ((this.state.selectedCompetitionFormatPhase2 as IParams).value === 3 ?\r\n              <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Chơi lượt đi lượt về vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div> : <div className=\"CompetitionInfo-content-info-basic-info-container-singleRow\">\r\n                <div className=\"CompetitionInfo-info-item\">\r\n                  <label className=\"Checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={this.state.homeWayPhase2}\r\n                      onChange={this.onChangeHomeWayPhase2}\r\n                    />\r\n                      Có trận tranh hạng 3 vòng chung kết\r\n                    </label>\r\n                </div>\r\n              </div>))}\r\n            {this.state.competitionFormatError === true && <div className=\"TournamentInfo-info-item\">\r\n              <p className={'TextInput-error-text'}>{this.state.competitionFormatErrorContent}</p>\r\n            </div>}\r\n            {/* {this.state.selectedCompetitionFormatPhase1 && (this.state.selectedCompetitionFormatPhase1 as IParams).value === 2 && <div className=\"TournamentInfo-info-item\">\r\n              <TextInput value={this.state.maxAmountTeamOfGroup as unknown as string} label={`Giới hạn số lượng đội trong 1 bảng${this.state.twoPhase ? ' của giai đoạn 1' : ''}`} onChangeText={this.onChangeMaxAmountTeamOfGroup} error={this.state.maxAmountTeamOfGroupError} errorContent={this.state.maxAmountTeamOfGroupErrorContent} />\r\n            </div>} */}\r\n            {/* <div className=\"TournamentInfo-info-item\">\r\n              <div className=\"CompetitionSettingCompetitionsItem-option-container-item\">\r\n                <label className=\"Checkbox-label\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.limitAmountOfTeamchecked}\r\n                    onChange={this.onChangeLimitAmountOfTeam}\r\n                  />\r\n            Giới hạn số đội tối đa\r\n          </label>\r\n              </div>\r\n            </div> */}\r\n            {/* {this.state.limitAmountOfTeamchecked === true && <TextInput value={this.state.maxAmountOfTeam as unknown as string} label={'Số lượng đội tối đa'} onChangeText={this.onChangeMaxAmountOfTeam} error={this.state.maxAmountOfTeamError} errorContent={this.state.maxAmountOfTeamErrorContent} />} */}\r\n          </CustomModal>\r\n        </div >\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"CompetitionSetting-container\">\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n    allCompetitionByTournamentId: state.allCompetitionByTournamentId,\r\n    allFormats: state.allFormats,\r\n    allSports: state.allSports,\r\n    newCompetition: state.newCompetition,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    queryAllCompetitionsByTournamentId,\r\n    addACompetition,\r\n    queryAllFormats,\r\n    queryAllSports,\r\n    createAFinalStageSetting,\r\n    createAGroupStageSetting\r\n  }\r\n)(CompetitionSetting);"]},"metadata":{},"sourceType":"module"}