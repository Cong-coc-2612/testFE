{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\nimport { SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION, DELETE_LIST_SELECTING_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\n\nconst swapTwoTeamInBracket = (data, path, param) => {\n  const uri = 'teams/swap';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doSwapTwoTeamInBracket(request) {\n  try {\n    const response = yield call(swapTwoTeamInBracket, request.data.data, request.data.path, request.data.param);\n    yield put({\n      type: DELETE_LIST_SELECTING_TEAM\n    });\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: QUERY_LIST_TEAM,\n        response: {\n          success: QUERY_LIST_TEAM_SUCCESS,\n          failed: QUERY_LIST_TEAM_FAILED\n        },\n        data: {\n          path: '',\n          param: {\n            competitionId: request.data.data.competitionId,\n            limit: 999\n          },\n          data: {}\n        }\n      });\n      yield put({\n        type: request.response.success\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.success\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'SwapTwoTeamInBracket',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchSwapTwoTeamInBracket() {\n  yield takeLatest(SWAP_TWO_TEAM_IN_BRACKET, doSwapTwoTeamInBracket);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/SwapTwoTeamInBracket/swapTwoTeamInBracket.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","SWAP_TWO_TEAM_IN_BRACKET","COMMON_SHOW_NOTIFICATION","DELETE_LIST_SELECTING_TEAM","QUERY_LIST_TEAM","swapTwoTeamInBracket","data","path","param","uri","datas","paths","params","PUT","doSwapTwoTeamInBracket","request","response","type","error","MessageCode","success","failed","competitionId","limit","Error","Message","title","content","time","Date","watchSwapTwoTeamInBracket"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,2BAAhE;AACA,SAASC,wBAAT,EAAmCC,wBAAnC,EAA6DC,0BAA7D,EAAyFC,eAAzF,QAAgH,oBAAhH;;AAGA,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AACrF,QAAMC,GAAG,GAAG,YAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOX,KAAK,CAACY,GAAD,EAAMX,MAAM,CAACe,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,sBAAV,CAAiCC,OAAjC,EAAiE;AAC/D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMtB,IAAI,CAACW,oBAAD,EAAuBU,OAAO,CAACT,IAAR,CAAaA,IAApC,EAA0CS,OAAO,CAACT,IAAR,CAAaC,IAAvD,EAA6DQ,OAAO,CAACT,IAAR,CAAaE,KAA1E,CAA3B;AACA,UAAMZ,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEd;AADE,KAAD,CAAT;;AAGA,QAAIa,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMvB,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEb,eADE;AAERY,QAAAA,QAAQ,EAAE;AACRI,UAAAA,OAAO,EAAErB,uBADD;AAERsB,UAAAA,MAAM,EAAErB;AAFA,SAFF;AAMRM,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLc,YAAAA,aAAa,EAAEP,OAAO,CAACT,IAAR,CAAaA,IAAb,CAAkBgB,aAD5B;AAELC,YAAAA,KAAK,EAAE;AAFF,WAFH;AAMJjB,UAAAA,IAAI,EAAE;AANF;AANE,OAAD,CAAT;AAeA,YAAMV,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEF,OAAO,CAACC,QAAR,CAAiBI;AADf,OAAD,CAAT;AAGD,KAnBD,MAmBO;AACL,YAAM,IAAII,KAAJ,CAAUR,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBO,OAA9B,CAAN;AACD;AACF,GA3BD,CA2BE,OAAOP,KAAP,EAAc;AACd,UAAMtB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEF,OAAO,CAACC,QAAR,CAAiBI;AADf,KAAD,CAAT;AAGA,UAAMxB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEf,wBADE;AAERI,MAAAA,IAAI,EAAE;AACJW,QAAAA,IAAI,EAAE,OADF;AAEJS,QAAAA,KAAK,EAAE,sBAFH;AAGJC,QAAAA,OAAO,EAAET,KAHL;AAIJU,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,yBAAV,GAAsC;AACnD,QAAMnC,UAAU,CAACM,wBAAD,EAA2Ba,sBAA3B,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION, DELETE_LIST_SELECTING_TEAM, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\n\r\nconst swapTwoTeamInBracket = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'teams/swap';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doSwapTwoTeamInBracket(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(swapTwoTeamInBracket, request.data.data, request.data.path, request.data.param);\r\n    yield put({\r\n      type: DELETE_LIST_SELECTING_TEAM,\r\n    });\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.success,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SwapTwoTeamInBracket',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSwapTwoTeamInBracket() {\r\n  yield takeLatest(SWAP_TWO_TEAM_IN_BRACKET, doSwapTwoTeamInBracket);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}