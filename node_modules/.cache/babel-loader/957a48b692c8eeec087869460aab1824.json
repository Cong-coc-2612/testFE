{"ast":null,"code":"import * as dateFns from 'date-fns';\nexport function formatDateToString(date, formatOutput = 'yyyyMMdd') {\n  if (date == null) {\n    return null;\n  }\n\n  return dateFns.format(date, formatOutput);\n}\nexport function formatTimeToDisplay(stringInput, formatOutput = 'HH:mm:ss', formatInput = 'yyyyMMddHHmmss', ignoreTimeZone) {\n  try {\n    if (!stringInput) {\n      return null;\n    }\n\n    let time = dateFns.parse(stringInput, formatInput, new Date());\n\n    if (ignoreTimeZone !== true) {\n      time = dateFns.addHours(time, 7);\n    }\n\n    return dateFns.format(time, formatOutput);\n  } catch (error) {\n    return null;\n  }\n}\nexport function formatDateToDisplay(stringInput, formatOutput = 'dd/MM/yyyy', formatInput = 'yyyyMMdd') {\n  try {\n    if (!stringInput) {\n      return '';\n    }\n\n    let time = dateFns.parse(stringInput, formatInput, new Date()); // time = dateFns.addHours(time, 7);\n\n    return dateFns.format(time, formatOutput);\n  } catch (error) {\n    return null;\n  }\n}\nexport function formatStringToDate(stringInput, formatInput = 'yyyyMMdd') {\n  if (stringInput == null) {\n    return new Date();\n  }\n\n  return dateFns.parse(stringInput, formatInput, new Date());\n}\nexport function addDays(date, day) {\n  return dateFns.addDays(date, day);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/utils/datetime.ts"],"names":["dateFns","formatDateToString","date","formatOutput","format","formatTimeToDisplay","stringInput","formatInput","ignoreTimeZone","time","parse","Date","addHours","error","formatDateToDisplay","formatStringToDate","addDays","day"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,UAAzB;AAEA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAA+CC,YAAY,GAAG,UAA9D,EAA0E;AAC/E,MAAID,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,SAAOF,OAAO,CAACI,MAAR,CAAeF,IAAf,EAAqBC,YAArB,CAAP;AACD;AAED,OAAO,SAASE,mBAAT,CACLC,WADK,EAELH,YAAY,GAAG,UAFV,EAGLI,WAAW,GAAG,gBAHT,EAILC,cAJK,EAKL;AACA,MAAI;AACF,QAAI,CAACF,WAAL,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAIG,IAAI,GAAGT,OAAO,CAACU,KAAR,CAAcJ,WAAd,EAA2BC,WAA3B,EAAwC,IAAII,IAAJ,EAAxC,CAAX;;AACA,QAAIH,cAAc,KAAK,IAAvB,EAA6B;AAC3BC,MAAAA,IAAI,GAAGT,OAAO,CAACY,QAAR,CAAiBH,IAAjB,EAAuB,CAAvB,CAAP;AACD;;AACD,WAAOT,OAAO,CAACI,MAAR,CAAeK,IAAf,EAAqBN,YAArB,CAAP;AACD,GATD,CASE,OAAOU,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASC,mBAAT,CAA6BR,WAA7B,EAAmDH,YAAY,GAAG,YAAlE,EAAgFI,WAAW,GAAG,UAA9F,EAA0G;AAC/G,MAAI;AACF,QAAI,CAACD,WAAL,EAAkB;AAChB,aAAO,EAAP;AACD;;AACD,QAAIG,IAAI,GAAGT,OAAO,CAACU,KAAR,CAAcJ,WAAd,EAA2BC,WAA3B,EAAwC,IAAII,IAAJ,EAAxC,CAAX,CAJE,CAKF;;AACA,WAAOX,OAAO,CAACI,MAAR,CAAeK,IAAf,EAAqBN,YAArB,CAAP;AACD,GAPD,CAOE,OAAOU,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;AAED,OAAO,SAASE,kBAAT,CAA4BT,WAA5B,EAA6DC,WAAW,GAAG,UAA3E,EAAuF;AAC5F,MAAID,WAAW,IAAI,IAAnB,EAAyB;AACvB,WAAO,IAAIK,IAAJ,EAAP;AACD;;AAED,SAAOX,OAAO,CAACU,KAAR,CAAcJ,WAAd,EAA2BC,WAA3B,EAAwC,IAAII,IAAJ,EAAxC,CAAP;AACD;AAED,OAAO,SAASK,OAAT,CAAiBd,IAAjB,EAA6Be,GAA7B,EAA0C;AAC/C,SAAOjB,OAAO,CAACgB,OAAR,CAAgBd,IAAhB,EAAsBe,GAAtB,CAAP;AACD","sourcesContent":["import * as dateFns from 'date-fns';\r\n\r\nexport function formatDateToString(date: Date | null, formatOutput = 'yyyyMMdd') {\r\n  if (date == null) {\r\n    return null;\r\n  }\r\n  return dateFns.format(date, formatOutput);\r\n}\r\n\r\nexport function formatTimeToDisplay(\r\n  stringInput?: string,\r\n  formatOutput = 'HH:mm:ss',\r\n  formatInput = 'yyyyMMddHHmmss',\r\n  ignoreTimeZone?: boolean\r\n) {\r\n  try {\r\n    if (!stringInput) {\r\n      return null;\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    if (ignoreTimeZone !== true) {\r\n      time = dateFns.addHours(time, 7);\r\n    }\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatDateToDisplay(stringInput?: string, formatOutput = 'dd/MM/yyyy', formatInput = 'yyyyMMdd') {\r\n  try {\r\n    if (!stringInput) {\r\n      return '';\r\n    }\r\n    let time = dateFns.parse(stringInput, formatInput, new Date());\r\n    // time = dateFns.addHours(time, 7);\r\n    return dateFns.format(time, formatOutput);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function formatStringToDate(stringInput: string | undefined, formatInput = 'yyyyMMdd') {\r\n  if (stringInput == null) {\r\n    return new Date();\r\n  }\r\n\r\n  return dateFns.parse(stringInput, formatInput, new Date());\r\n}\r\n\r\nexport function addDays(date: Date, day: number) {\r\n  return dateFns.addDays(date, day);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}