{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_TOURNAMENT } from 'redux-saga/actions';\n\nconst queryListTournaments = (data, path, param) => {\n  const uri = 'tournaments';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.GET, datas, params, paths);\n};\n\nfunction* doQueryListTournaments(request) {\n  try {\n    const response = yield call(queryListTournaments, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: {\n          Tournaments: data.Tournaments,\n          TotalPage: data.TotalPage\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'QueryListTournaments',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchQueryListTournaments() {\n  yield takeLatest(QUERY_LIST_TOURNAMENT, doQueryListTournaments);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/QueryListTournament/queryListTournaments.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","QUERY_LIST_TOURNAMENT","queryListTournaments","data","path","param","uri","datas","paths","params","GET","doQueryListTournaments","request","response","result","error","MessageCode","type","success","payload","Tournaments","TotalPage","Error","Message","failed","title","content","time","Date","watchQueryListTournaments"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,qBAAnC,QAAgE,oBAAhE;;AAGA,MAAMC,oBAAoB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AACrF,QAAMC,GAAG,GAAG,aAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOP,KAAK,CAACQ,GAAD,EAAMP,MAAM,CAACW,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,sBAAV,CAAiCC,OAAjC,EAAiE;AAC/D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMlB,IAAI,CAACO,oBAAD,EAAuBU,OAAO,CAACT,IAAR,CAAaA,IAApC,EAA0CS,OAAO,CAACT,IAAR,CAAaC,IAAvD,EAA6DQ,OAAO,CAACT,IAAR,CAAaE,KAA1E,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMnB,GAAG,CAAC;AACRoB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,WAAW,EAAEjB,IAAI,CAACiB,WAApB;AAAiCC,UAAAA,SAAS,EAAElB,IAAI,CAACkB;AAAjD;AAFD,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAM,IAAIC,KAAJ,CAAUT,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBQ,OAA9B,CAAN;AACD;AACF,GAXD,CAWE,OAAOR,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBW;AADf,KAAD,CAAT;AAGA,UAAM3B,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,wBADE;AAERG,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJQ,QAAAA,KAAK,EAAE,sBAFH;AAGJC,QAAAA,OAAO,EAAEX,KAHL;AAIJY,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,yBAAV,GAAsC;AACnD,QAAMjC,UAAU,CAACK,qBAAD,EAAwBU,sBAAxB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_LIST_TOURNAMENT } from 'redux-saga/actions';\r\n\r\n\r\nconst queryListTournaments = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournaments';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doQueryListTournaments(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(queryListTournaments, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: { Tournaments: data.Tournaments, TotalPage: data.TotalPage },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryListTournaments',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryListTournaments() {\r\n  yield takeLatest(QUERY_LIST_TOURNAMENT, doQueryListTournaments);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}