{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { cookies } from 'utils/cookies';\nimport { COOKIES_TYPE } from 'global';\nimport { SIGNUP, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\n\nconst signUp = (data, path, param) => {\n  const uri = 'user';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doSignUp(request) {\n  try {\n    const response = yield call(signUp, request.data.data, request.data.path, request.data.param);\n    const data = response.data;\n\n    if (cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null) {\n      if (response.data.error.MessageCode === 0) {\n        yield put({\n          type: request.response.success,\n          payload: data\n        });\n        yield put({\n          type: COMMON_SHOW_NOTIFICATION,\n          data: {\n            type: 'success',\n            title: 'Sign Up',\n            content: 'Chúng tôi đã gửi cho bạn email, hãy bấm vào đường link chúng tôi gửi để kích hoạt tài khoản',\n            time: new Date()\n          }\n        });\n      }\n    } else {\n      yield put({\n        type: COMMON_SHOW_NOTIFICATION,\n        data: {\n          type: 'error',\n          title: 'Sign Up',\n          content: 'Đã xảy ra lỗi, vui lòng tải lại trang',\n          time: new Date()\n        }\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'Sign Up',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchSignUp() {\n  yield takeLatest(SIGNUP, doSignUp);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/SignUp/signUp.ts"],"names":["call","takeLatest","put","query","METHOD","cookies","COOKIES_TYPE","SIGNUP","COMMON_SHOW_NOTIFICATION","signUp","data","path","param","uri","datas","paths","params","POST","doSignUp","request","response","get","AUTH_TOKEN","error","MessageCode","type","success","payload","title","content","time","Date","watchSignUp"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,SAASC,YAAT,QAA6B,QAA7B;AACA,SAASC,MAAT,EAAiBC,wBAAjB,QAAiD,oBAAjD;;AAEA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AACvE,QAAMC,GAAG,GAAG,MAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOT,KAAK,CAACU,GAAD,EAAMT,MAAM,CAACa,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,QAAV,CAAmBC,OAAnB,EAAmD;AACjD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACS,MAAD,EAASU,OAAO,CAACT,IAAR,CAAaA,IAAtB,EAA4BS,OAAO,CAACT,IAAR,CAAaC,IAAzC,EAA+CQ,OAAO,CAACT,IAAR,CAAaE,KAA5D,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAtB;;AACA,QAAIL,OAAO,CAACgB,GAAR,CAAYf,YAAY,CAACgB,UAAzB,KAAwC,IAA5C,EAAkD;AAChD,UAAIF,QAAQ,CAACV,IAAT,CAAca,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,cAAMtB,GAAG,CAAC;AACRuB,UAAAA,IAAI,EAAEN,OAAO,CAACC,QAAR,CAAiBM,OADf;AAERC,UAAAA,OAAO,EAAEjB;AAFD,SAAD,CAAT;AAIA,cAAMR,GAAG,CAAC;AACRuB,UAAAA,IAAI,EAAEjB,wBADE;AAERE,UAAAA,IAAI,EAAE;AACJe,YAAAA,IAAI,EAAE,SADF;AAEJG,YAAAA,KAAK,EAAE,SAFH;AAGJC,YAAAA,OAAO,EAAE,6FAHL;AAIJC,YAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,SAAD,CAAT;AASD;AACF,KAhBD,MAgBO;AACL,YAAM7B,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAEjB,wBADE;AAERE,QAAAA,IAAI,EAAE;AACJe,UAAAA,IAAI,EAAE,OADF;AAEJG,UAAAA,KAAK,EAAE,SAFH;AAGJC,UAAAA,OAAO,EAAE,uCAHL;AAIJC,UAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,OAAD,CAAT;AASD;AACF,GA9BD,CA8BE,OAAOR,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEjB,wBADE;AAERE,MAAAA,IAAI,EAAE;AACJe,QAAAA,IAAI,EAAE,OADF;AAEJG,QAAAA,KAAK,EAAE,SAFH;AAGJC,QAAAA,OAAO,EAAEN,KAHL;AAIJO,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAM/B,UAAU,CAACM,MAAD,EAASW,QAAT,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { cookies } from 'utils/cookies';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COOKIES_TYPE } from 'global';\r\nimport { SIGNUP, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nconst signUp = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doSignUp(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(signUp, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data;\r\n    if (cookies.get(COOKIES_TYPE.AUTH_TOKEN) == null) {\r\n      if (response.data.error.MessageCode === 0) {\r\n        yield put({\r\n          type: request.response.success,\r\n          payload: data,\r\n        });\r\n        yield put({\r\n          type: COMMON_SHOW_NOTIFICATION,\r\n          data: {\r\n            type: 'success',\r\n            title: 'Sign Up',\r\n            content: 'Chúng tôi đã gửi cho bạn email, hãy bấm vào đường link chúng tôi gửi để kích hoạt tài khoản',\r\n            time: new Date(),\r\n          },\r\n        });\r\n      }\r\n    } else {\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'error',\r\n          title: 'Sign Up',\r\n          content: 'Đã xảy ra lỗi, vui lòng tải lại trang',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Sign Up',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSignUp() {\r\n  yield takeLatest(SIGNUP, doSignUp);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}