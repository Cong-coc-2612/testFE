{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport store from 'redux-saga/store';\nimport { COMMON_SHOW_NOTIFICATION, START_TOURNAMENT } from 'redux-saga/actions';\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\nimport { query, METHOD } from 'utils/socketApi';\n\nconst startTournament = (data, path, param) => {\n  const uri = 'tournament/start';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doStartTournament(request) {\n  try {\n    const response = yield call(startTournament, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n      yield put({\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\n        payload: { ...store.getState().tournamentInfo,\n          Tournament: data.Tournament\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'StartTournament',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchStartTournament() {\n  yield takeLatest(START_TOURNAMENT, doStartTournament);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/StartTournament/startTournament.ts"],"names":["call","put","takeLatest","store","COMMON_SHOW_NOTIFICATION","START_TOURNAMENT","QUERY_TOURNAMENT_INFO_SUCCESS","query","METHOD","startTournament","data","path","param","uri","datas","paths","params","POST","doStartTournament","request","response","result","error","MessageCode","type","success","payload","getState","tournamentInfo","Tournament","Error","Message","failed","title","content","time","Date","watchStartTournament"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,wBAAT,EAAmCC,gBAAnC,QAA2D,oBAA3D;AACA,SAASC,6BAAT,QAA8C,iCAA9C;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;;AAEA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAChF,QAAMC,GAAG,GAAG,kBAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOL,KAAK,CAACM,GAAD,EAAML,MAAM,CAACS,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,iBAAV,CAA4BC,OAA5B,EAA4D;AAC1D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACS,eAAD,EAAkBU,OAAO,CAACT,IAAR,CAAaA,IAA/B,EAAqCS,OAAO,CAACT,IAAR,CAAaC,IAAlD,EAAwDQ,OAAO,CAACT,IAAR,CAAaE,KAArE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMtB,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAIA,YAAMT,GAAG,CAAC;AACRuB,QAAAA,IAAI,EAAElB,6BADE;AAERoB,QAAAA,OAAO,EAAE,EAAE,GAAGvB,KAAK,CAACwB,QAAN,GAAiBC,cAAtB;AAAsCC,UAAAA,UAAU,EAAEnB,IAAI,CAACmB;AAAvD;AAFD,OAAD,CAAT;AAID,KATD,MASO;AACL,YAAM,IAAIC,KAAJ,CAAUV,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBS,OAA9B,CAAN;AACD;AACF,GAfD,CAeE,OAAOT,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBY;AADf,KAAD,CAAT;AAGA,UAAM/B,GAAG,CAAC;AACRuB,MAAAA,IAAI,EAAEpB,wBADE;AAERM,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJS,QAAAA,KAAK,EAAE,iBAFH;AAGJC,QAAAA,OAAO,EAAEZ,KAHL;AAIJa,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,oBAAV,GAAiC;AAC9C,QAAMnC,UAAU,CAACG,gBAAD,EAAmBa,iBAAnB,CAAhB;AACD","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { IParams, IRequest, IBigRequest } from 'interfaces/common';\r\nimport store from 'redux-saga/store';\r\nimport { COMMON_SHOW_NOTIFICATION, START_TOURNAMENT } from 'redux-saga/actions';\r\nimport { QUERY_TOURNAMENT_INFO_SUCCESS } from 'screens/TournamentInfo/reducers';\r\nimport { query, METHOD } from 'utils/socketApi';\r\n\r\nconst startTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament/start';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doStartTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(startTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_TOURNAMENT_INFO_SUCCESS,\r\n        payload: { ...store.getState().tournamentInfo, Tournament: data.Tournament },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'StartTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchStartTournament() {\r\n  yield takeLatest(START_TOURNAMENT, doStartTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}