{"ast":null,"code":"import { call, put, takeLatest } from 'redux-saga/effects';\nimport { COMMON_SHOW_NOTIFICATION, REPORT_VIOLATION } from 'redux-saga/actions';\nimport { query, METHOD } from 'utils/socketApi';\n\nconst reportViolation = (data, path, param) => {\n  const uri = 'report';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doReportViolation(request) {\n  try {\n    const response = yield call(reportViolation, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n      yield put({\n        type: COMMON_SHOW_NOTIFICATION,\n        data: {\n          type: 'success',\n          title: 'Sign Up',\n          content: 'Gửi báo cáo thành công',\n          time: new Date()\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'ReportViolation',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchReportViolation() {\n  yield takeLatest(REPORT_VIOLATION, doReportViolation);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/ReportViolation/reportViolation.ts"],"names":["call","put","takeLatest","COMMON_SHOW_NOTIFICATION","REPORT_VIOLATION","query","METHOD","reportViolation","data","path","param","uri","datas","paths","params","POST","doReportViolation","request","response","result","error","MessageCode","type","success","payload","title","content","time","Date","Error","Message","failed","watchReportViolation"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,UAApB,QAAsC,oBAAtC;AAEA,SAASC,wBAAT,EAAmCC,gBAAnC,QAA2D,oBAA3D;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;;AAEA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAChF,QAAMC,GAAG,GAAG,QAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOL,KAAK,CAACM,GAAD,EAAML,MAAM,CAACS,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,iBAAV,CAA4BC,OAA5B,EAA4D;AAC1D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMlB,IAAI,CAACO,eAAD,EAAkBU,OAAO,CAACT,IAAR,CAAaA,IAA/B,EAAqCS,OAAO,CAACT,IAAR,CAAaC,IAAlD,EAAwDQ,OAAO,CAACT,IAAR,CAAaE,KAArE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMpB,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAIA,YAAMP,GAAG,CAAC;AACRqB,QAAAA,IAAI,EAAEnB,wBADE;AAERK,QAAAA,IAAI,EAAE;AACJc,UAAAA,IAAI,EAAE,SADF;AAEJG,UAAAA,KAAK,EAAE,SAFH;AAGJC,UAAAA,OAAO,EAAE,wBAHL;AAIJC,UAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,OAAD,CAAT;AASD,KAdD,MAcO;AACL,YAAM,IAAIC,KAAJ,CAAUX,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBU,OAA9B,CAAN;AACD;AACF,GApBD,CAoBE,OAAOV,KAAP,EAAc;AACd,UAAMnB,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBa;AADf,KAAD,CAAT;AAGA,UAAM9B,GAAG,CAAC;AACRqB,MAAAA,IAAI,EAAEnB,wBADE;AAERK,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJG,QAAAA,KAAK,EAAE,iBAFH;AAGJC,QAAAA,OAAO,EAAEN,KAHL;AAIJO,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUI,oBAAV,GAAiC;AAC9C,QAAM9B,UAAU,CAACE,gBAAD,EAAmBY,iBAAnB,CAAhB;AACD","sourcesContent":["import { call, put, takeLatest } from 'redux-saga/effects';\r\nimport { IParams, IRequest, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, REPORT_VIOLATION } from 'redux-saga/actions';\r\nimport { query, METHOD } from 'utils/socketApi';\r\n\r\nconst reportViolation = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'report';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doReportViolation(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(reportViolation, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'success',\r\n          title: 'Sign Up',\r\n          content: 'Gửi báo cáo thành công',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'ReportViolation',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchReportViolation() {\r\n  yield takeLatest(REPORT_VIOLATION, doReportViolation);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}