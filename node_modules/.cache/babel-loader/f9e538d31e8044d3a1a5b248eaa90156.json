{"ast":null,"code":"var _jsxFileName = \"E:\\\\testFrontEnd\\\\frontEnd\\\\SportTournamentSupportSystem\\\\src\\\\components\\\\SheetData\\\\index.tsx\";\nimport * as React from 'react'; // import ReduxBlockUi from 'react-block-ui/redux';\n\nimport { AutoSizer, MultiGrid } from 'react-virtualized';\nimport './styles.css';\nconst STYLE = {// backgroundColor: 'red',\n};\nexport class SheetData extends React.Component {\n  // private config: ISheetDataConfig;\n  constructor(props) {\n    super(props);\n    this.list = [{}];\n    this.lock = false;\n    this.virtualList = void 0;\n    this.loadMore = true;\n\n    this.componentDidMount = () => {\n      if (this.props.data != null) {\n        this.processData();\n      } // if (this.props.singleData != null) {\n      //   this.processSingleData();\n      // }\n\n    };\n\n    this.processData = () => {\n      const {\n        data\n      } = this.props;\n\n      if (data == null) {\n        this.loadMore = true;\n        this.list = [{}];\n      } else {\n        this.list = [{}, ...data];\n      }\n    };\n\n    this.getColumnWidth = ({\n      index\n    }) => {\n      return this.props.config.header[index].width;\n    };\n\n    this.getRowHeight = ({\n      index\n    }) => {\n      if (index === 0) {\n        return 40;\n      } else {\n        return this.props.config.rowHeight;\n      }\n    };\n\n    this.onScroll = ({\n      clientHeight,\n      clientWidth,\n      scrollHeight,\n      scrollLeft,\n      scrollTop,\n      scrollWidth\n    }) => {\n      if (clientHeight !== undefined && scrollTop !== undefined && scrollHeight !== undefined) {\n        if ((scrollTop + clientHeight) / scrollHeight > 0.8 && this.lock === false) {\n          if (this.props.requestLoadMore && this.loadMore && this.props.data != null) {\n            this.props.requestLoadMore();\n            this.lock = true;\n          }\n        }\n      }\n    };\n\n    this.cellRenderer = ({\n      columnIndex,\n      key,\n      rowIndex,\n      style\n    }) => {\n      const {\n        config,\n        haveTotalRow\n      } = this.props;\n      const properties = config.header[columnIndex];\n      const rowData = this.list[rowIndex];\n\n      if (rowData) {\n        if (rowIndex === 0 && config.hideHeader !== true) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            key: key,\n            style: style,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            className: `SheetData-Column1 ${columnIndex === config.fixedColumnCount - 1 && 'SheetData-last-fixed-column'}`,\n            style: { ...properties.style,\n              ...config.headerStyle\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 13\n            }\n          }, properties.label));\n        } else {\n          // return null;\n          // if (haveTotalRow !== true) {\n          if (columnIndex <= config.header.length) {\n            return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n              key: key,\n              style: style,\n              onMouseOver: () => {\n                this.setState({\n                  hoveredColumnIndex: columnIndex,\n                  hoveredRowIndex: rowIndex\n                }); // this.virtualList.forceUpdate();\n              } // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \n              //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \n              //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\n              //   ${this.props.isShowOrderHistory && rowIndex === this.state.onClickRowIndex && sheetStyle.OnClickItem}\n              //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \n              //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\n              //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\n              //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\n\n            }, this.props.isRowClickable === true ? {\n              onClick: this.onClickRow(rowData, rowIndex)\n            } : null, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 13\n              }\n            }), /*#__PURE__*/React.createElement(\"div\", {\n              className: `SheetData-Column2 ${columnIndex === config.fixedColumnCount - 1 ? 'SheetData-last-fixed-column' : 'SheetData-notLast-fixed-column'} ${rowIndex % 2 !== 0 ? 'SheetData-Row1' : 'SheetData-Row2'}`,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 15\n              }\n            }, properties.element(rowData, rowIndex, properties.style)));\n          } else {\n            return null;\n          } // } else {\n          //   if (rowIndex < this.list.length - 1) {\n          //     if (columnIndex <= config.header.length) {\n          //       return (\n          //         <div\n          //           key={key}\n          //           style={style}\n          //           onMouseOver={() => {\n          //             this.setState({\n          //               hoveredColumnIndex: columnIndex,\n          //               hoveredRowIndex: rowIndex,\n          //             });\n          //             // this.virtualList.forceUpdate();\n          //           }}\n          //           // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \n          //           //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \n          //           //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\n          //           //   ${this.props.isShowOrderHistory &&\n          //           //   rowIndex === this.state.onClickRowIndex &&\n          //           //   sheetStyle.OnClickItem}\n          //           //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \n          //           //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\n          //           //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\n          //           //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\n          //           {...(this.props.isRowClickable === true ? { onClick: this.onClickRow(rowData, rowIndex) } : null)}\n          //         >\n          //           {properties.element(rowData, rowIndex, properties.style)}\n          //         </div>\n          //       );\n          //     } else {\n          //       return null;\n          //     }\n          //   } else {\n          //     return (\n          //       <div key={key} style={style}>\n          //         <div\n          //           // className={`${sheetStyle.ColumnLastKBSV} ${\n          //           //   this.props.boardMode === true ? sheetStyle.BlackColumn : ''\n          //           //   } ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\n          //           style={{ ...properties.style, ...config.headerStyle }}\n          //         >\n          //           {properties.element(rowData, -1, properties.style)}\n          //         </div>\n          //       </div>\n          //     );\n          //   }\n          // }\n\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onClickRow = (rowData, rowIndex) => () => {\n      if (this.props.onClickRow != null) {\n        this.props.onClickRow(rowData);\n      }\n\n      if (this.props.isShowOrderHistory === true) {\n        this.setState({\n          onClickRowIndex: rowIndex\n        });\n      }\n    };\n\n    this.state = {}; // this.config = JSON.parse(JSON.stringify(this.props.config));\n    // this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\n    // this.config.totalFixedWidth = this.config.header.reduce(\n    //   (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\n    //   0\n    // );\n  }\n\n  shouldComponentUpdate(nextProps) {\n    if (this.props.data !== nextProps.data) {// this.config = JSON.parse(JSON.stringify(nextProps.config));\n      // this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\n      // this.config.totalFixedWidth = this.config.header.reduce(\n      //   (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\n      //   0\n      // );\n    }\n\n    return true;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.processData();\n    } else if (this.props.data != null) {\n      if (this.virtualList != null && this.virtualList.recomputeGridSize != null) {\n        this.virtualList.recomputeGridSize();\n        this.virtualList.forceUpdateGrids();\n      }\n    }\n  } // private processSingleData = () => {\n  //   const { config, singleData } = this.props;\n  //   if (singleData == null) {\n  //     this.list = [{}];\n  //   } else {\n  //     if (singleData) {\n  //       this.list = [];\n  //       if (config.hideHeader !== true) {\n  //         this.list.push({});\n  //       }\n  //       this.list = this.list.concat([singleData]);\n  //     } else {\n  //       this.list = [];\n  //       if (config.hideHeader !== true) {\n  //         this.list.push({});\n  //       }\n  //     }\n  //   }\n  // };\n\n\n  render() {\n    const {\n      config\n    } = this.props; // const domain = store.getState().config.domain === 'kbsv';\n\n    const SheetDataForm =\n    /*#__PURE__*/\n    // <AutoSizer>\n    //   {({ width, height }: Size) => {\n    //     const totalWidth = config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\n    //     if (width - 6 > totalWidth) {\n    //       //6px is Scrollbar width\n    //       for (let i = 0; i < this.config.header.length; i++) {\n    //         if (i >= config.fixedColumnCount) {\n    //           this.config.header[i].width = Math.floor(\n    //             (config.header[i].width / (this.config.totalWidth! - this.config.totalFixedWidth!)) *\n    //             (width - this.config.totalFixedWidth! - 6)\n    //           );\n    //         }\n    //       }\n    //     } else {\n    //       this.config = JSON.parse(JSON.stringify(this.props.config));\n    //       this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\n    //       this.config.totalFixedWidth = this.config.header.reduce(\n    //         (a: number, b: ISheetDataColumn, index: number) =>\n    //           a + (index < this.config.fixedColumnCount ? b.width : 0),\n    //         0\n    //       );\n    //     }\n    // return (\n    React.createElement(MultiGrid, {\n      ref: ref => this.virtualList = ref,\n      fixedColumnCount: config.fixedColumnCount,\n      fixedRowCount: config.fixedRowCount,\n      cellRenderer: this.cellRenderer,\n      columnWidth: this.getColumnWidth,\n      columnCount: config.header.length,\n      enableFixedColumnScroll: false,\n      enableFixedRowScroll: false,\n      rowHeight: this.getRowHeight,\n      rowCount: 1 // rowCount={this.list.length}\n      ,\n      style: STYLE // styleBottomLeftGrid={\n      //   this.props.boardMode === true\n      //     ? domain\n      //       ? STYLE_BOTTOM_LEFT_GRID_BOARD_MODE_KBSV\n      //       : STYLE_BOTTOM_LEFT_GRID_BOARD_MODE\n      //     : domain\n      //       ? STYLE_BOTTOM_LEFT_GRID_KBSV\n      //       : STYLE_BOTTOM_LEFT_GRID\n      // }\n      // styleTopLeftGrid={\n      //   this.props.boardMode === true\n      //     ? domain\n      //       ? STYLE_TOP_LEFT_GRID_BOARD_MODE_KBSV\n      //       : STYLE_TOP_LEFT_GRID_BOARD_MODE\n      //     : domain\n      //       ? STYLE_TOP_LEFT_GRID_KBSV\n      //       : STYLE_TOP_LEFT_GRID\n      // }\n      // styleTopRightGrid={\n      //   this.props.boardMode\n      //     ? domain\n      //       ? STYLE_TOP_RIGHT_GRID_BOARD_MODE_KBSV\n      //       : STYLE_TOP_RIGHT_GRID_BOARD_MODE\n      //     : domain\n      //       ? STYLE_TOP_RIGHT_GRID_KBSV\n      //       : STYLE_TOP_RIGHT_GRID\n      // }\n      // styleBottomRightGrid={\n      //   this.props.boardMode === true\n      //     ? domain\n      //       ? STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE_KBSV\n      //       : STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE\n      //     : STYLE_BOTTOM_RIGHT_GRID\n      // }\n      ,\n      width: 200,\n      height: 200 // hideTopRightGridScrollbar={true}\n      // hideBottomLeftGridScrollbar={true}\n      // onScroll={this.onScroll}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    }) // );\n    //   }}\n    // </AutoSizer>\n    ;\n\n    if (this.list.length > 0) {\n      // if (store.getState().config.domain !== 'kbsv') {\n      //   return (\n      //     <div\n      //       // className={sheetStyle.SheetData}\n      //       onMouseOut={() => {\n      //         this.setState({\n      //           hoveredColumnIndex: null,\n      //           hoveredRowIndex: null,\n      //         });\n      //         this.virtualList.forceUpdate();\n      //       }}\n      //     >\n      //       {SheetDataForm}\n      //     </div>\n      //   );\n      // } else {\n      return (\n        /*#__PURE__*/\n        // <ReduxBlockUi\n        //   tag=\"div\"\n        //   className={'SheetData'}\n        //   block={this.props.blockAction}\n        //   unblock={this.props.unBlockAction}\n        //   onMouseOut={() => {\n        //     this.setState({\n        //       hoveredColumnIndex: null,\n        //       hoveredRowIndex: null,\n        //     });\n        //     // this.virtualList.forceUpdate();\n        //   }}\n        // >\n        // { SheetDataForm }\n        React.createElement(AutoSizer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 9\n          }\n        }, ({\n          height,\n          width\n        }) => /*#__PURE__*/React.createElement(MultiGrid, {\n          ref: ref => this.virtualList = ref,\n          width: width,\n          height: height,\n          rowCount: this.list.length,\n          rowHeight: this.getRowHeight,\n          columnCount: config.header.length,\n          columnWidth: this.getColumnWidth,\n          cellRenderer: this.cellRenderer,\n          fixedColumnCount: config.fixedColumnCount,\n          fixedRowCount: config.fixedRowCount,\n          enableFixedColumnScroll: false,\n          enableFixedRowScroll: false,\n          hideTopRightGridScrollbar: true,\n          hideBottomLeftGridScrollbar: true,\n          style: {\n            display: 'flex',\n            flexDirection: 'column'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }\n        })) // <AutoSizer>\n        //   {({ height, width }: Size) => {\n        //     return (\n        //       <MultiGrid\n        //         width={700}\n        //         height={250}\n        //         rowCount={this.list.length}\n        //         rowHeight={this.getRowHeight}\n        //         columnCount={config.header.length}\n        //         columnWidth={this.getColumnWidth}\n        //         cellRenderer={this.cellRenderer}\n        //         fixedColumnCount={config.fixedColumnCount}\n        //         fixedRowCount={config.fixedRowCount}\n        //         enableFixedColumnScroll={false}\n        //         enableFixedRowScroll={false}\n        //         hideTopRightGridScrollbar={true}\n        //         hideBottomLeftGridScrollbar={true}\n        //         style={{ display: 'flex' }}\n        //       />\n        //     );\n        //   }}\n        // </AutoSizer>,\n        // </ReduxBlockUi>\n\n      );\n    } // }\n\n\n    return null;\n  }\n\n}\nSheetData.defaultProps = {\n  isRowClickable: true,\n  boardMode: false,\n  isTotalRow: false,\n  haveTotalRow: false\n};\nexport default SheetData;","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/components/SheetData/index.tsx"],"names":["React","AutoSizer","MultiGrid","STYLE","SheetData","Component","constructor","props","list","lock","virtualList","loadMore","componentDidMount","data","processData","getColumnWidth","index","config","header","width","getRowHeight","rowHeight","onScroll","clientHeight","clientWidth","scrollHeight","scrollLeft","scrollTop","scrollWidth","undefined","requestLoadMore","cellRenderer","columnIndex","key","rowIndex","style","haveTotalRow","properties","rowData","hideHeader","fixedColumnCount","headerStyle","label","length","setState","hoveredColumnIndex","hoveredRowIndex","isRowClickable","onClick","onClickRow","element","isShowOrderHistory","onClickRowIndex","state","shouldComponentUpdate","nextProps","componentDidUpdate","prevProps","recomputeGridSize","forceUpdateGrids","render","SheetDataForm","ref","fixedRowCount","height","display","flexDirection","defaultProps","boardMode","isTotalRow"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n// import ReduxBlockUi from 'react-block-ui/redux';\r\nimport { AutoSizer, MultiGrid, Size, Index, ScrollParams, GridCellProps } from 'react-virtualized';\r\nimport './styles.css';\r\nimport { IParams } from 'interfaces/common';\r\n\r\nconst STYLE = {\r\n  // backgroundColor: 'red',\r\n};\r\n\r\ninterface ISheetDataColumn {\r\n  label: string | React.ReactElement;\r\n  width: number;\r\n  style?: React.CSSProperties;\r\n  element(rowData: IParams, index: number, style?: React.CSSProperties): React.ReactNode;\r\n}\r\n\r\nexport interface ISheetDataConfig {\r\n  fetchCount: number;\r\n  fixedColumnCount: number;\r\n  fixedRowCount: number;\r\n  rowHeight: number;\r\n  hideHeader?: boolean;\r\n  header: ISheetDataColumn[];\r\n  headerStyle?: React.CSSProperties;\r\n  totalWidth?: number;\r\n  totalFixedWidth?: number;\r\n}\r\n\r\ninterface ISheetDataProps extends React.ClassAttributes<SheetData> {\r\n  data?: IParams[] | null;\r\n  singleData?: IParams | null;\r\n  config: ISheetDataConfig;\r\n  isRowClickable?: boolean;\r\n  boardMode?: boolean;\r\n  isShowOrderHistory?: boolean;\r\n  isPlusRow?: boolean;\r\n  isTotalRow?: boolean;\r\n  blockAction?: string[];\r\n  unBlockAction?: string[];\r\n  haveTotalRow?: boolean;\r\n\r\n  onClickRow?(rowData: IParams): void;\r\n  sheetDataRef?(ref: SheetData): void;\r\n  requestLoadMore?(): void;\r\n}\r\n\r\ninterface ISheetDataState {\r\n  hoveredRowIndex?: number | null;\r\n  hoveredColumnIndex?: number | null;\r\n  onClickRowIndex?: number | null;\r\n}\r\n\r\nexport class SheetData extends React.Component<ISheetDataProps, ISheetDataState> {\r\n  static defaultProps = {\r\n    isRowClickable: true,\r\n    boardMode: false,\r\n    isTotalRow: false,\r\n    haveTotalRow: false,\r\n  };\r\n\r\n  private list: IParams[] = [{}];\r\n  private lock = false;\r\n  private virtualList: MultiGrid | undefined;\r\n  // private config: ISheetDataConfig;\r\n  private loadMore = true;\r\n\r\n  constructor(props: ISheetDataProps) {\r\n    super(props);\r\n    this.state = {};\r\n    // this.config = JSON.parse(JSON.stringify(this.props.config));\r\n    // this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n    // this.config.totalFixedWidth = this.config.header.reduce(\r\n    //   (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n    //   0\r\n    // );\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.data != null) {\r\n      this.processData();\r\n    }\r\n    // if (this.props.singleData != null) {\r\n    //   this.processSingleData();\r\n    // }\r\n  };\r\n\r\n  shouldComponentUpdate(nextProps: ISheetDataProps) {\r\n    if (this.props.data !== nextProps.data) {\r\n      // this.config = JSON.parse(JSON.stringify(nextProps.config));\r\n      // this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      // this.config.totalFixedWidth = this.config.header.reduce(\r\n      //   (a: number, b: ISheetDataColumn, index: number) => a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n      //   0\r\n      // );\r\n    }\r\n    \r\n    return true;\r\n  }\r\n  \r\n  componentDidUpdate(prevProps: ISheetDataProps) {\r\n    if (this.props.data !== prevProps.data) {\r\n      this.processData();\r\n    } else if (this.props.data != null) {\r\n      if (this.virtualList != null && this.virtualList.recomputeGridSize != null) {\r\n        this.virtualList.recomputeGridSize();\r\n          this.virtualList.forceUpdateGrids();\r\n      }\r\n    }\r\n  }\r\n\r\n  // private processSingleData = () => {\r\n  //   const { config, singleData } = this.props;\r\n\r\n  //   if (singleData == null) {\r\n  //     this.list = [{}];\r\n  //   } else {\r\n  //     if (singleData) {\r\n  //       this.list = [];\r\n  //       if (config.hideHeader !== true) {\r\n  //         this.list.push({});\r\n  //       }\r\n  //       this.list = this.list.concat([singleData]);\r\n  //     } else {\r\n  //       this.list = [];\r\n  //       if (config.hideHeader !== true) {\r\n  //         this.list.push({});\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  private processData = () => {\r\n    const { data } = this.props;\r\n\r\n    if (data == null) {\r\n      this.loadMore = true;\r\n      this.list = [{}];\r\n    } else {\r\n      this.list = [{}, ...data];\r\n    }\r\n  };\r\n\r\n  private getColumnWidth = ({ index }: Index) => {\r\n    return this.props.config.header[index].width;\r\n  };\r\n\r\n  private getRowHeight = ({ index }: Index) => {\r\n    if (index === 0) {\r\n      return 40;\r\n    } else {\r\n      return this.props.config.rowHeight;\r\n    }\r\n  };\r\n\r\n  private onScroll = ({\r\n    clientHeight,\r\n    clientWidth,\r\n    scrollHeight,\r\n    scrollLeft,\r\n    scrollTop,\r\n    scrollWidth,\r\n  }: ScrollParams) => {\r\n    if (clientHeight !== undefined && scrollTop !== undefined && scrollHeight !== undefined) {\r\n      if ((scrollTop + clientHeight) / scrollHeight > 0.8 && this.lock === false) {\r\n        if (this.props.requestLoadMore && this.loadMore && this.props.data != null) {\r\n          this.props.requestLoadMore();\r\n          this.lock = true;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  private cellRenderer = ({ columnIndex, key, rowIndex, style }: GridCellProps) => {\r\n    const { config, haveTotalRow } = this.props;\r\n    const properties = config.header[columnIndex];\r\n    const rowData = this.list[rowIndex];\r\n\r\n    if (rowData) {\r\n      if (rowIndex === 0 && config.hideHeader !== true) {\r\n        return (\r\n          <div key={key} style={style}>\r\n            <div\r\n              className={`SheetData-Column1 ${columnIndex === config.fixedColumnCount - 1 && 'SheetData-last-fixed-column'}`}\r\n              style={{ ...properties.style, ...config.headerStyle }}\r\n            >\r\n              {properties.label}\r\n            </div>\r\n          </div>\r\n        );\r\n      } else {\r\n        // return null;\r\n        // if (haveTotalRow !== true) {\r\n        if (columnIndex <= config.header.length) {\r\n          return (\r\n            <div\r\n              key={key}\r\n              style={style}\r\n              onMouseOver={() => {\r\n                this.setState({\r\n                  hoveredColumnIndex: columnIndex,\r\n                  hoveredRowIndex: rowIndex,\r\n                });\r\n                // this.virtualList.forceUpdate();\r\n              }}\r\n              // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \r\n              //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \r\n              //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\r\n              //   ${this.props.isShowOrderHistory && rowIndex === this.state.onClickRowIndex && sheetStyle.OnClickItem}\r\n              //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \r\n              //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\r\n              //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\r\n              //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n              {...(this.props.isRowClickable === true ? { onClick: this.onClickRow(rowData, rowIndex) } : null)}\r\n            >\r\n              <div\r\n                className={`SheetData-Column2 ${columnIndex === config.fixedColumnCount - 1 ? 'SheetData-last-fixed-column' : 'SheetData-notLast-fixed-column'} ${rowIndex % 2 !== 0 ? 'SheetData-Row1' : 'SheetData-Row2'}`}\r\n              >\r\n                {properties.element(rowData, rowIndex, properties.style)}\r\n              </div>\r\n            </div>\r\n          );\r\n        } else {\r\n          return null;\r\n        }\r\n        // } else {\r\n        //   if (rowIndex < this.list.length - 1) {\r\n        //     if (columnIndex <= config.header.length) {\r\n        //       return (\r\n        //         <div\r\n        //           key={key}\r\n        //           style={style}\r\n        //           onMouseOver={() => {\r\n        //             this.setState({\r\n        //               hoveredColumnIndex: columnIndex,\r\n        //               hoveredRowIndex: rowIndex,\r\n        //             });\r\n        //             // this.virtualList.forceUpdate();\r\n        //           }}\r\n        //           // className={`${domain ? sheetStyle.Column2KBSV : sheetStyle.Column2} \r\n        //           //   ${this.props.boardMode === true ? sheetStyle.BlackColumn : ''} \r\n        //           //   ${rowIndex === this.state.hoveredRowIndex && sheetStyle.HoverItem}\r\n        //           //   ${this.props.isShowOrderHistory &&\r\n        //           //   rowIndex === this.state.onClickRowIndex &&\r\n        //           //   sheetStyle.OnClickItem}\r\n        //           //   ${this.props.isRowClickable === true ? sheetStyle.ColumnClickable : ''} \r\n        //           //   ${rowIndex % 2 === 0 ? sheetStyle.Highlight : ''}\r\n        //           //   ${rowIndex % 2 === 0 && this.props.boardMode === true ? sheetStyle.HighlightBlack : ''}\r\n        //           //   ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n        //           {...(this.props.isRowClickable === true ? { onClick: this.onClickRow(rowData, rowIndex) } : null)}\r\n        //         >\r\n        //           {properties.element(rowData, rowIndex, properties.style)}\r\n        //         </div>\r\n        //       );\r\n        //     } else {\r\n        //       return null;\r\n        //     }\r\n        //   } else {\r\n        //     return (\r\n        //       <div key={key} style={style}>\r\n        //         <div\r\n        //           // className={`${sheetStyle.ColumnLastKBSV} ${\r\n        //           //   this.props.boardMode === true ? sheetStyle.BlackColumn : ''\r\n        //           //   } ${columnIndex === config.header.length - 1 ? sheetStyle.ColumnLast : ''}`}\r\n        //           style={{ ...properties.style, ...config.headerStyle }}\r\n        //         >\r\n        //           {properties.element(rowData, -1, properties.style)}\r\n        //         </div>\r\n        //       </div>\r\n        //     );\r\n        //   }\r\n        // }\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  private onClickRow = (rowData: IParams, rowIndex?: number) => () => {\r\n    if (this.props.onClickRow != null) {\r\n      this.props.onClickRow(rowData);\r\n    }\r\n    if (this.props.isShowOrderHistory === true) {\r\n      this.setState({\r\n        onClickRowIndex: rowIndex,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { config } = this.props;\r\n    // const domain = store.getState().config.domain === 'kbsv';\r\n\r\n    const SheetDataForm = (\r\n      // <AutoSizer>\r\n      //   {({ width, height }: Size) => {\r\n      //     const totalWidth = config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      //     if (width - 6 > totalWidth) {\r\n      //       //6px is Scrollbar width\r\n\r\n      //       for (let i = 0; i < this.config.header.length; i++) {\r\n      //         if (i >= config.fixedColumnCount) {\r\n      //           this.config.header[i].width = Math.floor(\r\n      //             (config.header[i].width / (this.config.totalWidth! - this.config.totalFixedWidth!)) *\r\n      //             (width - this.config.totalFixedWidth! - 6)\r\n      //           );\r\n      //         }\r\n      //       }\r\n      //     } else {\r\n      //       this.config = JSON.parse(JSON.stringify(this.props.config));\r\n      //       this.config.totalWidth = this.config.header.reduce((a: number, b: ISheetDataColumn) => a + b.width, 0);\r\n      //       this.config.totalFixedWidth = this.config.header.reduce(\r\n      //         (a: number, b: ISheetDataColumn, index: number) =>\r\n      //           a + (index < this.config.fixedColumnCount ? b.width : 0),\r\n      //         0\r\n      //       );\r\n      //     }\r\n\r\n      // return (\r\n      <MultiGrid\r\n        ref={(ref: MultiGrid) => (this.virtualList = ref)}\r\n        fixedColumnCount={config.fixedColumnCount}\r\n        fixedRowCount={config.fixedRowCount}\r\n        cellRenderer={this.cellRenderer}\r\n        columnWidth={this.getColumnWidth}\r\n        columnCount={config.header.length}\r\n        enableFixedColumnScroll={false}\r\n        enableFixedRowScroll={false}\r\n        rowHeight={this.getRowHeight}\r\n        rowCount={1}\r\n        // rowCount={this.list.length}\r\n        style={STYLE}\r\n        // styleBottomLeftGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_BOTTOM_LEFT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_BOTTOM_LEFT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_BOTTOM_LEFT_GRID_KBSV\r\n        //       : STYLE_BOTTOM_LEFT_GRID\r\n        // }\r\n        // styleTopLeftGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_TOP_LEFT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_TOP_LEFT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_TOP_LEFT_GRID_KBSV\r\n        //       : STYLE_TOP_LEFT_GRID\r\n        // }\r\n        // styleTopRightGrid={\r\n        //   this.props.boardMode\r\n        //     ? domain\r\n        //       ? STYLE_TOP_RIGHT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_TOP_RIGHT_GRID_BOARD_MODE\r\n        //     : domain\r\n        //       ? STYLE_TOP_RIGHT_GRID_KBSV\r\n        //       : STYLE_TOP_RIGHT_GRID\r\n        // }\r\n        // styleBottomRightGrid={\r\n        //   this.props.boardMode === true\r\n        //     ? domain\r\n        //       ? STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE_KBSV\r\n        //       : STYLE_BOTTOM_RIGHT_GRID_BOARD_MODE\r\n        //     : STYLE_BOTTOM_RIGHT_GRID\r\n        // }\r\n        width={200}\r\n        height={200}\r\n      // hideTopRightGridScrollbar={true}\r\n      // hideBottomLeftGridScrollbar={true}\r\n      // onScroll={this.onScroll}\r\n      />\r\n      // );\r\n      //   }}\r\n      // </AutoSizer>\r\n    );\r\n\r\n    if (this.list.length > 0) {\r\n      // if (store.getState().config.domain !== 'kbsv') {\r\n      //   return (\r\n      //     <div\r\n      //       // className={sheetStyle.SheetData}\r\n      //       onMouseOut={() => {\r\n      //         this.setState({\r\n      //           hoveredColumnIndex: null,\r\n      //           hoveredRowIndex: null,\r\n      //         });\r\n      //         this.virtualList.forceUpdate();\r\n      //       }}\r\n      //     >\r\n      //       {SheetDataForm}\r\n      //     </div>\r\n      //   );\r\n      // } else {\r\n      return (\r\n        // <ReduxBlockUi\r\n        //   tag=\"div\"\r\n        //   className={'SheetData'}\r\n        //   block={this.props.blockAction}\r\n        //   unblock={this.props.unBlockAction}\r\n        //   onMouseOut={() => {\r\n        //     this.setState({\r\n        //       hoveredColumnIndex: null,\r\n        //       hoveredRowIndex: null,\r\n        //     });\r\n        //     // this.virtualList.forceUpdate();\r\n        //   }}\r\n        // >\r\n        // { SheetDataForm }\r\n        <AutoSizer>\r\n          {({ height, width }) => (\r\n            <MultiGrid\r\n              ref={(ref: MultiGrid) => (this.virtualList = ref)}\r\n              width={width}\r\n              height={height}\r\n              rowCount={this.list.length}\r\n              rowHeight={this.getRowHeight}\r\n              columnCount={config.header.length}\r\n              columnWidth={this.getColumnWidth}\r\n              cellRenderer={this.cellRenderer}\r\n              fixedColumnCount={config.fixedColumnCount}\r\n              fixedRowCount={config.fixedRowCount}\r\n              enableFixedColumnScroll={false}\r\n              enableFixedRowScroll={false}\r\n              hideTopRightGridScrollbar={true}\r\n              hideBottomLeftGridScrollbar={true}\r\n              style={{ display: 'flex', flexDirection: 'column' }}\r\n            />\r\n          )}\r\n        </AutoSizer>\r\n        // <AutoSizer>\r\n        //   {({ height, width }: Size) => {\r\n        //     return (\r\n        //       <MultiGrid\r\n        //         width={700}\r\n        //         height={250}\r\n        //         rowCount={this.list.length}\r\n        //         rowHeight={this.getRowHeight}\r\n        //         columnCount={config.header.length}\r\n        //         columnWidth={this.getColumnWidth}\r\n        //         cellRenderer={this.cellRenderer}\r\n        //         fixedColumnCount={config.fixedColumnCount}\r\n        //         fixedRowCount={config.fixedRowCount}\r\n        //         enableFixedColumnScroll={false}\r\n        //         enableFixedRowScroll={false}\r\n        //         hideTopRightGridScrollbar={true}\r\n        //         hideBottomLeftGridScrollbar={true}\r\n        //         style={{ display: 'flex' }}\r\n        //       />\r\n        //     );\r\n        //   }}\r\n        // </AutoSizer>,\r\n        // </ReduxBlockUi>\r\n      );\r\n    }\r\n    // }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default SheetData;\r\n"]},"metadata":{},"sourceType":"module"}