{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_FORMATS } from 'redux-saga/actions';\n\nconst queryAllFormat = () => {\n  const uri = 'formats';\n  return query(uri, METHOD.GET, {}, {}, '');\n};\n\nfunction* doQueryAllFormat(request) {\n  try {\n    const response = yield call(queryAllFormat);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data.CompetitionSettings\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'QueryAllFormat',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchQueryAllFormat() {\n  yield takeLatest(QUERY_ALL_FORMATS, doQueryAllFormat);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/QueryAllFormat/queryAllFormat.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","QUERY_ALL_FORMATS","queryAllFormat","uri","GET","doQueryAllFormat","request","response","data","result","error","MessageCode","type","success","payload","CompetitionSettings","Error","Message","failed","title","content","time","Date","watchQueryAllFormat"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,iBAAnC,QAA4D,oBAA5D;;AAGA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,GAAG,GAAG,SAAZ;AACA,SAAOL,KAAK,CAACK,GAAD,EAAMJ,MAAM,CAACK,GAAb,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,CAAZ;AACD,CAHD;;AAKA,UAAUC,gBAAV,CAA2BC,OAA3B,EAAoD;AAClD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACO,cAAD,CAA3B;AACA,UAAMM,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcC,MAA3B;;AACA,QAAIF,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMd,GAAG,CAAC;AACRe,QAAAA,IAAI,EAAEN,OAAO,CAACC,QAAR,CAAiBM,OADf;AAERC,QAAAA,OAAO,EAAEN,IAAI,CAACO;AAFN,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAM,IAAIC,KAAJ,CAAUT,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBO,OAA9B,CAAN;AACD;AACF,GAXD,CAWE,OAAOP,KAAP,EAAc;AACd,UAAMb,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEN,OAAO,CAACC,QAAR,CAAiBW;AADf,KAAD,CAAT;AAGA,UAAMrB,GAAG,CAAC;AACRe,MAAAA,IAAI,EAAEZ,wBADE;AAERQ,MAAAA,IAAI,EAAE;AACJI,QAAAA,IAAI,EAAE,OADF;AAEJO,QAAAA,KAAK,EAAE,gBAFH;AAGJC,QAAAA,OAAO,EAAEV,KAHL;AAIJW,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,mBAAV,GAAgC;AAC7C,QAAM3B,UAAU,CAACK,iBAAD,EAAoBI,gBAApB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, QUERY_ALL_FORMATS } from 'redux-saga/actions';\r\n\r\n\r\nconst queryAllFormat = () => {\r\n  const uri = 'formats';\r\n  return query(uri, METHOD.GET, {}, {}, '');\r\n};\r\n\r\nfunction* doQueryAllFormat(request: IRequest<null>) {\r\n  try {\r\n    const response = yield call(queryAllFormat);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.CompetitionSettings,\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'QueryAllFormat',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryAllFormat() {\r\n  yield takeLatest(QUERY_ALL_FORMATS, doQueryAllFormat);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}