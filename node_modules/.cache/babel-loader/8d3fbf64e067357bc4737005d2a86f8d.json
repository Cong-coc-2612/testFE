{"ast":null,"code":"var _jsxFileName = \"E:\\\\testFrontEnd\\\\frontEnd\\\\SportTournamentSupportSystem\\\\src\\\\screens\\\\ChangePassword\\\\index.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ReduxBlockUi from 'react-block-ui/redux';\nimport TextInput from 'components/TextInput';\nimport { CHANGE_PASSWORD } from 'redux-saga/actions';\nimport { CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED } from 'screens/ChangePassword/reducers';\nimport { changePassword } from './actions';\nimport './styles.css';\n\nclass ChangePassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeOldPassword = value => {\n      this.setState({\n        oldPassword: value\n      });\n    };\n\n    this.onChangeNewPassword = value => {\n      this.setState({\n        newPassword: value\n      });\n    };\n\n    this.onChangeReconfirmPassword = value => {\n      this.setState({\n        reconfirmPassword: value\n      });\n    };\n\n    this.validate = () => {\n      let newPasswordError = false;\n      let newPasswordErrorContent = '';\n      let oldPasswordErrorContent = '';\n      let oldPasswordError = false;\n      let reconfirmPasswordErrorContent = '';\n      let reconfirmPasswordError = false;\n\n      if (this.state.newPassword.includes(' ') || this.state.newPassword.trim() === '') {\n        newPasswordError = true;\n        newPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\n      }\n\n      if (this.state.oldPassword.trim() === '' || this.state.oldPassword.includes(' ')) {\n        oldPasswordError = true;\n        oldPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\n      }\n\n      if (newPasswordError !== true && oldPasswordError !== true && this.state.newPassword === this.state.oldPassword) {\n        newPasswordError = true;\n        newPasswordErrorContent = 'Mật khẩu mới không được giống mật khẩu cũ';\n      }\n\n      if (this.state.reconfirmPassword.trim() === '' || this.state.reconfirmPassword.includes(' ')) {\n        reconfirmPasswordError = true;\n        reconfirmPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\n      } else if (this.state.reconfirmPassword !== this.state.newPassword && newPasswordError !== true) {\n        reconfirmPasswordError = true;\n        reconfirmPasswordErrorContent = 'Xác nhận mật khẩu không hợp lệ';\n      }\n\n      return {\n        newPasswordError,\n        newPasswordErrorContent,\n        oldPasswordErrorContent,\n        oldPasswordError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError\n      };\n    };\n\n    this.handleChangePassword = () => {\n      const {\n        newPasswordError,\n        newPasswordErrorContent,\n        oldPasswordErrorContent,\n        oldPasswordError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError\n      } = this.validate();\n      this.setState({\n        newPasswordError,\n        newPasswordErrorContent,\n        oldPasswordErrorContent,\n        oldPasswordError,\n        reconfirmPasswordErrorContent,\n        reconfirmPasswordError\n      });\n\n      if (newPasswordError === true || oldPasswordError === true || reconfirmPasswordError === true) {\n        return;\n      }\n\n      const params = {\n        path: '',\n        param: {},\n        data: {\n          oldPassword: this.state.oldPassword,\n          password: this.state.newPassword\n        }\n      };\n      this.props.changePassword(params);\n    };\n\n    this.state = {\n      oldPassword: '',\n      newPassword: '',\n      reconfirmPassword: '',\n      oldPasswordError: false,\n      oldPasswordErrorContent: '',\n      newPasswordError: false,\n      reconfirmPasswordError: false,\n      newPasswordErrorContent: '',\n      reconfirmPasswordErrorContent: ''\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ReduxBlockUi, {\n      tag: \"div\",\n      block: CHANGE_PASSWORD,\n      unblock: [CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Container-changePassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Container-changePassword-middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, \"\\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u\"), /*#__PURE__*/React.createElement(TextInput, {\n      label: 'Mật khẩu cũ',\n      type: 'password',\n      onChangeText: this.onChangeOldPassword,\n      error: this.state.oldPasswordError,\n      errorContent: this.state.oldPasswordErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      label: 'Mật khẩu mới',\n      type: 'password',\n      onChangeText: this.onChangeNewPassword,\n      error: this.state.newPasswordError,\n      errorContent: this.state.newPasswordErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextInput, {\n      label: 'Xác nhận mật khẩu',\n      type: 'password',\n      onChangeText: this.onChangeReconfirmPassword,\n      error: this.state.reconfirmPasswordError,\n      errorContent: this.state.reconfirmPasswordErrorContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Button-changePassword-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Button-changePassword\",\n      onClick: this.handleChangePassword,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"Button-changePassword-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }, \"\\u0110\\u1ED5i m\\u1EADt kh\\u1EA9u\"))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nexport default connect(mapStateToProps, {\n  changePassword\n})(ChangePassword);","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/screens/ChangePassword/index.tsx"],"names":["React","connect","ReduxBlockUi","TextInput","CHANGE_PASSWORD","CHANGE_PASSWORD_SUCCESS","CHANGE_PASSWORD_FAILED","changePassword","ChangePassword","Component","constructor","props","onChangeOldPassword","value","setState","oldPassword","onChangeNewPassword","newPassword","onChangeReconfirmPassword","reconfirmPassword","validate","newPasswordError","newPasswordErrorContent","oldPasswordErrorContent","oldPasswordError","reconfirmPasswordErrorContent","reconfirmPasswordError","state","includes","trim","handleChangePassword","params","path","param","data","password","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ReduxBlockUi from 'react-block-ui/redux';\r\nimport TextInput from 'components/TextInput';\r\nimport { IBigRequest } from 'interfaces/common';\r\nimport { IState } from 'redux-saga/reducers';\r\nimport { CHANGE_PASSWORD } from 'redux-saga/actions';\r\nimport { CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED } from 'screens/ChangePassword/reducers';\r\nimport { changePassword } from './actions';\r\nimport './styles.css';\r\n\r\ninterface IChangePasswordProps extends React.ClassAttributes<ChangePassword> {\r\n  changePassword(params: IBigRequest): void;\r\n}\r\n\r\ninterface IChangePasswordState {\r\n  oldPassword: string;\r\n  newPassword: string;\r\n  reconfirmPassword: string;\r\n  oldPasswordError: boolean;\r\n  newPasswordError: boolean;\r\n  reconfirmPasswordError: boolean;\r\n  oldPasswordErrorContent: string;\r\n  newPasswordErrorContent: string;\r\n  reconfirmPasswordErrorContent: string;\r\n}\r\n\r\nclass ChangePassword extends React.Component<IChangePasswordProps, IChangePasswordState> {\r\n  constructor(props: IChangePasswordProps) {\r\n    super(props);\r\n    this.state = {\r\n      oldPassword: '',\r\n      newPassword: '',\r\n      reconfirmPassword: '',\r\n      oldPasswordError: false,\r\n      oldPasswordErrorContent: '',\r\n      newPasswordError: false,\r\n      reconfirmPasswordError: false,\r\n      newPasswordErrorContent: '',\r\n      reconfirmPasswordErrorContent: '',\r\n    };\r\n  }\r\n\r\n  private onChangeOldPassword = (value: string) => {\r\n    this.setState({ oldPassword: value, });\r\n  }\r\n\r\n  private onChangeNewPassword = (value: string) => {\r\n    this.setState({ newPassword: value, });\r\n  }\r\n\r\n  private onChangeReconfirmPassword = (value: string) => {\r\n    this.setState({ reconfirmPassword: value, });\r\n  }\r\n\r\n  private validate = () => {\r\n    let newPasswordError = false;\r\n    let newPasswordErrorContent = '';\r\n    let oldPasswordErrorContent = '';\r\n    let oldPasswordError = false;\r\n    let reconfirmPasswordErrorContent = '';\r\n    let reconfirmPasswordError = false;\r\n    if (this.state.newPassword.includes(' ') || this.state.newPassword.trim() === '') {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (this.state.oldPassword.trim() === '' || this.state.oldPassword.includes(' ')) {\r\n      oldPasswordError = true;\r\n      oldPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    }\r\n    if (newPasswordError !== true && oldPasswordError !== true && this.state.newPassword === this.state.oldPassword) {\r\n      newPasswordError = true;\r\n      newPasswordErrorContent = 'Mật khẩu mới không được giống mật khẩu cũ';\r\n    }\r\n    if (this.state.reconfirmPassword.trim() === '' || this.state.reconfirmPassword.includes(' ')) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Mật khẩu không được trống, và không chứa dấu cách';\r\n    } else if (this.state.reconfirmPassword !== this.state.newPassword && newPasswordError !== true) {\r\n      reconfirmPasswordError = true;\r\n      reconfirmPasswordErrorContent = 'Xác nhận mật khẩu không hợp lệ';\r\n    }\r\n\r\n    return { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError };\r\n  }\r\n\r\n  private handleChangePassword = () => {\r\n    const { newPasswordError, newPasswordErrorContent, oldPasswordErrorContent, oldPasswordError, reconfirmPasswordErrorContent, reconfirmPasswordError } = this.validate();\r\n    this.setState({\r\n      newPasswordError,\r\n      newPasswordErrorContent,\r\n      oldPasswordErrorContent,\r\n      oldPasswordError,\r\n      reconfirmPasswordErrorContent,\r\n      reconfirmPasswordError\r\n    });\r\n    if (newPasswordError === true || oldPasswordError === true || reconfirmPasswordError === true) {\r\n      return;\r\n    }\r\n    const params = {\r\n      path: '',\r\n      param: {},\r\n      data: {\r\n        oldPassword: this.state.oldPassword,\r\n        password: this.state.newPassword,\r\n      },\r\n    };\r\n\r\n    this.props.changePassword(params);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ReduxBlockUi\r\n        tag=\"div\"\r\n        block={CHANGE_PASSWORD}\r\n        unblock={[CHANGE_PASSWORD_SUCCESS, CHANGE_PASSWORD_FAILED]}\r\n      >\r\n        <div className=\"Container-changePassword\">\r\n          <div className=\"Container-changePassword-middle\">\r\n            <h2>Đổi mật khẩu</h2>\r\n            <TextInput label={'Mật khẩu cũ'} type={'password'} onChangeText={this.onChangeOldPassword} error={this.state.oldPasswordError} errorContent={this.state.oldPasswordErrorContent} />\r\n            <TextInput label={'Mật khẩu mới'} type={'password'} onChangeText={this.onChangeNewPassword} error={this.state.newPasswordError} errorContent={this.state.newPasswordErrorContent} />\r\n            <TextInput label={'Xác nhận mật khẩu'} type={'password'} onChangeText={this.onChangeReconfirmPassword} error={this.state.reconfirmPasswordError} errorContent={this.state.reconfirmPasswordErrorContent} />\r\n            <div className=\"Button-changePassword-container\">\r\n              <div className=\"Button-changePassword\" onClick={this.handleChangePassword}>\r\n                <h4 className=\"Button-changePassword-text\">Đổi mật khẩu</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </ReduxBlockUi>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n  return {\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    changePassword,\r\n  }\r\n)(ChangePassword);"]},"metadata":{},"sourceType":"module"}