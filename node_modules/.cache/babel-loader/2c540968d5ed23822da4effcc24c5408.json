{"ast":null,"code":"import { QUERY_COMPETITION_INFO, QUERY_ALL_FORMATS, QUERY_ALL_SPORTS, QUERY_SPORT_INFO, QUERY_FINAL_STAGE_SETTING, QUERY_GROUP_STAGE_SETTING, EDIT_COMPETITION, EDIT_FINAL_STAGE_SETTING, EDIT_GROUP_STAGE_SETTING, UPDATE_SCHEDULE } from \"redux-saga/actions\";\nimport { QUERY_ALL_FORMATS_SUCCESS, QUERY_ALL_FORMATS_FAILED, QUERY_GROUP_STAGE_SETTING_FAILED, QUERY_GROUP_STAGE_SETTING_SUCCESS, QUERY_FINAL_STAGE_SETTING_FAILED, QUERY_FINAL_STAGE_SETTING_SUCCESS, QUERY_COMPETITION_INFO_SUCCESS, QUERY_COMPETITION_INFO_FAILED, QUERY_ALL_SPORTS_SUCCESS, QUERY_ALL_SPORTS_FAILED, QUERY_SPORT_INFO_SUCCESS, QUERY_SPORT_INFO_FAILED, EDIT_COMPETITION_SUCCESS, EDIT_COMPETITION_FAILED, EDIT_FINAL_STAGE_SETTING_SUCCESS, EDIT_FINAL_STAGE_SETTING_FAILED, EDIT_GROUP_STAGE_SETTING_SUCCESS, EDIT_GROUP_STAGE_SETTING_FAILED, UPDATE_SCHEDULE_SUCCESS, UPDATE_SCHEDULE_FAILED } from \"./reducers\";\nexport const queryCompetition = data => ({\n  type: QUERY_COMPETITION_INFO,\n  response: {\n    success: QUERY_COMPETITION_INFO_SUCCESS,\n    failed: QUERY_COMPETITION_INFO_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const editCompetition = data => ({\n  type: EDIT_COMPETITION,\n  response: {\n    success: EDIT_COMPETITION_SUCCESS,\n    failed: EDIT_COMPETITION_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const editFinalStageSetting = data => ({\n  type: EDIT_FINAL_STAGE_SETTING,\n  response: {\n    success: EDIT_FINAL_STAGE_SETTING_SUCCESS,\n    failed: EDIT_FINAL_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const editGroupStageSetting = data => ({\n  type: EDIT_GROUP_STAGE_SETTING,\n  response: {\n    success: EDIT_GROUP_STAGE_SETTING_SUCCESS,\n    failed: EDIT_GROUP_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const updateSchedule = data => ({\n  type: UPDATE_SCHEDULE,\n  response: {\n    success: UPDATE_SCHEDULE_SUCCESS,\n    failed: UPDATE_SCHEDULE_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const queryFinalStageSetting = data => ({\n  type: QUERY_FINAL_STAGE_SETTING,\n  response: {\n    success: QUERY_FINAL_STAGE_SETTING_SUCCESS,\n    failed: QUERY_FINAL_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const queryGroupStageSetting = data => ({\n  type: QUERY_GROUP_STAGE_SETTING,\n  response: {\n    success: QUERY_GROUP_STAGE_SETTING_SUCCESS,\n    failed: QUERY_GROUP_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const querySportInfo = data => ({\n  type: QUERY_SPORT_INFO,\n  response: {\n    success: QUERY_SPORT_INFO_SUCCESS,\n    failed: QUERY_SPORT_INFO_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const queryAllSports = () => ({\n  type: QUERY_ALL_SPORTS,\n  response: {\n    success: QUERY_ALL_SPORTS_SUCCESS,\n    failed: QUERY_ALL_SPORTS_FAILED\n  }\n});\nexport const queryAllFormats = () => ({\n  type: QUERY_ALL_FORMATS,\n  response: {\n    success: QUERY_ALL_FORMATS_SUCCESS,\n    failed: QUERY_ALL_FORMATS_FAILED\n  }\n});","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/screens/CompetitionInfo/actions.ts"],"names":["QUERY_COMPETITION_INFO","QUERY_ALL_FORMATS","QUERY_ALL_SPORTS","QUERY_SPORT_INFO","QUERY_FINAL_STAGE_SETTING","QUERY_GROUP_STAGE_SETTING","EDIT_COMPETITION","EDIT_FINAL_STAGE_SETTING","EDIT_GROUP_STAGE_SETTING","UPDATE_SCHEDULE","QUERY_ALL_FORMATS_SUCCESS","QUERY_ALL_FORMATS_FAILED","QUERY_GROUP_STAGE_SETTING_FAILED","QUERY_GROUP_STAGE_SETTING_SUCCESS","QUERY_FINAL_STAGE_SETTING_FAILED","QUERY_FINAL_STAGE_SETTING_SUCCESS","QUERY_COMPETITION_INFO_SUCCESS","QUERY_COMPETITION_INFO_FAILED","QUERY_ALL_SPORTS_SUCCESS","QUERY_ALL_SPORTS_FAILED","QUERY_SPORT_INFO_SUCCESS","QUERY_SPORT_INFO_FAILED","EDIT_COMPETITION_SUCCESS","EDIT_COMPETITION_FAILED","EDIT_FINAL_STAGE_SETTING_SUCCESS","EDIT_FINAL_STAGE_SETTING_FAILED","EDIT_GROUP_STAGE_SETTING_SUCCESS","EDIT_GROUP_STAGE_SETTING_FAILED","UPDATE_SCHEDULE_SUCCESS","UPDATE_SCHEDULE_FAILED","queryCompetition","data","type","response","success","failed","path","param","editCompetition","editFinalStageSetting","editGroupStageSetting","updateSchedule","queryFinalStageSetting","queryGroupStageSetting","querySportInfo","queryAllSports","queryAllFormats"],"mappings":"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","sourcesContent":["import { IBigRequest } from \"interfaces/common\";\r\nimport {\r\n  QUERY_COMPETITION_INFO,\r\n  QUERY_ALL_FORMATS, QUERY_ALL_SPORTS,\r\n  QUERY_SPORT_INFO,\r\n  QUERY_FINAL_STAGE_SETTING,\r\n  QUERY_GROUP_STAGE_SETTING,\r\n  EDIT_COMPETITION,\r\n  EDIT_FINAL_STAGE_SETTING,\r\n  EDIT_GROUP_STAGE_SETTING,\r\n  UPDATE_SCHEDULE\r\n} from \"redux-saga/actions\";\r\nimport {\r\n  QUERY_ALL_FORMATS_SUCCESS,\r\n  QUERY_ALL_FORMATS_FAILED,\r\n  QUERY_GROUP_STAGE_SETTING_FAILED,\r\n  QUERY_GROUP_STAGE_SETTING_SUCCESS,\r\n  QUERY_FINAL_STAGE_SETTING_FAILED,\r\n  QUERY_FINAL_STAGE_SETTING_SUCCESS,\r\n  QUERY_COMPETITION_INFO_SUCCESS,\r\n  QUERY_COMPETITION_INFO_FAILED,\r\n  QUERY_ALL_SPORTS_SUCCESS,\r\n  QUERY_ALL_SPORTS_FAILED,\r\n  QUERY_SPORT_INFO_SUCCESS,\r\n  QUERY_SPORT_INFO_FAILED,\r\n  EDIT_COMPETITION_SUCCESS,\r\n  EDIT_COMPETITION_FAILED,\r\n  EDIT_FINAL_STAGE_SETTING_SUCCESS,\r\n  EDIT_FINAL_STAGE_SETTING_FAILED,\r\n  EDIT_GROUP_STAGE_SETTING_SUCCESS,\r\n  EDIT_GROUP_STAGE_SETTING_FAILED,\r\n  UPDATE_SCHEDULE_SUCCESS,\r\n  UPDATE_SCHEDULE_FAILED\r\n} from \"./reducers\";\r\n\r\nexport const queryCompetition = (data: IBigRequest) => ({\r\n  type: QUERY_COMPETITION_INFO,\r\n  response: {\r\n    success: QUERY_COMPETITION_INFO_SUCCESS,\r\n    failed: QUERY_COMPETITION_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editCompetition = (data: IBigRequest) => ({\r\n  type: EDIT_COMPETITION,\r\n  response: {\r\n    success: EDIT_COMPETITION_SUCCESS,\r\n    failed: EDIT_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editFinalStageSetting = (data: IBigRequest) => ({\r\n  type: EDIT_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: EDIT_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: EDIT_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const editGroupStageSetting = (data: IBigRequest) => ({\r\n  type: EDIT_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: EDIT_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: EDIT_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const updateSchedule = (data: IBigRequest) => ({\r\n  type: UPDATE_SCHEDULE,\r\n  response: {\r\n    success: UPDATE_SCHEDULE_SUCCESS,\r\n    failed: UPDATE_SCHEDULE_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryFinalStageSetting = (data: IBigRequest) => ({\r\n  type: QUERY_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: QUERY_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: QUERY_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryGroupStageSetting = (data: IBigRequest) => ({\r\n  type: QUERY_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: QUERY_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: QUERY_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const querySportInfo = (data: IBigRequest) => ({\r\n  type: QUERY_SPORT_INFO,\r\n  response: {\r\n    success: QUERY_SPORT_INFO_SUCCESS,\r\n    failed: QUERY_SPORT_INFO_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const queryAllSports = () => ({\r\n  type: QUERY_ALL_SPORTS,\r\n  response: {\r\n    success: QUERY_ALL_SPORTS_SUCCESS,\r\n    failed: QUERY_ALL_SPORTS_FAILED,\r\n  },\r\n});\r\n\r\nexport const queryAllFormats = () => ({\r\n  type: QUERY_ALL_FORMATS,\r\n  response: {\r\n    success: QUERY_ALL_FORMATS_SUCCESS,\r\n    failed: QUERY_ALL_FORMATS_FAILED,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}