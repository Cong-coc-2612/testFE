{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { ACTIVE_ACCOUNT } from 'redux-saga/actions';\n\nconst activeAccount = (data, path, param) => {\n  const uri = 'login/verify-authentication';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doActiveAccount(request) {\n  try {\n    const response = yield call(activeAccount, request.data.data, request.data.path, request.data.param);\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n  }\n}\n\nexport default function* watchActiveAccount() {\n  yield takeLatest(ACTIVE_ACCOUNT, doActiveAccount);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/ActiveAccount/activeAccount.ts"],"names":["call","takeLatest","put","query","METHOD","ACTIVE_ACCOUNT","activeAccount","data","path","param","uri","datas","paths","params","POST","doActiveAccount","request","response","error","MessageCode","type","success","failed","watchActiveAccount"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,cAAT,QAA+B,oBAA/B;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAC9E,QAAMC,GAAG,GAAG,6BAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAON,KAAK,CAACO,GAAD,EAAMN,MAAM,CAACU,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,eAAV,CAA0BC,OAA1B,EAA0D;AACxD,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMjB,IAAI,CAACM,aAAD,EAAgBU,OAAO,CAACT,IAAR,CAAaA,IAA7B,EAAmCS,OAAO,CAACT,IAAR,CAAaC,IAAhD,EAAsDQ,OAAO,CAACT,IAAR,CAAaE,KAAnE,CAA3B;;AACA,QAAIQ,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMjB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBI;AADf,OAAD,CAAT;AAGD;AACF,GAPD,CAOE,OAAOH,KAAP,EAAc;AACd,UAAMhB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBK;AADf,KAAD,CAAT;AAGD;AACF;;AAED,eAAe,UAAUC,kBAAV,GAA+B;AAC5C,QAAMtB,UAAU,CAACI,cAAD,EAAiBU,eAAjB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { ACTIVE_ACCOUNT } from 'redux-saga/actions';\r\n\r\nconst activeAccount = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'login/verify-authentication';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doActiveAccount(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(activeAccount, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchActiveAccount() {\r\n  yield takeLatest(ACTIVE_ACCOUNT, doActiveAccount);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}