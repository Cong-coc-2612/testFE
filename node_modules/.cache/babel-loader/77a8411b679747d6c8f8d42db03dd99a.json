{"ast":null,"code":"import { put, takeEvery } from 'redux-saga/effects';\nimport { SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED } from 'components/BracketTeam/reducers';\nimport { ADD_LIST_TEAM_SELECTING, SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\n\nfunction* doAddListTeamSelecting(request) {\n  try {\n    yield put({\n      type: request.response.success,\n      payload: request.data.listTeamId\n    });\n\n    if (request.data.listTeamId.length === 2) {\n      yield put({\n        type: SWAP_TWO_TEAM_IN_BRACKET,\n        response: {\n          success: SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,\n          failed: SWAP_TWO_TEAM_IN_BRACKET_FAILED\n        },\n        data: {\n          path: '',\n          param: {\n            team1Id: request.data.listTeamId[0],\n            team2Id: request.data.listTeamId[1]\n          },\n          data: {\n            competitionId: request.data.competitionId\n          }\n        }\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'EditTournamentInfo',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchQueryBracketBoardInfo() {\n  yield takeEvery(ADD_LIST_TEAM_SELECTING, doAddListTeamSelecting);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/AddListTeamSelecting/addListTeamSelecting.ts"],"names":["put","takeEvery","SWAP_TWO_TEAM_IN_BRACKET_SUCCESS","SWAP_TWO_TEAM_IN_BRACKET_FAILED","ADD_LIST_TEAM_SELECTING","SWAP_TWO_TEAM_IN_BRACKET","COMMON_SHOW_NOTIFICATION","doAddListTeamSelecting","request","type","response","success","payload","data","listTeamId","length","failed","path","param","team1Id","team2Id","competitionId","error","title","content","time","Date","watchQueryBracketBoardInfo"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,QAA+B,oBAA/B;AAEA,SAASC,gCAAT,EAA2CC,+BAA3C,QAAkF,iCAAlF;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,EAA4DC,wBAA5D,QAA4F,oBAA5F;;AAEA,UAAUC,sBAAV,CAAiCC,OAAjC,EAA6D;AAC3D,MAAI;AACF,UAAMR,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAED,OAAO,CAACE,QAAR,CAAiBC,OADf;AAERC,MAAAA,OAAO,EAAEJ,OAAO,CAACK,IAAR,CAAaC;AAFd,KAAD,CAAT;;AAIA,QAAKN,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsCC,MAAtC,KAAiD,CAArD,EAAwD;AACtD,YAAMf,GAAG,CAAC;AACRS,QAAAA,IAAI,EAAEJ,wBADE;AAERK,QAAAA,QAAQ,EAAE;AACRC,UAAAA,OAAO,EAAET,gCADD;AAERc,UAAAA,MAAM,EAAEb;AAFA,SAFF;AAMRU,QAAAA,IAAI,EAAE;AACJI,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLC,YAAAA,OAAO,EAAGX,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsC,CAAtC,CADJ;AAELM,YAAAA,OAAO,EAAGZ,OAAO,CAACK,IAAR,CAAaC,UAAd,CAAsC,CAAtC;AAFJ,WAFH;AAMJD,UAAAA,IAAI,EAAE;AACJQ,YAAAA,aAAa,EAAEb,OAAO,CAACK,IAAR,CAAaQ;AADxB;AANF;AANE,OAAD,CAAT;AAiBD;AACF,GAxBD,CAwBE,OAAOC,KAAP,EAAc;AACd,UAAMtB,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAED,OAAO,CAACE,QAAR,CAAiBM;AADf,KAAD,CAAT;AAGA,UAAMhB,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEH,wBADE;AAERO,MAAAA,IAAI,EAAE;AACJJ,QAAAA,IAAI,EAAE,OADF;AAEJc,QAAAA,KAAK,EAAE,oBAFH;AAGJC,QAAAA,OAAO,EAAEF,KAHL;AAIJG,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,0BAAV,GAAuC;AACpD,QAAM1B,SAAS,CAACG,uBAAD,EAA0BG,sBAA1B,CAAf;AACD","sourcesContent":["import { put, takeEvery } from 'redux-saga/effects';\r\nimport { IRequest, IParams } from 'interfaces/common';\r\nimport { SWAP_TWO_TEAM_IN_BRACKET_SUCCESS, SWAP_TWO_TEAM_IN_BRACKET_FAILED } from 'components/BracketTeam/reducers';\r\nimport { ADD_LIST_TEAM_SELECTING, SWAP_TWO_TEAM_IN_BRACKET, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\n\r\nfunction* doAddListTeamSelecting(request: IRequest<IParams>) {\r\n  try {\r\n    yield put({\r\n      type: request.response.success,\r\n      payload: request.data.listTeamId,\r\n    });\r\n    if ((request.data.listTeamId as number[]).length === 2) {\r\n      yield put({\r\n        type: SWAP_TWO_TEAM_IN_BRACKET,\r\n        response: {\r\n          success: SWAP_TWO_TEAM_IN_BRACKET_SUCCESS,\r\n          failed: SWAP_TWO_TEAM_IN_BRACKET_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            team1Id: (request.data.listTeamId as number[])[0],\r\n            team2Id: (request.data.listTeamId as number[])[1],\r\n          },\r\n          data: {\r\n            competitionId: request.data.competitionId,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditTournamentInfo',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchQueryBracketBoardInfo() {\r\n  yield takeEvery(ADD_LIST_TEAM_SELECTING, doAddListTeamSelecting);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}