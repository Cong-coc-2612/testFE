{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { CHECK_USERNAME_EXISTED } from 'redux-saga/actions';\n\nconst isUsernameExisted = (data, path, param) => {\n  const uri = 'user/getByUsername';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.GET, datas, params, paths);\n};\n\nfunction* doIsUsernameExisted(request) {\n  try {\n    const response = yield call(isUsernameExisted, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (data.User) {\n      yield put({\n        type: request.response.success,\n        payload: true\n      });\n    } else {\n      yield put({\n        type: request.response.success,\n        payload: false\n      });\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n  }\n}\n\nexport default function* watchIsUsernameExisted() {\n  yield takeLatest(CHECK_USERNAME_EXISTED, doIsUsernameExisted);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/IsUsernameExisted/isUsernameExisted.ts"],"names":["call","takeLatest","put","query","METHOD","CHECK_USERNAME_EXISTED","isUsernameExisted","data","path","param","uri","datas","paths","params","GET","doIsUsernameExisted","request","response","result","User","type","success","payload","error","failed","watchIsUsernameExisted"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,sBAAT,QAAuC,oBAAvC;;AAGA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAClF,QAAMC,GAAG,GAAG,oBAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAON,KAAK,CAACO,GAAD,EAAMN,MAAM,CAACU,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,mBAAV,CAA8BC,OAA9B,EAA8D;AAC5D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMjB,IAAI,CAACM,iBAAD,EAAoBU,OAAO,CAACT,IAAR,CAAaA,IAAjC,EAAuCS,OAAO,CAACT,IAAR,CAAaC,IAApD,EAA0DQ,OAAO,CAACT,IAAR,CAAaE,KAAvE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAIX,IAAI,CAACY,IAAT,EAAe;AACb,YAAMjB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBI,OADf;AAERC,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAT;AAID,KALD,MAKO;AACL,YAAMpB,GAAG,CAAC;AACRkB,QAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBI,OADf;AAERC,QAAAA,OAAO,EAAE;AAFD,OAAD,CAAT;AAID;AACF,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,UAAMrB,GAAG,CAAC;AACRkB,MAAAA,IAAI,EAAEJ,OAAO,CAACC,QAAR,CAAiBO;AADf,KAAD,CAAT;AAGD;AACF;;AAED,eAAe,UAAUC,sBAAV,GAAmC;AAChD,QAAMxB,UAAU,CAACI,sBAAD,EAAyBU,mBAAzB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CHECK_USERNAME_EXISTED } from 'redux-saga/actions';\r\n\r\n\r\nconst isUsernameExisted = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'user/getByUsername';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.GET, datas, params, paths);\r\n};\r\n\r\nfunction* doIsUsernameExisted(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(isUsernameExisted, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (data.User) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: true,\r\n      });\r\n    } else {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: false,\r\n      });\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchIsUsernameExisted() {\r\n  yield takeLatest(CHECK_USERNAME_EXISTED, doIsUsernameExisted);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}