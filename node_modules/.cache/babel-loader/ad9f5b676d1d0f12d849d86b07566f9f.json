{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, UPDATE_MATCH_RESULT } from 'redux-saga/actions';\n\nconst updateMatchResult = (data, path, param) => {\n  const uri = 'results/updateByMatchId';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doUpdateMatchResult(request) {\n  try {\n    const response = yield call(updateMatchResult, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      }); // yield put({\n      //   type: QUERY_COMPETITION_INFO_SUCCESS,\n      //   payload: { ...store.getState().competitionInfo, Competition: data.Competition },\n      // });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'UpdateMatchResult',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchUpdateMatchResult() {\n  yield takeLatest(UPDATE_MATCH_RESULT, doUpdateMatchResult);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/UpdateMatchResult/updateMatchResult.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","UPDATE_MATCH_RESULT","updateMatchResult","data","path","param","uri","datas","paths","params","PUT","doUpdateMatchResult","request","response","result","error","MessageCode","type","success","payload","Error","Message","failed","title","content","time","Date","watchUpdateMatchResult"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,mBAAnC,QAA8D,oBAA9D;;AAGA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAClF,QAAMC,GAAG,GAAG,yBAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOP,KAAK,CAACQ,GAAD,EAAMP,MAAM,CAACW,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,mBAAV,CAA8BC,OAA9B,EAA8D;AAC5D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMlB,IAAI,CAACO,iBAAD,EAAoBU,OAAO,CAACT,IAAR,CAAaA,IAAjC,EAAuCS,OAAO,CAACT,IAAR,CAAaC,IAApD,EAA0DQ,OAAO,CAACT,IAAR,CAAaE,KAAvE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMnB,GAAG,CAAC;AACRoB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT,CADyC,CAKzC;AACA;AACA;AACA;AACD,KATD,MASO;AACL,YAAM,IAAIiB,KAAJ,CAAUP,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBM,OAA9B,CAAN;AACD;AACF,GAfD,CAeE,OAAON,KAAP,EAAc;AACd,UAAMlB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBS;AADf,KAAD,CAAT;AAGA,UAAMzB,GAAG,CAAC;AACRoB,MAAAA,IAAI,EAAEjB,wBADE;AAERG,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJM,QAAAA,KAAK,EAAE,mBAFH;AAGJC,QAAAA,OAAO,EAAET,KAHL;AAIJU,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,sBAAV,GAAmC;AAChD,QAAM/B,UAAU,CAACK,mBAAD,EAAsBU,mBAAtB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, UPDATE_MATCH_RESULT } from 'redux-saga/actions';\r\n\r\n\r\nconst updateMatchResult = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'results/updateByMatchId';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doUpdateMatchResult(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(updateMatchResult, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      // yield put({\r\n      //   type: QUERY_COMPETITION_INFO_SUCCESS,\r\n      //   payload: { ...store.getState().competitionInfo, Competition: data.Competition },\r\n      // });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'UpdateMatchResult',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateMatchResult() {\r\n  yield takeLatest(UPDATE_MATCH_RESULT, doUpdateMatchResult);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}