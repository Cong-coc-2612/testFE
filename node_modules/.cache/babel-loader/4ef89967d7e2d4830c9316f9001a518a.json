{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_LIST_USER_SUCCESS } from 'components/AllUsers/reducers';\nimport { COMMON_SHOW_NOTIFICATION, SET_ADMIN } from 'redux-saga/actions';\nimport store from 'redux-saga/store';\n\nconst setAdmin = (data, path, param) => {\n  const uri = 'admin/changeAccountRole';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doSetAdmin(request) {\n  try {\n    const response = yield call(setAdmin, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data.User\n      });\n\n      if (store.getState().listUsers != null && store.getState().listUsers.Users.findIndex(element => element.id === data.User.id) !== -1) {\n        let tempList = store.getState().listUsers.Users.slice(0).filter(element => element.id !== data.User.id);\n        yield put({\n          type: QUERY_LIST_USER_SUCCESS,\n          payload: { ...store.getState().listUsers,\n            Users: tempList\n          }\n        });\n      }\n\n      yield put({\n        type: COMMON_SHOW_NOTIFICATION,\n        data: {\n          type: 'success',\n          title: 'Sign Up',\n          content: 'Đặt làm quản trị viên thành công',\n          time: new Date()\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'SetAdmin',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchSetAdmin() {\n  yield takeLatest(SET_ADMIN, doSetAdmin);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/SetAdmin/setAdmin.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_LIST_USER_SUCCESS","COMMON_SHOW_NOTIFICATION","SET_ADMIN","store","setAdmin","data","path","param","uri","datas","paths","params","PUT","doSetAdmin","request","response","result","error","MessageCode","type","success","payload","User","getState","listUsers","Users","findIndex","element","id","tempList","slice","filter","title","content","time","Date","Error","Message","failed","watchSetAdmin"],"mappings":"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","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_USER_SUCCESS } from 'components/AllUsers/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, SET_ADMIN } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst setAdmin = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'admin/changeAccountRole';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doSetAdmin(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(setAdmin, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.User,\r\n      });\r\n      if (store.getState().listUsers != null && (store.getState().listUsers!.Users as IParams[]).findIndex(element => element.id === data.User.id) !== -1) {\r\n        let tempList = (store.getState().listUsers!.Users as IParams[]).slice(0).filter(element => element.id !== data.User.id);\r\n        yield put({\r\n          type: QUERY_LIST_USER_SUCCESS,\r\n          payload: { ...store.getState().listUsers, Users: tempList, },\r\n        });\r\n      }\r\n      yield put({\r\n        type: COMMON_SHOW_NOTIFICATION,\r\n        data: {\r\n          type: 'success',\r\n          title: 'Sign Up',\r\n          content: 'Đặt làm quản trị viên thành công',\r\n          time: new Date(),\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'SetAdmin',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchSetAdmin() {\r\n  yield takeLatest(SET_ADMIN, doSetAdmin);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}