{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\n\nconst addACompetition = (data, path, param) => {\n  const uri = 'competition';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doAddACompetition(request) {\n  try {\n    const response = yield call(addACompetition, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data.Competition\n      });\n      yield put({\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\n        response: {\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS\n        },\n        data: {\n          path: '',\n          param: {\n            tournamentId: request.data.data.tournamentId,\n            limit: 99\n          },\n          data: {}\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'AddACompetition',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchAddACompetition() {\n  yield takeLatest(ADD_A_COMPETITION, doAddACompetition);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/AddACompetition/addACompetition.ts"],"names":["call","takeLatest","put","query","METHOD","COMMON_SHOW_NOTIFICATION","ADD_A_COMPETITION","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS","addACompetition","data","path","param","uri","datas","paths","params","POST","doAddACompetition","request","response","result","error","MessageCode","type","success","payload","Competition","failed","tournamentId","limit","Error","Message","title","content","time","Date","watchAddACompetition"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,wBAAT,EAAmCC,iBAAnC,EAAsDC,sCAAtD,QAAoG,oBAApG;AACA,SAASC,8CAAT,QAA+D,yCAA/D;;AAEA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAChF,QAAMC,GAAG,GAAG,aAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOT,KAAK,CAACU,GAAD,EAAMT,MAAM,CAACa,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,iBAAV,CAA4BC,OAA5B,EAA4D;AAC1D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACS,eAAD,EAAkBU,OAAO,CAACT,IAAR,CAAaA,IAA/B,EAAqCS,OAAO,CAACT,IAAR,CAAaC,IAAlD,EAAwDQ,OAAO,CAACT,IAAR,CAAaE,KAArE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMrB,GAAG,CAAC;AACRsB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB,IAAI,CAACiB;AAFN,OAAD,CAAT;AAIA,YAAMzB,GAAG,CAAC;AACRsB,QAAAA,IAAI,EAAEjB,sCADE;AAERa,QAAAA,QAAQ,EAAE;AACRK,UAAAA,OAAO,EAAEjB,8CADD;AAERoB,UAAAA,MAAM,EAAEpB;AAFA,SAFF;AAMRE,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLiB,YAAAA,YAAY,EAAEV,OAAO,CAACT,IAAR,CAAaA,IAAb,CAAkBmB,YAD3B;AAELC,YAAAA,KAAK,EAAE;AAFF,WAFH;AAMJpB,UAAAA,IAAI,EAAE;AANF;AANE,OAAD,CAAT;AAeD,KApBD,MAoBO;AACL,YAAM,IAAIqB,KAAJ,CAAUX,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBU,OAA9B,CAAN;AACD;AACF,GA1BD,CA0BE,OAAOV,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEnB,wBADE;AAERK,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJS,QAAAA,KAAK,EAAE,iBAFH;AAGJC,QAAAA,OAAO,EAAEZ,KAHL;AAIJa,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,oBAAV,GAAiC;AAC9C,QAAMpC,UAAU,CAACK,iBAAD,EAAoBY,iBAApB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_COMPETITION, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID } from 'redux-saga/actions';\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS } from 'components/CompetitionsSetting/reducers';\r\n\r\nconst addACompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddACompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addACompetition, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.Competition,\r\n      });\r\n      yield put({\r\n        type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n        response: {\r\n          success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n          failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            tournamentId: request.data.data.tournamentId,\r\n            limit: 99,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddACompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddACompetition() {\r\n  yield takeLatest(ADD_A_COMPETITION, doAddACompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}