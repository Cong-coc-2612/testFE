{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_TEAM_TO_COMPETITION, QUERY_LIST_TEAM } from 'redux-saga/actions';\n\nconst addATeamToCompetition = (data, path, param) => {\n  const uri = 'team';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doAddATeamToCompetition(request) {\n  try {\n    const response = yield call(addATeamToCompetition, request.data.data, request.data.path, request.data.param);\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: QUERY_LIST_TEAM,\n        response: {\n          success: QUERY_LIST_TEAM_SUCCESS,\n          failed: QUERY_LIST_TEAM_FAILED\n        },\n        data: {\n          path: '',\n          param: {\n            competitionId: request.data.data.competitionId,\n            limit: 999\n          },\n          data: {}\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'AddATeamToCompetition',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchAddATeamToCompetition() {\n  yield takeLatest(ADD_A_TEAM_TO_COMPETITION, doAddATeamToCompetition);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/AddATeamToCompetition/addATeamToCompetition.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_LIST_TEAM_SUCCESS","QUERY_LIST_TEAM_FAILED","COMMON_SHOW_NOTIFICATION","ADD_A_TEAM_TO_COMPETITION","QUERY_LIST_TEAM","addATeamToCompetition","data","path","param","uri","datas","paths","params","POST","doAddATeamToCompetition","request","response","error","MessageCode","type","success","failed","competitionId","limit","Error","Message","title","content","time","Date","watchAddATeamToCompetition"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,2BAAhE;AACA,SAASC,wBAAT,EAAmCC,yBAAnC,EAA8DC,eAA9D,QAAqF,oBAArF;;AAEA,MAAMC,qBAAqB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AACtF,QAAMC,GAAG,GAAG,MAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOV,KAAK,CAACW,GAAD,EAAMV,MAAM,CAACc,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,uBAAV,CAAkCC,OAAlC,EAAkE;AAChE,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMrB,IAAI,CAACU,qBAAD,EAAwBU,OAAO,CAACT,IAAR,CAAaA,IAArC,EAA2CS,OAAO,CAACT,IAAR,CAAaC,IAAxD,EAA8DQ,OAAO,CAACT,IAAR,CAAaE,KAA3E,CAA3B;;AACA,QAAIQ,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMrB,GAAG,CAAC;AACRsB,QAAAA,IAAI,EAAEf,eADE;AAERY,QAAAA,QAAQ,EAAE;AACRI,UAAAA,OAAO,EAAEpB,uBADD;AAERqB,UAAAA,MAAM,EAAEpB;AAFA,SAFF;AAMRK,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAE,EADF;AAEJC,UAAAA,KAAK,EAAE;AACLc,YAAAA,aAAa,EAAEP,OAAO,CAACT,IAAR,CAAaA,IAAb,CAAkBgB,aAD5B;AAELC,YAAAA,KAAK,EAAE;AAFF,WAFH;AAMJjB,UAAAA,IAAI,EAAE;AANF;AANE,OAAD,CAAT;AAeD,KAhBD,MAgBO;AACL,YAAM,IAAIkB,KAAJ,CAAUR,QAAQ,CAACV,IAAT,CAAcW,KAAd,CAAoBQ,OAA9B,CAAN;AACD;AACF,GArBD,CAqBE,OAAOR,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEjB,wBADE;AAERI,MAAAA,IAAI,EAAE;AACJa,QAAAA,IAAI,EAAE,OADF;AAEJO,QAAAA,KAAK,EAAE,uBAFH;AAGJC,QAAAA,OAAO,EAAEV,KAHL;AAIJW,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,0BAAV,GAAuC;AACpD,QAAMlC,UAAU,CAACO,yBAAD,EAA4BW,uBAA5B,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_LIST_TEAM_SUCCESS, QUERY_LIST_TEAM_FAILED } from 'components/Teams/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, ADD_A_TEAM_TO_COMPETITION, QUERY_LIST_TEAM } from 'redux-saga/actions';\r\n\r\nconst addATeamToCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'team';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doAddATeamToCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(addATeamToCompetition, request.data.data, request.data.path, request.data.param);\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: QUERY_LIST_TEAM,\r\n        response: {\r\n          success: QUERY_LIST_TEAM_SUCCESS,\r\n          failed: QUERY_LIST_TEAM_FAILED,\r\n        },\r\n        data: {\r\n          path: '',\r\n          param: {\r\n            competitionId: request.data.data.competitionId,\r\n            limit: 999,\r\n          },\r\n          data: {},\r\n        },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'AddATeamToCompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchAddATeamToCompetition() {\r\n  yield takeLatest(ADD_A_TEAM_TO_COMPETITION, doAddATeamToCompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}