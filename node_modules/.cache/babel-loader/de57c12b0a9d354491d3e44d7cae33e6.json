{"ast":null,"code":"import { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID, ADD_A_COMPETITION, CREATE_A_FINAL_STAGE_SETTING, CREATE_A_GROUP_STAGE_SETTING } from \"redux-saga/actions\";\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED, ADD_A_COMPETITION_SUCCESS, ADD_A_COMPETITION_FAILED, CREATE_A_FINAL_STAGE_SETTING_SUCCESS, CREATE_A_FINAL_STAGE_SETTING_FAILED, CREATE_A_GROUP_STAGE_SETTING_SUCCESS, CREATE_A_GROUP_STAGE_SETTING_FAILED } from \"./reducers\";\nexport const queryAllCompetitionsByTournamentId = data => ({\n  type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\n  response: {\n    success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\n    failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const addACompetition = data => ({\n  type: ADD_A_COMPETITION,\n  response: {\n    success: ADD_A_COMPETITION_SUCCESS,\n    failed: ADD_A_COMPETITION_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const createAFinalStageSetting = data => ({\n  type: CREATE_A_FINAL_STAGE_SETTING,\n  response: {\n    success: CREATE_A_FINAL_STAGE_SETTING_SUCCESS,\n    failed: CREATE_A_FINAL_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});\nexport const createAGroupStageSetting = data => ({\n  type: CREATE_A_GROUP_STAGE_SETTING,\n  response: {\n    success: CREATE_A_GROUP_STAGE_SETTING_SUCCESS,\n    failed: CREATE_A_GROUP_STAGE_SETTING_FAILED\n  },\n  data: {\n    path: data.path,\n    param: data.param,\n    data: data.data\n  }\n});","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/components/CompetitionsSetting/actions.ts"],"names":["QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID","ADD_A_COMPETITION","CREATE_A_FINAL_STAGE_SETTING","CREATE_A_GROUP_STAGE_SETTING","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS","QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED","ADD_A_COMPETITION_SUCCESS","ADD_A_COMPETITION_FAILED","CREATE_A_FINAL_STAGE_SETTING_SUCCESS","CREATE_A_FINAL_STAGE_SETTING_FAILED","CREATE_A_GROUP_STAGE_SETTING_SUCCESS","CREATE_A_GROUP_STAGE_SETTING_FAILED","queryAllCompetitionsByTournamentId","data","type","response","success","failed","path","param","addACompetition","createAFinalStageSetting","createAGroupStageSetting"],"mappings":"AACA,SAASA,sCAAT,EAAiDC,iBAAjD,EAAoEC,4BAApE,EAAkGC,4BAAlG,QAAsI,oBAAtI;AACA,SAASC,8CAAT,EAAyDC,6CAAzD,EAAwGC,yBAAxG,EAAmIC,wBAAnI,EAA6JC,oCAA7J,EAAmMC,mCAAnM,EAAwOC,oCAAxO,EAA8QC,mCAA9Q,QAAyT,YAAzT;AAEA,OAAO,MAAMC,kCAAkC,GAAIC,IAAD,KAAwB;AACxEC,EAAAA,IAAI,EAAEd,sCADkE;AAExEe,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAEZ,8CADD;AAERa,IAAAA,MAAM,EAAEZ;AAFA,GAF8D;AAMxEQ,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAEL,IAAI,CAACK,IADP;AAEJC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAFR;AAGJN,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAHP;AANkE,CAAxB,CAA3C;AAaP,OAAO,MAAMO,eAAe,GAAIP,IAAD,KAAwB;AACrDC,EAAAA,IAAI,EAAEb,iBAD+C;AAErDc,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAEV,yBADD;AAERW,IAAAA,MAAM,EAAEV;AAFA,GAF2C;AAMrDM,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAEL,IAAI,CAACK,IADP;AAEJC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAFR;AAGJN,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAHP;AAN+C,CAAxB,CAAxB;AAaP,OAAO,MAAMQ,wBAAwB,GAAIR,IAAD,KAAwB;AAC9DC,EAAAA,IAAI,EAAEZ,4BADwD;AAE9Da,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAER,oCADD;AAERS,IAAAA,MAAM,EAAER;AAFA,GAFoD;AAM9DI,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAEL,IAAI,CAACK,IADP;AAEJC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAFR;AAGJN,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAHP;AANwD,CAAxB,CAAjC;AAaP,OAAO,MAAMS,wBAAwB,GAAIT,IAAD,KAAwB;AAC9DC,EAAAA,IAAI,EAAEX,4BADwD;AAE9DY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAEN,oCADD;AAERO,IAAAA,MAAM,EAAEN;AAFA,GAFoD;AAM9DE,EAAAA,IAAI,EAAE;AACJK,IAAAA,IAAI,EAAEL,IAAI,CAACK,IADP;AAEJC,IAAAA,KAAK,EAAEN,IAAI,CAACM,KAFR;AAGJN,IAAAA,IAAI,EAAEA,IAAI,CAACA;AAHP;AANwD,CAAxB,CAAjC","sourcesContent":["import { IBigRequest } from \"interfaces/common\";\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID, ADD_A_COMPETITION, CREATE_A_FINAL_STAGE_SETTING, CREATE_A_GROUP_STAGE_SETTING } from \"redux-saga/actions\";\r\nimport { QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS, QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED, ADD_A_COMPETITION_SUCCESS, ADD_A_COMPETITION_FAILED, CREATE_A_FINAL_STAGE_SETTING_SUCCESS, CREATE_A_FINAL_STAGE_SETTING_FAILED, CREATE_A_GROUP_STAGE_SETTING_SUCCESS, CREATE_A_GROUP_STAGE_SETTING_FAILED } from \"./reducers\";\r\n\r\nexport const queryAllCompetitionsByTournamentId = (data: IBigRequest) => ({\r\n  type: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID,\r\n  response: {\r\n    success: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_SUCCESS,\r\n    failed: QUERY_ALL_COMPETITION_BY_TOURNAMENT_ID_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const addACompetition = (data: IBigRequest) => ({\r\n  type: ADD_A_COMPETITION,\r\n  response: {\r\n    success: ADD_A_COMPETITION_SUCCESS,\r\n    failed: ADD_A_COMPETITION_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const createAFinalStageSetting = (data: IBigRequest) => ({\r\n  type: CREATE_A_FINAL_STAGE_SETTING,\r\n  response: {\r\n    success: CREATE_A_FINAL_STAGE_SETTING_SUCCESS,\r\n    failed: CREATE_A_FINAL_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});\r\n\r\nexport const createAGroupStageSetting = (data: IBigRequest) => ({\r\n  type: CREATE_A_GROUP_STAGE_SETTING,\r\n  response: {\r\n    success: CREATE_A_GROUP_STAGE_SETTING_SUCCESS,\r\n    failed: CREATE_A_GROUP_STAGE_SETTING_FAILED,\r\n  },\r\n  data: {\r\n    path: data.path,\r\n    param: data.param,\r\n    data: data.data,\r\n  },\r\n});"]},"metadata":{},"sourceType":"module"}