{"ast":null,"code":"import axios from 'axios';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport 'whatwg-fetch';\nimport { COMMON_SHOW_NOTIFICATION, USER_UPDATE_AVATAR } from 'redux-saga/actions';\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\nimport store from 'redux-saga/store';\nimport config from 'config';\n\nconst uploadFile = (data, path, param) => {\n  if (param.file != null) {\n    const file = param.file[0];\n    const form = new FormData();\n    form.append('file', file); // return query(uri, METHOD.POST, undefined, undefined, paths, form);\n\n    return new Promise((resolve, reject) => {\n      axios.post(`${config.apiUrl.baseURI}user/uploadAvatar`, form, {\n        params: {\n          id: param.id\n        },\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }).then(response => {\n        console.log('SUCCESS!!', response);\n        resolve(response);\n      }).catch(error => {\n        console.log('FAILED!!', error);\n        reject(error);\n      });\n    });\n  } else {\n    return null;\n  }\n};\n\nfunction* doUpdateAvatar(request) {\n  try {\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data.User\n      });\n      yield put({\n        type: QUERY_USER_INFO_SUCCESS,\n        payload: { ...store.getState().userInfo,\n          User: data.User\n        }\n      });\n\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo.id === data.User.id) {\n        yield put({\n          type: LOGIN_SUCCESS,\n          payload: data.User\n        });\n      }\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'Update Background',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchUpdateAvatar() {\n  yield takeLatest(USER_UPDATE_AVATAR, doUpdateAvatar);\n}","map":{"version":3,"sources":["E:/DoAn_2020/SportTournamentSupportSystem/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/UpdateAvatar/updateAvatar.ts"],"names":["axios","call","put","takeLatest","COMMON_SHOW_NOTIFICATION","USER_UPDATE_AVATAR","QUERY_USER_INFO_SUCCESS","LOGIN_SUCCESS","store","config","uploadFile","data","path","param","file","form","FormData","append","Promise","resolve","reject","post","apiUrl","baseURI","params","id","headers","then","response","console","log","catch","error","doUpdateAvatar","request","result","MessageCode","type","success","payload","User","getState","userInfo","currentUserInfo","Error","Message","title","content","time","Date","watchUpdateAvatar"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { call, put, takeLatest } from 'redux-saga/effects';\r\nimport 'whatwg-fetch';\r\nimport { IParams, IRequest, IBigRequest, IResponse } from 'interfaces/common';\r\nimport { COMMON_SHOW_NOTIFICATION, USER_UPDATE_AVATAR } from 'redux-saga/actions';\r\nimport { QUERY_USER_INFO_SUCCESS } from 'screens/UserInfo/reducers';\r\nimport { LOGIN_SUCCESS } from 'screens/Login/reducers';\r\nimport store from 'redux-saga/store';\r\nimport config from 'config';\r\n\r\nconst uploadFile = (data: IParams, path: string | number, param: IParams) => {\r\n  if (param.file != null) {\r\n    const file: File = (param.file as unknown as IParams[])[0] as unknown as File;\r\n    const form = new FormData();\r\n    form.append('file', file);\r\n    // return query(uri, METHOD.POST, undefined, undefined, paths, form);\r\n    return new Promise<IResponse<IParams>>((resolve: Function, reject: Function) => {\r\n      axios.post(`${config.apiUrl.baseURI}user/uploadAvatar`,\r\n        form,\r\n        {\r\n          params: { id: param.id },\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          }\r\n        }\r\n      ).then((response) => {\r\n        console.log('SUCCESS!!', response);\r\n        resolve(response);\r\n      })\r\n        .catch((error) => {\r\n          console.log('FAILED!!', error);\r\n          reject(error);\r\n        });\r\n    });\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nfunction* doUpdateAvatar(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(uploadFile, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data.User,\r\n      });\r\n      yield put({\r\n        type: QUERY_USER_INFO_SUCCESS,\r\n        payload: { ...store.getState().userInfo, User: data.User },\r\n      });\r\n      if (store.getState().currentUserInfo != null && store.getState().currentUserInfo!.id === data.User.id) {\r\n        yield put({\r\n          type: LOGIN_SUCCESS,\r\n          payload: data.User,\r\n        });\r\n      }\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'Update Background',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchUpdateAvatar() {\r\n  yield takeLatest(USER_UPDATE_AVATAR, doUpdateAvatar);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}