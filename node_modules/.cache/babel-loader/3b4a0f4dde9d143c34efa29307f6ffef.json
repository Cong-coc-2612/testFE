{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { QUERY_COMPETITION_INFO_SUCCESS } from 'screens/CompetitionInfo/reducers';\nimport { COMMON_SHOW_NOTIFICATION, EDIT_COMPETITION } from 'redux-saga/actions';\nimport store from 'redux-saga/store';\n\nconst editCompetition = (data, path, param) => {\n  const uri = 'competition';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.PUT, datas, params, paths);\n};\n\nfunction* doEditCompetition(request) {\n  try {\n    const response = yield call(editCompetition, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield put({\n        type: request.response.success,\n        payload: data\n      });\n      yield put({\n        type: QUERY_COMPETITION_INFO_SUCCESS,\n        payload: { ...store.getState().competitionInfo,\n          Competition: data.Competition\n        }\n      });\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: request.response.failed\n    });\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'EditCompetition',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchEditCompetition() {\n  yield takeLatest(EDIT_COMPETITION, doEditCompetition);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/EditCompetition/editCompetition.ts"],"names":["call","takeLatest","put","query","METHOD","QUERY_COMPETITION_INFO_SUCCESS","COMMON_SHOW_NOTIFICATION","EDIT_COMPETITION","store","editCompetition","data","path","param","uri","datas","paths","params","PUT","doEditCompetition","request","response","result","error","MessageCode","type","success","payload","getState","competitionInfo","Competition","Error","Message","failed","title","content","time","Date","watchEditCompetition"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,8BAAT,QAA+C,kCAA/C;AACA,SAASC,wBAAT,EAAmCC,gBAAnC,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAGA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AAChF,QAAMC,GAAG,GAAG,aAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOT,KAAK,CAACU,GAAD,EAAMT,MAAM,CAACa,GAAb,EAAkBH,KAAlB,EAAyBE,MAAzB,EAAiCD,KAAjC,CAAZ;AACD,CAND;;AAQA,UAAUG,iBAAV,CAA4BC,OAA5B,EAA4D;AAC1D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMpB,IAAI,CAACS,eAAD,EAAkBU,OAAO,CAACT,IAAR,CAAaA,IAA/B,EAAqCS,OAAO,CAACT,IAAR,CAAaC,IAAlD,EAAwDQ,OAAO,CAACT,IAAR,CAAaE,KAArE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMrB,GAAG,CAAC;AACRsB,QAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBK,OADf;AAERC,QAAAA,OAAO,EAAEhB;AAFD,OAAD,CAAT;AAIA,YAAMR,GAAG,CAAC;AACRsB,QAAAA,IAAI,EAAEnB,8BADE;AAERqB,QAAAA,OAAO,EAAE,EAAE,GAAGlB,KAAK,CAACmB,QAAN,GAAiBC,eAAtB;AAAuCC,UAAAA,WAAW,EAAEnB,IAAI,CAACmB;AAAzD;AAFD,OAAD,CAAT;AAID,KATD,MASO;AACL,YAAM,IAAIC,KAAJ,CAAUV,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBS,OAA9B,CAAN;AACD;AACF,GAfD,CAeE,OAAOT,KAAP,EAAc;AACd,UAAMpB,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAEL,OAAO,CAACC,QAAR,CAAiBY;AADf,KAAD,CAAT;AAGA,UAAM9B,GAAG,CAAC;AACRsB,MAAAA,IAAI,EAAElB,wBADE;AAERI,MAAAA,IAAI,EAAE;AACJc,QAAAA,IAAI,EAAE,OADF;AAEJS,QAAAA,KAAK,EAAE,iBAFH;AAGJC,QAAAA,OAAO,EAAEZ,KAHL;AAIJa,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,oBAAV,GAAiC;AAC9C,QAAMpC,UAAU,CAACM,gBAAD,EAAmBW,iBAAnB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { QUERY_COMPETITION_INFO_SUCCESS } from 'screens/CompetitionInfo/reducers';\r\nimport { COMMON_SHOW_NOTIFICATION, EDIT_COMPETITION } from 'redux-saga/actions';\r\nimport store from 'redux-saga/store';\r\n\r\n\r\nconst editCompetition = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'competition';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.PUT, datas, params, paths);\r\n};\r\n\r\nfunction* doEditCompetition(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(editCompetition, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield put({\r\n        type: request.response.success,\r\n        payload: data,\r\n      });\r\n      yield put({\r\n        type: QUERY_COMPETITION_INFO_SUCCESS,\r\n        payload: { ...store.getState().competitionInfo, Competition: data.Competition },\r\n      });\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: request.response.failed,\r\n    });\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'EditCompetition',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchEditCompetition() {\r\n  yield takeLatest(EDIT_COMPETITION, doEditCompetition);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}