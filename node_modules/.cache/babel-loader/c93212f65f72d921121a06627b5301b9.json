{"ast":null,"code":"import { call, takeLatest, put } from 'redux-saga/effects';\nimport { query, METHOD } from 'utils/socketApi';\nimport { CREATE_NEW_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\nimport history from \"utils/history\";\n\nconst createNewTournament = (data, path, param) => {\n  const uri = 'tournament';\n  const datas = { ...data\n  };\n  const paths = path;\n  const params = { ...param\n  };\n  return query(uri, METHOD.POST, datas, params, paths);\n};\n\nfunction* doCreateNewTournament(request) {\n  try {\n    const response = yield call(createNewTournament, request.data.data, request.data.path, request.data.param);\n    const data = response.data.result;\n\n    if (response.data.error.MessageCode === 0) {\n      yield history.push(`/tournament/${data.Tournament.id}`);\n    } else {\n      throw new Error(response.data.error.Message);\n    }\n  } catch (error) {\n    yield put({\n      type: COMMON_SHOW_NOTIFICATION,\n      data: {\n        type: 'error',\n        title: 'CreateNewTournament',\n        content: error,\n        time: new Date()\n      }\n    });\n  }\n}\n\nexport default function* watchCreateNewTournament() {\n  yield takeLatest(CREATE_NEW_TOURNAMENT, doCreateNewTournament);\n}","map":{"version":3,"sources":["E:/testFrontEnd/frontEnd/SportTournamentSupportSystem/src/redux-saga/sagas/CreateNewTournament/createNewTournament.ts"],"names":["call","takeLatest","put","query","METHOD","CREATE_NEW_TOURNAMENT","COMMON_SHOW_NOTIFICATION","history","createNewTournament","data","path","param","uri","datas","paths","params","POST","doCreateNewTournament","request","response","result","error","MessageCode","push","Tournament","id","Error","Message","type","title","content","time","Date","watchCreateNewTournament"],"mappings":"AAAA,SAASA,IAAT,EAAeC,UAAf,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,iBAA9B;AAEA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,oBAAhE;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAGA,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAgBC,IAAhB,EAAuCC,KAAvC,KAA0D;AACpF,QAAMC,GAAG,GAAG,YAAZ;AACA,QAAMC,KAAK,GAAG,EAAE,GAAGJ;AAAL,GAAd;AACA,QAAMK,KAAK,GAAGJ,IAAd;AACA,QAAMK,MAAM,GAAG,EAAE,GAAGJ;AAAL,GAAf;AACA,SAAOR,KAAK,CAACS,GAAD,EAAMR,MAAM,CAACY,IAAb,EAAmBH,KAAnB,EAA0BE,MAA1B,EAAkCD,KAAlC,CAAZ;AACD,CAND;;AAQA,UAAUG,qBAAV,CAAgCC,OAAhC,EAAgE;AAC9D,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACQ,mBAAD,EAAsBU,OAAO,CAACT,IAAR,CAAaA,IAAnC,EAAyCS,OAAO,CAACT,IAAR,CAAaC,IAAtD,EAA4DQ,OAAO,CAACT,IAAR,CAAaE,KAAzE,CAA3B;AACA,UAAMF,IAAI,GAAGU,QAAQ,CAACV,IAAT,CAAcW,MAA3B;;AACA,QAAID,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBC,WAApB,KAAoC,CAAxC,EAA2C;AACzC,YAAMf,OAAO,CAACgB,IAAR,CAAc,eAAcd,IAAI,CAACe,UAAL,CAAgBC,EAAG,EAA/C,CAAN;AACD,KAFD,MAEO;AACL,YAAM,IAAIC,KAAJ,CAAUP,QAAQ,CAACV,IAAT,CAAcY,KAAd,CAAoBM,OAA9B,CAAN;AACD;AACF,GARD,CAQE,OAAON,KAAP,EAAc;AACd,UAAMnB,GAAG,CAAC;AACR0B,MAAAA,IAAI,EAAEtB,wBADE;AAERG,MAAAA,IAAI,EAAE;AACJmB,QAAAA,IAAI,EAAE,OADF;AAEJC,QAAAA,KAAK,EAAE,qBAFH;AAGJC,QAAAA,OAAO,EAAET,KAHL;AAIJU,QAAAA,IAAI,EAAE,IAAIC,IAAJ;AAJF;AAFE,KAAD,CAAT;AASD;AACF;;AAED,eAAe,UAAUC,wBAAV,GAAqC;AAClD,QAAMhC,UAAU,CAACI,qBAAD,EAAwBY,qBAAxB,CAAhB;AACD","sourcesContent":["import { call, takeLatest, put } from 'redux-saga/effects';\r\nimport { query, METHOD } from 'utils/socketApi';\r\nimport { IRequest, IParams, IBigRequest } from 'interfaces/common';\r\nimport { CREATE_NEW_TOURNAMENT, COMMON_SHOW_NOTIFICATION } from 'redux-saga/actions';\r\nimport history from \"utils/history\";\r\n\r\n\r\nconst createNewTournament = (data: IParams, path: string | number, param: IParams) => {\r\n  const uri = 'tournament';\r\n  const datas = { ...data };\r\n  const paths = path;\r\n  const params = { ...param };\r\n  return query(uri, METHOD.POST, datas, params, paths);\r\n};\r\n\r\nfunction* doCreateNewTournament(request: IRequest<IBigRequest>) {\r\n  try {\r\n    const response = yield call(createNewTournament, request.data.data, request.data.path, request.data.param);\r\n    const data = response.data.result;\r\n    if (response.data.error.MessageCode === 0) {\r\n      yield history.push(`/tournament/${data.Tournament.id}`);\r\n    } else {\r\n      throw new Error(response.data.error.Message);\r\n    }\r\n  } catch (error) {\r\n    yield put({\r\n      type: COMMON_SHOW_NOTIFICATION,\r\n      data: {\r\n        type: 'error',\r\n        title: 'CreateNewTournament',\r\n        content: error,\r\n        time: new Date(),\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* watchCreateNewTournament() {\r\n  yield takeLatest(CREATE_NEW_TOURNAMENT, doCreateNewTournament);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}